00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 7/20/2022 4:35:17 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :Basic Dissassembler
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  START:                  ; first instruction of program
00001000                             9  
00001000                            10  * Put program code here
00001000                            11  
00001000                            12  *------LEA = Load effective address
00001000                            13  *------Running Trap #15 while the number 14 is in D0 will print out whatever data is in the address stored in A1
00001000                            14  
00001000  43F9 000011AC             15          LEA         INTRO_MSG,      A1
00001006  103C 000E                 16          MOVE.B      #14,            D0    
0000100A  4E4F                      17          TRAP        #15
0000100C                            18          
0000100C  43F9 000011D2             19          LEA         STARTING_MSG,   A1
00001012  103C 000E                 20          MOVE.B      #14,            D0   
00001016  4E4F                      21          TRAP        #15
00001018                            22          
00001018                            23  *----------------- 
00001018                            24  *       Running trap command 15 while the number 2 is in D0 
00001018                            25  *       Will ask the user to enter input
00001018                            26  *       after the user hits enter, the length of the input is stored in D1
00001018                            27  *       and the user data is stored in the space allocated by STA_ADDR repressented by ASSCI code
00001018                            28  *       IE 31 = 1, 32 = 2 etc etc
00001018                            29  *       If I store the number 1200, it will appear in memory as 31 32 30 30
00001018                            30  
00001018  43F9 0000122C             31          LEA         STA_ADDR,       A1
0000101E  103C 0002                 32          MOVE.B      #2,             D0
00001022  4E4F                      33          TRAP        #15
00001024                            34          
00001024  4EB9 00001056             35          JSR         CONVERT_TO_ASCII
0000102A                            36          
0000102A                            37          * A3 now has our Starting Address
0000102A  2647                      38          MOVEA.L     D7,             A3
0000102C                            39          
0000102C  4282                      40          CLR.L       D2
0000102E  4287                      41          CLR.L       D7
00001030                            42          
00001030  43F9 000011F6             43          LEA         ENDING_MSG,     A1
00001036  103C 000E                 44          MOVE.B      #14,            D0
0000103A  4E4F                      45          TRAP        #15
0000103C                            46          
0000103C  43F9 00001254             47          LEA         END_ADDR,       A1
00001042  103C 0002                 48          MOVE.B      #2,             D0
00001046  4E4F                      49          TRAP        #15
00001048                            50          
00001048  4EB9 00001056             51          JSR         CONVERT_TO_ASCII
0000104E                            52          * A4 now has our Ending Address
0000104E  2847                      53          MOVEA.L     D7,             A4
00001050                            54          
00001050                            55  
00001050  4EB9 00001098             56          JSR         PRINT_MEMORY_LOOP
00001056                            57          
00001056                            58          
00001056                            59          
00001056                            60          *BRA         DONE
00001056                            61          *   ASCII conversion
00001056                            62  *---------------------------------------        
00001056                            63  CONVERT_TO_ASCII:             
00001056  0C01 0000                 64          CMPI.B      #$0,            D1
0000105A  6700 0012                 65          BEQ         ASCII_DONE
0000105E  1419                      66          MOVE.B      (A1)+,          D2
00001060  103C 0039                 67          MOVE.B      #$39,           D0
00001064  B400                      68          CMP.B       D0,             D2
00001066  6F00 0008                 69          BLE         NUMBER_ASCII   
0000106A  6000 0018                 70          BRA         LETTER_ASCII  
0000106E                            71  
0000106E                            72  ASCII_DONE:
0000106E  4E75                      73          RTS
00001070                            74          
00001070                            75  NUMBER_ASCII:
00001070  5301                      76          SUBI.B      #$1,            D1
00001072  103C 0030                 77          MOVE.B      #$30,           D0
00001076  9400                      78          SUB.B       D0,             D2
00001078  DE02                      79          ADD.B       D2,             D7
0000107A  0C01 0000                 80          CMPI.B      #$0,            D1
0000107E  67EE                      81          BEQ         ASCII_DONE
00001080  E987                      82          ASL.L       #4,             D7
00001082  60D2                      83          BRA         CONVERT_TO_ASCII
00001084                            84  LETTER_ASCII:
00001084  5301                      85          SUBI.B      #$1,            D1
00001086  103C 0037                 86          MOVE.B      #$37,           D0
0000108A  9400                      87          SUB.B       D0,             D2
0000108C  DE02                      88          ADD.B       D2,             D7
0000108E  0C01 0000                 89          CMPI.B      #$0,            D1
00001092  67DA                      90          BEQ         ASCII_DONE
00001094  E987                      91          ASL.L       #4,             D7
00001096  60BE                      92          BRA         CONVERT_TO_ASCII
00001098                            93  *---------------------------------------        
00001098                            94          
00001098                            95          
00001098                            96          *   Printing data and addresses
00001098                            97  *---------------------------------------
00001098                            98  
00001098                            99  PRINT_MEMORY_LOOP:
00001098                           100          * add code here to compare current address with end address
00001098                           101          
00001098                           102          * if equal to, or further than ending address jump to DONE
00001098                           103          * SIMHALT
00001098  B9CB                     104          CMP.L       A3,             A4
0000109A  6700 00FE                105          BEQ         DONE
0000109E  6F00 00FA                106          BLE         DONE
000010A2                           107          
000010A2                           108          * We are goiong to keep track of the number of byts we have examined using D1
000010A2                           109          * Before printing the address we have to reverse the order
000010A2  4281                     110          CLR.L       D1
000010A4  4282                     111          CLR.L       D2
000010A6  123C 0008                112          MOVE.B      #$8,            D1
000010AA  260B                     113          MOVE.L      A3,             D3
000010AC  4EB9 00001130            114          JSR         REVERSE_START
000010B2                           115          
000010B2  2607                     116          MOVE.L      D7,             D3
000010B4  4281                     117          CLR.L       D1
000010B6  4282                     118          CLR.L       D2
000010B8  123C 0008                119          MOVE.B      #$8,            D1
000010BC  4EB9 00001102            120          JSR         PRINT_LOOP
000010C2                           121          
000010C2                           122          
000010C2                           123          * space between address and data
000010C2  43F9 0000127C            124          LEA         SPACE_MSG,      A1
000010C8  103C 000E                125          MOVE.B      #14,            D0    
000010CC  4E4F                     126          TRAP        #15
000010CE                           127          
000010CE  4281                     128          CLR.L       D1
000010D0  4282                     129          CLR.L       D2
000010D2  123C 0008                130          MOVE.B      #$8,            D1
000010D6  2613                     131          MOVE.L      (A3),          D3
000010D8                           132          
000010D8                           133          *START OF OPCODE RECOGNITION
000010D8                           134          
000010D8  4EB9 00001160            135          JSR         OPCODE_DETECT
000010DE                           136          
000010DE  4EB9 00001130            137          JSR         REVERSE_START
000010E4                           138          
000010E4  2607                     139          MOVE.L      D7,             D3
000010E6  4281                     140          CLR.L       D1
000010E8  4282                     141          CLR.L       D2
000010EA  123C 0008                142          MOVE.B      #$8,            D1
000010EE  4EB9 00001102            143          JSR         PRINT_LOOP
000010F4                           144          
000010F4                           145          * new line
000010F4  43F9 000012A4            146          LEA         NEW_LINE,       A1
000010FA  103C 000E                147          MOVE.B      #14,            D0    
000010FE  4E4F                     148          TRAP        #15
00001100                           149  *        SIMHALT
00001100                           150  *        RTS
00001100                           151          * branch to the start of this method
00001100  6096                     152          BRA         PRINT_MEMORY_LOOP
00001102                           153  
00001102                           154  
00001102                           155  PRINT_LOOP:
00001102                           156  
00001102                           157          
00001102                           158          * When D1 == 0, we are done and exit this loop
00001102  0C01 0000                159          CMPI.B      #$0,            D1
00001106  6700 0026                160          BEQ         PRINT_DONE
0000110A  5301                     161          SUBI.B      #$1,            D1
0000110C                           162          
0000110C  1403                     163          MOVE.B      D3,             D2
0000110E                           164          * Bit shifting to isolate the right most digit
0000110E                           165          * 1234 5678 => 8000 0000 => 0000 0008
0000110E  103C 001C                166          MOVE.B      #28,            D0    
00001112  E1AA                     167          LSL.L       D0,             D2     
00001114  E99A                     168          ROL.L       #4,             D2 
00001116                           169          
00001116                           170          * Bit shifting to prep the next digit
00001116                           171          * 1234 4567 => 0123 4567
00001116  E883                     172          ASR.L       #4, D3
00001118                           173          
00001118                           174          *Assuming D4 is empty
00001118                           175          
00001118  1802                     176          MOVE.B       D2,            D4
0000111A  43F9 0000127F            177          LEA          ZERO_MSG,      A1
00001120                           178          * load the address of Zero_msg
00001120                           179          * because all of the msgs are stored next to each other in order
00001120                           180          * we can simply take the value isolated from the number, multiply it by 2 (msg's take up 2 bytes)
00001120                           181          * and then add it to the address starting at zero_msg
00001120  C8FC 0002                182          MULU         #2,            D4
00001124  D3C4                     183          ADDA.L       D4,            A1
00001126                           184          
00001126                           185          * trap command 14 reads whatever address is in A1, and then spits out the data to the console
00001126  103C 000E                186          MOVE.B       #14,           D0
0000112A  4E4F                     187          TRAP         #15
0000112C  60D4                     188          BRA          PRINT_LOOP
0000112E                           189          
0000112E                           190  PRINT_DONE:
0000112E  4E75                     191          RTS
00001130                           192          
00001130                           193      *   Reversing the address
00001130                           194  *---------------------------------------
00001130                           195  
00001130                           196  REVERSE_START:        
00001130  4281                     197          CLR.L       D1
00001132  4287                     198          CLR.L       D7
00001134  123C 0008                199          MOVE.B      #8,             D1
00001138  4EB9 00001140            200          JSR         REVERSE_LOOP
0000113E  4E75                     201          RTS
00001140                           202          
00001140                           203  REVERSE_LOOP:
00001140                           204  
00001140                           205          
00001140  0C01 0000                206          CMPI.B      #$0,            D1
00001144  6700 0018                207          BEQ         REVERSE_DONE
00001148  5301                     208          SUBI.B      #$1,            D1
0000114A  E987                     209          ASL.L       #4,             D7
0000114C                           210          
0000114C  4285                     211          CLR.L       D5
0000114E                           212          
0000114E  1A03                     213          MOVE.B      D3,             D5
00001150                           214          
00001150  103C 001C                215          MOVE.B      #28,            D0    
00001154  E1AD                     216          LSL.L       D0,             D5     
00001156  E99D                     217          ROL.L       #4,             D5
00001158                           218          
00001158  DE05                     219          ADD.B       D5,             D7
0000115A                           220          
0000115A                           221          
0000115A  E883                     222          ASR.L       #4,             D3
0000115C                           223          
0000115C  60E2                     224          BRA         REVERSE_LOOP
0000115E                           225  
0000115E                           226  REVERSE_DONE:
0000115E  4E75                     227          RTS
00001160                           228          
00001160                           229          *   opcode detection
00001160                           230  *-----------------------------------------
00001160                           231  OPCODE_DETECT:
00001160                           232          *START WITH A LONG IN (A3)
00001160                           233          *MAKE COPY IN D7
00001160                           234          *MAKE COPY OF D7 (MOVE.W) IN D6 TO STORE FIRST WORD
00001160                           235          *SHIFT BY 16 RIGHT
00001160                           236          *MAKE COPY OF D7 (MOVE.W) IN D5 TO STORE SECOND WORD
00001160                           237          *FOR EACH WORD
00001160                           238              *SHIFT RIGHT 6 BITS (TO ISOLATE STATIC BITS)
00001160                           239              *IF D3 == $13A JSR DETECTED, PRINT JSR MSG, THEN RTS (PREPARE FOR ADDRESSING MODE)
00001160                           240          *RTS (OR GO TO HIGHER OPCODE DETECTER FOR MORE THAN JSR)
00001160                           241          *BEFORE RTS, CLEAR D7, D6, D5
00001160  2E1B                     242          MOVE.L      (A3)+,           D7
00001162  3C07                     243          MOVE.W      D7,             D6
00001164                           244          
00001164                           245          *move 16 to register instead
00001164  E08F                     246          LSR.L       #8,             D7
00001166  E08F                     247          LSR.L       #8,             D7
00001168                           248          
00001168  3A07                     249          MOVE.W      D7,             D5
0000116A                           250          
0000116A                           251          *first word (D6)
0000116A                           252          
0000116A  EC4E                     253          LSR.W       #6,              D6
0000116C  BC7C 013A                254          CMP.W       #$13A,          D6
00001170  6700 0014                255          BEQ         JSR_DETECTED
00001174                           256          
00001174                           257          *second word (D5)
00001174                           258         
00001174  EC4D                     259          LSR.W       #6,              D5
00001176  BA7C 013A                260          CMP.W       #$13A,          D5
0000117A  6700 000A                261          BEQ         JSR_DETECTED
0000117E                           262          
0000117E  4285                     263          CLR.L       D5
00001180  4286                     264          CLR.L       D6
00001182  4287                     265          CLR.L       D7
00001184                           266          
00001184  4E75                     267          RTS
00001186                           268          
00001186                           269  JSR_DETECTED:
00001186  43F9 0000129F            270          LEA         JSRMSG,         A1
0000118C  103C 000E                271          MOVE.B      #14,            D0
00001190  4E4F                     272          TRAP        #15
00001192                           273          
00001192  4285                     274          CLR.L       D5
00001194  4286                     275          CLR.L       D6
00001196  4287                     276          CLR.L       D7
00001198                           277          
00001198  4E75                     278          RTS
0000119A                           279          
0000119A                           280          
0000119A                           281  
0000119A                           282  DONE:
0000119A                           283  
0000119A  43F9 00001218            284          LEA         GOODBYE_MSG,    A1
000011A0  103C 000E                285          MOVE.B      #14,            D0
000011A4  4E4F                     286          TRAP        #15
000011A6  103C 0009                287          MOVE.B      #9,             D0
000011AA  4E4F                     288          TRAP        #15        
000011AC                           289          
000011AC                           290  
000011AC                           291      *SIMHALT             ; halt simulator
000011AC                           292  
000011AC                           293  * Put variables and constants here
000011AC                           294  
000011AC= 57 65 6C 63 6F 6D ...    295  INTRO_MSG:       DC.B       'Welcome to Team Cools Disassembler!',CR,LF,0
000011D2= 50 6C 65 61 73 65 ...    296  STARTING_MSG:    DC.B       'Please enter the Starting Address',CR,LF,0
000011F6= 50 6C 65 61 73 65 ...    297  ENDING_MSG:      DC.B       'Please enter the Ending Address',CR,LF,0
00001218= 44 6F 6E 65 20 52 ...    298  GOODBYE_MSG:     DC.B       'Done Reading data',CR,LF,0
0000122C                           299  * CR and LF for strings above because we want to go to next line after printing message
0000122C                           300  
0000122C                           301  STA_ADDR         DS.B        40
00001254                           302  END_ADDR         DS.B        40
0000127C                           303  
0000127C                           304  * no CR and LF for strings below because we want to print each number and letter
0000127C                           305  
0000127C= 20 20 00                 306  SPACE_MSG:       DC.B        '  ',0
0000127F                           307  
0000127F= 30 00                    308  ZERO_MSG:        DC.B        '0',0
00001281= 31 00                    309  ONE_MSG:         DC.B        '1',0
00001283= 32 00                    310  TWO_MSG:         DC.B        '2',0
00001285= 33 00                    311  THREE_MSG:       DC.B        '3',0
00001287= 34 00                    312  FOUR_MSG:        DC.B        '4',0
00001289= 35 00                    313  FIVE_MSG:        DC.B        '5',0
0000128B= 36 00                    314  SIX_MSG:         DC.B        '6',0
0000128D= 37 00                    315  SEVEN_MSG:       DC.B        '7',0
0000128F= 38 00                    316  EIGHT_MSG:       DC.B        '8',0
00001291= 39 00                    317  NINE_MSG:        DC.B        '9',0
00001293= 41 00                    318  A_MSG:           DC.B        'A',0
00001295= 42 00                    319  B_MSG:           DC.B        'B',0
00001297= 43 00                    320  C_MSG:           DC.B        'C',0
00001299= 44 00                    321  D_MSG:           DC.B        'D',0
0000129B= 45 00                    322  E_MSG:           DC.B        'E',0
0000129D= 46 00                    323  F_MSG:           DC.B        'F',0 
0000129F                           324  
0000129F                           325  * opcodes
0000129F= 4A 53 52 20 00           326  JSRMSG:             DC.B        'JSR ',0
000012A4                           327  
000012A4                           328  
000012A4                           329  *-----Carriage Return
000012A4  =0000000D                330  CR              EQU          $0D
000012A4                           331  *-----------Line Feed
000012A4  =0000000A                332  LF              EQU          $0A
000012A4                           333  
000012A4= 0D 0A 00                 334  NEW_LINE:       DC.B         '',CR,LF,0
000012A7                           335  
000012A7                           336      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ASCII_DONE          106E
A_MSG               1293
B_MSG               1295
CONVERT_TO_ASCII    1056
CR                  D
C_MSG               1297
DONE                119A
D_MSG               1299
EIGHT_MSG           128F
ENDING_MSG          11F6
END_ADDR            1254
E_MSG               129B
FIVE_MSG            1289
FOUR_MSG            1287
F_MSG               129D
GOODBYE_MSG         1218
INTRO_MSG           11AC
JSRMSG              129F
JSR_DETECTED        1186
LETTER_ASCII        1084
LF                  A
NEW_LINE            12A4
NINE_MSG            1291
NUMBER_ASCII        1070
ONE_MSG             1281
OPCODE_DETECT       1160
PRINT_DONE          112E
PRINT_LOOP          1102
PRINT_MEMORY_LOOP   1098
REVERSE_DONE        115E
REVERSE_LOOP        1140
REVERSE_START       1130
SEVEN_MSG           128D
SIX_MSG             128B
SPACE_MSG           127C
START               1000
STARTING_MSG        11D2
STA_ADDR            122C
THREE_MSG           1285
TWO_MSG             1283
ZERO_MSG            127F
