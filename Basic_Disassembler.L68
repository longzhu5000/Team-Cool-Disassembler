00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 7/22/2022 7:42:53 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :Basic Dissassembler
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  START:                  ; first instruction of program
00001000                             9  
00001000                            10  * Put program code here
00001000                            11  
00001000                            12  *------LEA = Load effective address
00001000                            13  *------Running Trap #15 while the number 14 is in D0 will print out whatever data is in the address stored in A1
00001000                            14  
00001000  43F9 0000116C             15          LEA         INTRO_MSG,      A1
00001006  103C 000E                 16          MOVE.B      #14,            D0    
0000100A  4E4F                      17          TRAP        #15
0000100C                            18          
0000100C  43F9 00001192             19          LEA         STARTING_MSG,   A1
00001012  103C 000E                 20          MOVE.B      #14,            D0   
00001016  4E4F                      21          TRAP        #15
00001018                            22          
00001018                            23  *----------------- 
00001018                            24  *       Running trap command 15 while the number 2 is in D0 
00001018                            25  *       Will ask the user to enter input
00001018                            26  *       after the user hits enter, the length of the input is stored in D1
00001018                            27  *       and the user data is stored in the space allocated by STA_ADDR repressented by ASSCI code
00001018                            28  *       IE 31 = 1, 32 = 2 etc etc
00001018                            29  *       If I store the number 1200, it will appear in memory as 31 32 30 30
00001018                            30  
00001018  43F9 000011EC             31          LEA         STA_ADDR,       A1
0000101E  103C 0002                 32          MOVE.B      #2,             D0
00001022  4E4F                      33          TRAP        #15
00001024                            34          
00001024  4EB9 00001056             35          JSR         CONVERT_TO_ASCII
0000102A                            36          
0000102A                            37          * A3 now has our Starting Address
0000102A  2647                      38          MOVEA.L     D7,             A3
0000102C                            39          
0000102C  4282                      40          CLR.L       D2
0000102E  4287                      41          CLR.L       D7
00001030                            42          
00001030  43F9 000011B6             43          LEA         ENDING_MSG,     A1
00001036  103C 000E                 44          MOVE.B      #14,            D0
0000103A  4E4F                      45          TRAP        #15
0000103C                            46          
0000103C  43F9 00001214             47          LEA         END_ADDR,       A1
00001042  103C 0002                 48          MOVE.B      #2,             D0
00001046  4E4F                      49          TRAP        #15
00001048                            50          
00001048  4EB9 00001056             51          JSR         CONVERT_TO_ASCII
0000104E                            52          * A4 now has our Ending Address
0000104E  2847                      53          MOVEA.L     D7,             A4
00001050                            54          
00001050                            55  
00001050  4EB9 00001098             56          JSR         PRINT_MEMORY_LOOP
00001056                            57          
00001056                            58          
00001056                            59          
00001056                            60          *BRA         DONE
00001056                            61          *   ASCII conversion
00001056                            62  *---------------------------------------        
00001056                            63  CONVERT_TO_ASCII:             
00001056  0C01 0000                 64          CMPI.B      #$0,            D1
0000105A  6700 0012                 65          BEQ         ASCII_DONE
0000105E  1419                      66          MOVE.B      (A1)+,          D2
00001060  103C 0039                 67          MOVE.B      #$39,           D0
00001064  B400                      68          CMP.B       D0,             D2
00001066  6F00 0008                 69          BLE         NUMBER_ASCII   
0000106A  6000 0018                 70          BRA         LETTER_ASCII  
0000106E                            71  
0000106E                            72  ASCII_DONE:
0000106E  4E75                      73          RTS
00001070                            74          
00001070                            75  NUMBER_ASCII:
00001070  5301                      76          SUBI.B      #$1,            D1
00001072  103C 0030                 77          MOVE.B      #$30,           D0
00001076  9400                      78          SUB.B       D0,             D2
00001078  DE02                      79          ADD.B       D2,             D7
0000107A  0C01 0000                 80          CMPI.B      #$0,            D1
0000107E  67EE                      81          BEQ         ASCII_DONE
00001080  E987                      82          ASL.L       #4,             D7
00001082  60D2                      83          BRA         CONVERT_TO_ASCII
00001084                            84  LETTER_ASCII:
00001084  5301                      85          SUBI.B      #$1,            D1
00001086  103C 0037                 86          MOVE.B      #$37,           D0
0000108A  9400                      87          SUB.B       D0,             D2
0000108C  DE02                      88          ADD.B       D2,             D7
0000108E  0C01 0000                 89          CMPI.B      #$0,            D1
00001092  67DA                      90          BEQ         ASCII_DONE
00001094  E987                      91          ASL.L       #4,             D7
00001096  60BE                      92          BRA         CONVERT_TO_ASCII
00001098                            93  *---------------------------------------        
00001098                            94          
00001098                            95          
00001098                            96          *   Printing data and addresses
00001098                            97  *---------------------------------------
00001098                            98  
00001098                            99  PRINT_MEMORY_LOOP:
00001098                           100          * add code here to compare current address with end address
00001098                           101          
00001098                           102          * if equal to, or further than ending address jump to DONE
00001098                           103          * SIMHALT
00001098  B9CB                     104          CMP.L       A3,             A4
0000109A  6700 00BE                105          BEQ         DONE
0000109E  6F00 00BA                106          BLE         DONE
000010A2                           107          
000010A2                           108          * We are goiong to keep track of the number of byts we have examined using D1
000010A2                           109          * Before printing the address we have to reverse the order
000010A2  4281                     110          CLR.L       D1
000010A4  4282                     111          CLR.L       D2
000010A6  123C 0008                112          MOVE.B      #$8,            D1
000010AA  260B                     113          MOVE.L      A3,             D3
000010AC  4EB9 0000112A            114          JSR         REVERSE_START
000010B2                           115          
000010B2  2607                     116          MOVE.L      D7,             D3
000010B4  4281                     117          CLR.L       D1
000010B6  4282                     118          CLR.L       D2
000010B8  123C 0008                119          MOVE.B      #$8,            D1
000010BC  4EB9 000010FC            120          JSR         PRINT_LOOP
000010C2                           121          
000010C2                           122          
000010C2                           123          * space between address and data
000010C2  43F9 0000123C            124          LEA         SPACE_MSG,      A1
000010C8  103C 000E                125          MOVE.B      #14,            D0    
000010CC  4E4F                     126          TRAP        #15
000010CE                           127          
000010CE  4281                     128          CLR.L       D1
000010D0  4282                     129          CLR.L       D2
000010D2  123C 0008                130          MOVE.B      #$8,            D1
000010D6  261B                     131          MOVE.L      (A3)+,          D3
000010D8  4EB9 0000112A            132          JSR         REVERSE_START
000010DE                           133          
000010DE  2607                     134          MOVE.L      D7,             D3
000010E0  4281                     135          CLR.L       D1
000010E2  4282                     136          CLR.L       D2
000010E4  123C 0008                137          MOVE.B      #$8,            D1
000010E8  4EB9 000010FC            138          JSR         PRINT_LOOP
000010EE                           139          
000010EE                           140          * new line
000010EE  43F9 0000125F            141          LEA         NEW_LINE,       A1
000010F4  103C 000E                142          MOVE.B      #14,            D0    
000010F8  4E4F                     143          TRAP        #15
000010FA                           144  *        SIMHALT
000010FA                           145  *        RTS
000010FA                           146          * branch to the start of this method
000010FA  609C                     147          BRA         PRINT_MEMORY_LOOP
000010FC                           148  
000010FC                           149  
000010FC                           150  PRINT_LOOP:
000010FC                           151  
000010FC                           152          
000010FC                           153          * When D1 == 0, we are done and exit this loop
000010FC  0C01 0000                154          CMPI.B      #$0,            D1
00001100  6700 0026                155          BEQ         PRINT_DONE
00001104  5301                     156          SUBI.B      #$1,            D1
00001106                           157          
00001106  1403                     158          MOVE.B      D3,             D2
00001108                           159          * Bit shifting to isolate the right most digit
00001108                           160          * 1234 5678 => 8000 0000 => 0000 0008
00001108  103C 001C                161          MOVE.B      #28,            D0    
0000110C  E1AA                     162          LSL.L       D0,             D2     
0000110E  E99A                     163          ROL.L       #4,             D2 
00001110                           164          
00001110                           165          * Bit shifting to prep the next digit
00001110                           166          * 1234 4567 => 0123 4567
00001110  E883                     167          ASR.L       #4, D3
00001112                           168          
00001112                           169          *Assuming D4 is empty
00001112                           170          
00001112  1802                     171          MOVE.B       D2,            D4
00001114  43F9 0000123F            172          LEA          ZERO_MSG,      A1
0000111A                           173          * load the address of Zero_msg
0000111A                           174          * because all of the msgs are stored next to each other in order
0000111A                           175          * we can simply take the value isolated from the number, multiply it by 2 (msg's take up 2 bytes)
0000111A                           176          * and then add it to the address starting at zero_msg
0000111A  C8FC 0002                177          MULU         #2,            D4
0000111E  D3C4                     178          ADDA.L       D4,            A1
00001120                           179          
00001120                           180          * trap command 14 reads whatever address is in A1, and then spits out the data to the console
00001120  103C 000E                181          MOVE.B       #14,           D0
00001124  4E4F                     182          TRAP         #15
00001126  60D4                     183          BRA          PRINT_LOOP
00001128                           184          
00001128                           185  PRINT_DONE:
00001128  4E75                     186          RTS
0000112A                           187          
0000112A                           188      *   Reversing the address
0000112A                           189  *---------------------------------------
0000112A                           190  
0000112A                           191  REVERSE_START:        
0000112A  4281                     192          CLR.L       D1
0000112C  4287                     193          CLR.L       D7
0000112E  123C 0008                194          MOVE.B      #8,             D1
00001132  4EB9 0000113A            195          JSR         REVERSE_LOOP
00001138  4E75                     196          RTS
0000113A                           197          
0000113A                           198  REVERSE_LOOP:
0000113A                           199  
0000113A                           200          
0000113A  0C01 0000                201          CMPI.B      #$0,            D1
0000113E  6700 0018                202          BEQ         REVERSE_DONE
00001142  5301                     203          SUBI.B      #$1,            D1
00001144  E987                     204          ASL.L       #4,             D7
00001146                           205          
00001146  4285                     206          CLR.L       D5
00001148                           207          
00001148  1A03                     208          MOVE.B      D3,             D5
0000114A                           209          
0000114A  103C 001C                210          MOVE.B      #28,            D0    
0000114E  E1AD                     211          LSL.L       D0,             D5     
00001150  E99D                     212          ROL.L       #4,             D5
00001152                           213          
00001152  DE05                     214          ADD.B       D5,             D7
00001154                           215          
00001154                           216          
00001154  E883                     217          ASR.L       #4,             D3
00001156                           218          
00001156  60E2                     219          BRA         REVERSE_LOOP
00001158                           220  
00001158                           221  REVERSE_DONE:
00001158  4E75                     222          RTS
0000115A                           223  DONE:
0000115A                           224  
0000115A  43F9 000011D8            225          LEA         GOODBYE_MSG,    A1
00001160  103C 000E                226          MOVE.B      #14,            D0
00001164  4E4F                     227          TRAP        #15
00001166  103C 0009                228          MOVE.B      #9,             D0
0000116A  4E4F                     229          TRAP        #15        
0000116C                           230          
0000116C                           231  
0000116C                           232      *SIMHALT             ; halt simulator
0000116C                           233  
0000116C                           234  * Put variables and constants here
0000116C                           235  
0000116C= 57 65 6C 63 6F 6D ...    236  INTRO_MSG:       DC.B       'Welcome to Team Cools Disassembler!',CR,LF,0
00001192= 50 6C 65 61 73 65 ...    237  STARTING_MSG:    DC.B       'Please enter the Starting Address',CR,LF,0
000011B6= 50 6C 65 61 73 65 ...    238  ENDING_MSG:      DC.B       'Please enter the Ending Address',CR,LF,0
000011D8= 44 6F 6E 65 20 52 ...    239  GOODBYE_MSG:     DC.B       'Done Reading data',CR,LF,0
000011EC                           240  * CR and LF for strings above because we want to go to next line after printing message
000011EC                           241  
000011EC                           242  STA_ADDR         DS.B        40
00001214                           243  END_ADDR         DS.B        40
0000123C                           244  
0000123C                           245  * no CR and LF for strings below because we want to print each number and letter
0000123C                           246  
0000123C= 20 20 00                 247  SPACE_MSG:       DC.B        '  ',0
0000123F                           248  
0000123F= 30 00                    249  ZERO_MSG:        DC.B        '0',0
00001241= 31 00                    250  ONE_MSG:         DC.B        '1',0
00001243= 32 00                    251  TWO_MSG:         DC.B        '2',0
00001245= 33 00                    252  THREE_MSG:       DC.B        '3',0
00001247= 34 00                    253  FOUR_MSG:        DC.B        '4',0
00001249= 35 00                    254  FIVE_MSG:        DC.B        '5',0
0000124B= 36 00                    255  SIX_MSG:         DC.B        '6',0
0000124D= 37 00                    256  SEVEN_MSG:       DC.B        '7',0
0000124F= 38 00                    257  EIGHT_MSG:       DC.B        '8',0
00001251= 39 00                    258  NINE_MSG:        DC.B        '9',0
00001253= 41 00                    259  A_MSG:           DC.B        'A',0
00001255= 42 00                    260  B_MSG:           DC.B        'B',0
00001257= 43 00                    261  C_MSG:           DC.B        'C',0
00001259= 44 00                    262  D_MSG:           DC.B        'D',0
0000125B= 45 00                    263  E_MSG:           DC.B        'E',0
0000125D= 46 00                    264  F_MSG:           DC.B        'F',0 
0000125F                           265  
0000125F                           266  
0000125F                           267  *-----Carriage Return
0000125F  =0000000D                268  CR              EQU          $0D
0000125F                           269  *-----------Line Feed
0000125F  =0000000A                270  LF              EQU          $0A
0000125F                           271  
0000125F= 0D 0A 00                 272  NEW_LINE:       DC.B         '',CR,LF,0
00001262                           273  
00001262                           274      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ASCII_DONE          106E
A_MSG               1253
B_MSG               1255
CONVERT_TO_ASCII    1056
CR                  D
C_MSG               1257
DONE                115A
D_MSG               1259
EIGHT_MSG           124F
ENDING_MSG          11B6
END_ADDR            1214
E_MSG               125B
FIVE_MSG            1249
FOUR_MSG            1247
F_MSG               125D
GOODBYE_MSG         11D8
INTRO_MSG           116C
LETTER_ASCII        1084
LF                  A
NEW_LINE            125F
NINE_MSG            1251
NUMBER_ASCII        1070
ONE_MSG             1241
PRINT_DONE          1128
PRINT_LOOP          10FC
PRINT_MEMORY_LOOP   1098
REVERSE_DONE        1158
REVERSE_LOOP        113A
REVERSE_START       112A
SEVEN_MSG           124D
SIX_MSG             124B
SPACE_MSG           123C
START               1000
STARTING_MSG        1192
STA_ADDR            11EC
THREE_MSG           1245
TWO_MSG             1243
ZERO_MSG            123F
