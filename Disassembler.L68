00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 8/4/2022 11:29:43 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :Disassembler
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  START:                  ; first instruction of program
00001000                             9  
00001000                            10  * Put program code here
00001000                            11  
00001000                            12  *------LEA = Load effective address
00001000                            13  *------Running Trap #15 while the number 14 is in D0 will print out whatever data is in the address stored in A1
00001000                            14  
00001000  43F9 00001800             15          LEA         INTRO_MSG,      A1
00001006  103C 000E                 16          MOVE.B      #14,            D0    
0000100A  4E4F                      17          TRAP        #15
0000100C                            18          
0000100C  43F9 00001826             19          LEA         STARTING_MSG,   A1
00001012  103C 000E                 20          MOVE.B      #14,            D0   
00001016  4E4F                      21          TRAP        #15
00001018                            22          
00001018                            23  *----------------- 
00001018                            24  *       Running trap command 15 while the number 2 is in D0 
00001018                            25  *       Will ask the user to enter input
00001018                            26  *       after the user hits enter, the length of the input is stored in D1
00001018                            27  *       and the user data is stored in the space allocated by STA_ADDR repressented by ASSCI code
00001018                            28  *       IE 31 = 1, 32 = 2 etc etc
00001018                            29  *       If I store the number 1200, it will appear in memory as 31 32 30 30
00001018                            30  
00001018  43F9 00001880             31          LEA         STA_ADDR,       A1
0000101E  103C 0002                 32          MOVE.B      #2,             D0
00001022  4E4F                      33          TRAP        #15
00001024                            34          
00001024  4EB9 00001056             35          JSR         CONVERT_TO_ASCII
0000102A                            36          
0000102A                            37          * A3 now has our Starting Address
0000102A  2647                      38          MOVEA.L     D7,             A3
0000102C                            39          
0000102C  4282                      40          CLR.L       D2
0000102E  4287                      41          CLR.L       D7
00001030                            42          
00001030  43F9 0000184A             43          LEA         ENDING_MSG,     A1
00001036  103C 000E                 44          MOVE.B      #14,            D0
0000103A  4E4F                      45          TRAP        #15
0000103C                            46          
0000103C  43F9 000018A8             47          LEA         END_ADDR,       A1
00001042  103C 0002                 48          MOVE.B      #2,             D0
00001046  4E4F                      49          TRAP        #15
00001048                            50          
00001048  4EB9 00001056             51          JSR         CONVERT_TO_ASCII
0000104E                            52          * A4 now has our Ending Address
0000104E  2847                      53          MOVEA.L     D7,             A4
00001050                            54          
00001050                            55  
00001050  4EB9 00001098             56          JSR         PRINT_MEMORY_LOOP
00001056                            57          
00001056                            58          
00001056                            59          
00001056                            60          *BRA         DONE
00001056                            61          *   ASCII conversion
00001056                            62  *---------------------------------------        
00001056                            63  CONVERT_TO_ASCII:             
00001056  0C01 0000                 64          CMPI.B      #$0,            D1
0000105A  6700 0012                 65          BEQ         ASCII_DONE
0000105E  1419                      66          MOVE.B      (A1)+,          D2
00001060  103C 0039                 67          MOVE.B      #$39,           D0
00001064  B400                      68          CMP.B       D0,             D2
00001066  6F00 0008                 69          BLE         NUMBER_ASCII   
0000106A  6000 0018                 70          BRA         LETTER_ASCII  
0000106E                            71  
0000106E                            72  ASCII_DONE:
0000106E  4E75                      73          RTS
00001070                            74          
00001070                            75  NUMBER_ASCII:
00001070  5301                      76          SUBI.B      #$1,            D1
00001072  103C 0030                 77          MOVE.B      #$30,           D0
00001076  9400                      78          SUB.B       D0,             D2
00001078  DE02                      79          ADD.B       D2,             D7
0000107A  0C01 0000                 80          CMPI.B      #$0,            D1
0000107E  67EE                      81          BEQ         ASCII_DONE
00001080  E987                      82          ASL.L       #4,             D7
00001082  60D2                      83          BRA         CONVERT_TO_ASCII
00001084                            84  LETTER_ASCII:
00001084  5301                      85          SUBI.B      #$1,            D1
00001086  103C 0037                 86          MOVE.B      #$37,           D0
0000108A  9400                      87          SUB.B       D0,             D2
0000108C  DE02                      88          ADD.B       D2,             D7
0000108E  0C01 0000                 89          CMPI.B      #$0,            D1
00001092  67DA                      90          BEQ         ASCII_DONE
00001094  E987                      91          ASL.L       #4,             D7
00001096  60BE                      92          BRA         CONVERT_TO_ASCII
00001098                            93  *---------------------------------------        
00001098                            94          
00001098                            95          
00001098                            96          *   Printing data and addresses
00001098                            97  *---------------------------------------
00001098                            98  
00001098                            99  PRINT_MEMORY_LOOP:
00001098                           100          * add code here to compare current address with end address
00001098                           101          
00001098                           102          * if equal to, or further than ending address jump to DONE
00001098                           103          * SIMHALT
00001098  B9CB                     104          CMP.L       A3,             A4
0000109A  6700 00BC                105          BEQ         DONE
0000109E  6F00 00B8                106          BLE         DONE
000010A2                           107          
000010A2                           108          * We are goiong to keep track of the number of byts we have examined using D1
000010A2                           109          * Before printing the address we have to reverse the order
000010A2  4281                     110          CLR.L       D1
000010A4  4282                     111          CLR.L       D2
000010A6  123C 0008                112          MOVE.B      #$8,            D1
000010AA  260B                     113          MOVE.L      A3,             D3
000010AC  4EB9 00001128            114          JSR         REVERSE_START
000010B2                           115          
000010B2  2607                     116          MOVE.L      D7,             D3
000010B4  4281                     117          CLR.L       D1
000010B6  4282                     118          CLR.L       D2
000010B8  123C 0008                119          MOVE.B      #$8,            D1
000010BC  4EB9 000010F8            120          JSR         PRINT_LOOP
000010C2                           121          
000010C2                           122          
000010C2                           123          * space between address and data
000010C2  43F9 000018D0            124          LEA         SPACE_MSG,      A1
000010C8  103C 000E                125          MOVE.B      #14,            D0    
000010CC  4E4F                     126          TRAP        #15
000010CE                           127          
000010CE  4281                     128          CLR.L       D1
000010D0  4282                     129          CLR.L       D2
000010D2  123C 0008                130          MOVE.B      #$8,            D1
000010D6  361B                     131          MOVE.W      (A3)+,          D3
000010D8                           132          *JSR         REVERSE_START
000010D8                           133          
000010D8                           134          *MOVE.L      D7,             D3
000010D8  4281                     135          CLR.L       D1
000010DA  4282                     136          CLR.L       D2
000010DC                           137          *MOVE.B      #$8,            D1
000010DC                           138          *JSR         PRINT_LOOP
000010DC                           139          
000010DC                           140          * Jump to Function in another file
000010DC  4EB9 0000116A            141          JSR         CHECK_OPCODES
000010E2                           142          
000010E2                           143          
000010E2  4281                     144          CLR.L       D1
000010E4  4282                     145          CLR.L       D2
000010E6  4283                     146          CLR.L       D3
000010E8  4284                     147          CLR.L       D4
000010EA                           148          * new line
000010EA  43F9 000018F3            149          LEA         NEW_LINE,       A1
000010F0  103C 000E                150          MOVE.B      #14,            D0    
000010F4  4E4F                     151          TRAP        #15
000010F6                           152  
000010F6                           153          * branch to the start of this method
000010F6  60A0                     154          BRA         PRINT_MEMORY_LOOP
000010F8                           155  
000010F8                           156  
000010F8                           157  PRINT_LOOP:
000010F8                           158  
000010F8                           159          
000010F8                           160          * When D1 == 0, we are done and exit this loop
000010F8  0C01 0000                161          CMPI.B      #$0,            D1
000010FC  6700 0028                162          BEQ         PRINT_DONE
00001100  5301                     163          SUBI.B      #$1,            D1
00001102                           164          
00001102  1403                     165          MOVE.B      D3,             D2
00001104                           166          * Bit shifting to isolate the right most digit
00001104                           167          * 1234 5678 => 8000 0000 => 0000 0008
00001104  103C 001C                168          MOVE.B      #28,            D0    
00001108  E1AA                     169          LSL.L       D0,             D2     
0000110A  E99A                     170          ROL.L       #4,             D2 
0000110C                           171          
0000110C                           172          * Bit shifting to prep the next digit
0000110C                           173          * 1234 4567 => 0123 4567
0000110C  E883                     174          ASR.L       #4, D3
0000110E                           175          
0000110E                           176          *Assuming D4 is empty
0000110E                           177          
0000110E  1802                     178          MOVE.B       D2,            D4
00001110  43F9 000018D3            179          LEA          ZERO_MSG,      A1
00001116                           180          * load the address of Zero_msg
00001116                           181          * because all of the msgs are stored next to each other in order
00001116                           182          * we can simply take the value isolated from the number, multiply it by 2 (msg's take up 2 bytes)
00001116                           183          * and then add it to the address starting at zero_msg
00001116  C8FC 0002                184          MULU         #2,            D4
0000111A  D3C4                     185          ADDA.L       D4,            A1
0000111C                           186          
0000111C                           187          * trap command 14 reads whatever address is in A1, and then spits out the data to the console
0000111C  103C 000E                188          MOVE.B       #14,           D0
00001120  4E4F                     189          TRAP         #15
00001122  60D4                     190          BRA          PRINT_LOOP
00001124  4644                     191          NOT          D4
00001126                           192          
00001126                           193  PRINT_DONE:
00001126  4E75                     194          RTS
00001128                           195          
00001128                           196      *   Reversing the address
00001128                           197  *---------------------------------------
00001128                           198  
00001128                           199  REVERSE_START:        
00001128  4281                     200          CLR.L       D1
0000112A  4287                     201          CLR.L       D7
0000112C  123C 0008                202          MOVE.B      #8,             D1
00001130  4EB9 00001138            203          JSR         REVERSE_LOOP
00001136  4E75                     204          RTS
00001138                           205          
00001138                           206  REVERSE_LOOP:
00001138                           207  
00001138                           208          
00001138  0C01 0000                209          CMPI.B      #$0,            D1
0000113C  6700 0018                210          BEQ         REVERSE_DONE
00001140  5301                     211          SUBI.B      #$1,            D1
00001142  E987                     212          ASL.L       #4,             D7
00001144                           213          
00001144  4285                     214          CLR.L       D5
00001146                           215          
00001146  1A03                     216          MOVE.B      D3,             D5
00001148                           217          
00001148  103C 001C                218          MOVE.B      #28,            D0    
0000114C  E1AD                     219          LSL.L       D0,             D5     
0000114E  E99D                     220          ROL.L       #4,             D5
00001150                           221          
00001150  DE05                     222          ADD.B       D5,             D7
00001152                           223          
00001152                           224          
00001152  E883                     225          ASR.L       #4,             D3
00001154                           226          
00001154  60E2                     227          BRA         REVERSE_LOOP
00001156                           228  
00001156                           229  REVERSE_DONE:
00001156  4E75                     230          RTS
00001158                           231  DONE:
00001158                           232  
00001158  43F9 0000186C            233          LEA         GOODBYE_MSG,    A1
0000115E  103C 000E                234          MOVE.B      #14,            D0
00001162  4E4F                     235          TRAP        #15
00001164  103C 0009                236          MOVE.B      #9,             D0
00001168  4E4F                     237          TRAP        #15        
0000116A                           238          
0000116A                           239  
0000116A                           240      *SIMHALT             ; halt simulator
0000116A                           241  
0000116A                           242      INCLUDE         'Disassembler_OPCodes.x68'
0000116A                           243  
0000116A                           244  
0000116A                           245  
0000116A                           246  CHECK_OPCODES:
0000116A  4286                     247          CLR.L   D6
0000116C                           248  
0000116C  4EB9 0000120C            249          JSR     ISOLATE_16
00001172  BC3C 0001                250          CMP.B   #$1,    D6
00001176  6700 0058                251          BEQ     RETURN
0000117A                           252          
0000117A  4EB9 0000121E            253          JSR     ISOLATE_15_6
00001180  BC3C 0001                254          CMP.B   #$1,    D6
00001184  6700 004A                255          BEQ     RETURN
00001188                           256  
00001188  4EB9 00001230            257          JSR     ISOLATE_15_8
0000118E  BC3C 0001                258          CMP.B   #$1,    D6
00001192  6700 003C                259          BEQ     RETURN
00001196                           260          
00001196  4EB9 0000124A            261          JSR     ISOLATE_15_11
0000119C  BC3C 0001                262          CMP.B   #$1,    D6
000011A0  6700 002E                263          BEQ     RETURN
000011A4                           264          
000011A4  4EB9 000011D2            265          JSR     ISOLATE_15_12
000011AA  BC3C 0001                266          CMP.B   #$1,    D6
000011AE  6700 0020                267          BEQ     RETURN
000011B2                           268          
000011B2  4EB9 0000126E            269          JSR     ISOLATE_8_6
000011B8  BC3C 0001                270          CMP.B   #$1,    D6        
000011BC  6700 0012                271          BEQ     RETURN
000011C0                           272          
000011C0  4EB9 0000125C            273          JSR     ISOLATE_15_14    
000011C6  BC3C 0001                274          CMP.B   #$1,    D6
000011CA  6700 0004                275          BEQ     RETURN
000011CE                           276          
000011CE                           277  
000011CE  4E75                     278          RTS
000011D0                           279  RETURN:
000011D0  4E75                     280          RTS
000011D2                           281  
000011D2                           282  ISOLATE_15_12:
000011D2  3803                     283          MOVE.W      D3,     D4
000011D4  343C 000C                284          MOVE.W      #12,     D2
000011D8  E46C                     285          LSR.W       D2,     D4
000011DA                           286          
000011DA  B83C 000D                287          CMP.B       #$D,   D4
000011DE  6700 011A                288          BEQ         OP_CODE_ADD
000011E2                           289         ;CMP.W       #$D,   D4
000011E2                           290         ;BEQ         OP_CODE_ADDA
000011E2  B83C 0005                291          CMP.B       #$5,   D4
000011E6  6700 0136                292          BEQ         OP_CODE_ADDQ
000011EA  B83C 0009                293          CMP.B       #$9,   D4
000011EE  6700 0140                294          BEQ         OP_CODE_SUB
000011F2                           295          
000011F2  B83C 0007                296          CMP.B       #$7,    D4
000011F6  6700 016E                297          BEQ         OP_CODE_MOVEQ
000011FA  B83C 0008                298          CMP.B       #$8,    D4
000011FE  6700 0244                299          BEQ         OP_CODE_OR      *may get confused with DIVU + any other opcodes that start with 1000 (ones that we are not required to cover)
00001202  B83C 000C                300          CMP.B       #$C,    D4
00001206  6700 01B8                301          BEQ         OP_CODE_AND
0000120A                           302  
0000120A  4E75                     303          RTS
0000120C                           304          
0000120C                           305  ISOLATE_16:
0000120C                           306  
0000120C  B67C 4E71                307          CMP.W       #$4E71, D3
00001210  6700 0142                308          BEQ         OP_CODE_NOP
00001214  B67C 4E75                309          CMP.W       #$4E75, D3
00001218  6700 0128                310          BEQ         OP_CODE_RTS
0000121C                           311  
0000121C  4E75                     312          RTS
0000121E                           313  
0000121E                           314  ISOLATE_15_6:
0000121E                           315          
0000121E  3803                     316          MOVE.W      D3,     D4
00001220  343C 0006                317          MOVE.W      #6,     D2
00001224  E46C                     318          LSR.W       D2,     D4
00001226                           319          
00001226  B87C 013A                320          CMP.W       #$13A,  D4
0000122A  6700 029C                321          BEQ         OP_CODE_JSR
0000122E                           322          
0000122E  4E75                     323          RTS
00001230                           324  
00001230                           325  ISOLATE_15_8:
00001230  3803                     326          MOVE.W      D3,     D4
00001232  343C 0008                327          MOVE.W      #8,     D2
00001236  E46C                     328          LSR.W       D2,     D4
00001238                           329          
00001238  B83C 0046                330          CMP.B       #$46,   D4
0000123C  6700 0050                331          BEQ         OP_CODE_NOT
00001240  B83C 0060                332          CMP.B       #$60,   D4
00001244  6700 005A                333          BEQ         OP_CODE_BRA
00001248                           334  
00001248  4E75                     335          RTS
0000124A                           336          
0000124A                           337  ISOLATE_15_11:
0000124A  3803                     338          MOVE.W      D3,     D4
0000124C  343C 000B                339          MOVE.W      #11,    D2
00001250  E46C                     340          LSR.W       D2,     D4
00001252                           341          
00001252  B83C 0009                342          CMP.B       #$9,    D4
00001256  6700 0090                343          BEQ         OP_CODE_MOVEM
0000125A                           344          
0000125A  4E75                     345          RTS
0000125C                           346          
0000125C                           347  ISOLATE_15_14:
0000125C  3803                     348          MOVE.W      D3,     D4
0000125E  343C 000E                349          MOVE.W      #14,    D2
00001262  E46C                     350          LSR.W       D2,     D4
00001264                           351          
00001264  B83C 0000                352          CMP.B       #$0,    D4
00001268  6700 005A                353          BEQ         OP_CODE_MOVE
0000126C                           354          
0000126C  4E75                     355          RTS
0000126E                           356          
0000126E                           357  ISOLATE_8_6:
0000126E  3803                     358          MOVE.W      D3,     D4
00001270  343C 0007                359          MOVE.W      #7,     D2
00001274  E56C                     360          LSL.W       D2,     D4
00001276  343C 000D                361          MOVE.W      #13,    D2
0000127A  E46C                     362          LSR.W       D2,     D4
0000127C                           363          
0000127C  B83C 0001                364          CMP.B       #$1,    D4
00001280  6700 0054                365          BEQ         OP_CODE_MOVEA
00001284  B83C 0007                366          CMP.B       #$7,    D4
00001288  6700 0028                367          BEQ         OP_CODE_LEA
0000128C                           368  
0000128C  4E75                     369          RTS
0000128E                           370  
0000128E                           371  
0000128E                           372  
0000128E                           373  OP_CODE_NOT:
0000128E  43F9 000014EC            374          LEA         NOT_MSG, A1
00001294  103C 000E                375          MOVE.B      #14, D0
00001298  4E4F                     376          TRAP        #15
0000129A                           377          
0000129A  1C3C 0001                378          MOVE.B      #1,      D6
0000129E                           379          
0000129E  4E75                     380          RTS 
000012A0                           381  OP_CODE_BRA:
000012A0  43F9 000014F0            382          LEA         BRA_MSG, A1
000012A6  103C 000E                383          MOVE.B      #14, D0
000012AA  4E4F                     384          TRAP        #15
000012AC                           385          
000012AC  1C3C 0001                386          MOVE.B      #1,      D6
000012B0                           387          *MOVE.W      (A3)+,   D7
000012B0                           388          
000012B0  4E75                     389          RTS
000012B2                           390          
000012B2                           391  OP_CODE_LEA:
000012B2  43F9 00001505            392          LEA         LEA_MSG, A1
000012B8  103C 000E                393          MOVE.B      #14, D0
000012BC  4E4F                     394          TRAP        #15
000012BE                           395  
000012BE  1C3C 0001                396          MOVE.B      #1,      D6
000012C2                           397  
000012C2  4E75                     398          RTS        
000012C4                           399  OP_CODE_MOVE:
000012C4                           400  
000012C4  43F9 000014F4            401          LEA         MOVE_MSG, A1
000012CA  103C 000E                402          MOVE.B      #14, D0
000012CE  4E4F                     403          TRAP        #15
000012D0                           404  
000012D0  1C3C 0001                405          MOVE.B      #1,      D6
000012D4                           406  
000012D4  4E75                     407          RTS
000012D6                           408          
000012D6                           409  OP_CODE_MOVEA:
000012D6  43F9 000014FF            410          LEA         MOVEA_MSG, A1
000012DC  103C 000E                411          MOVE.B      #14, D0
000012E0  4E4F                     412          TRAP        #15
000012E2                           413  
000012E2  1C3C 0001                414          MOVE.B      #1,      D6
000012E6                           415  
000012E6  4E75                     416          RTS
000012E8                           417  
000012E8                           418  OP_CODE_MOVEM:
000012E8  43F9 000014F9            419          LEA         MOVEM_MSG, A1
000012EE  103C 000E                420          MOVE.B      #14, D0
000012F2  4E4F                     421          TRAP        #15
000012F4                           422  
000012F4  1C3C 0001                423          MOVE.B      #1,      D6
000012F8                           424  
000012F8  4E75                     425          RTS
000012FA                           426  OP_CODE_ADD:
000012FA  43F9 00001509            427          LEA         ADD_MSG, A1
00001300  103C 000E                428          MOVE.B      #14, D0
00001304  4E4F                     429          TRAP        #15
00001306                           430          
00001306  1C3C 0001                431          MOVE.B      #1,      D6
0000130A                           432          
0000130A  4E75                     433          RTS
0000130C                           434          
0000130C                           435  OP_CODE_ADDA:
0000130C  43F9 0000150D            436          LEA         ADDA_MSG, A1
00001312  103C 000E                437          MOVE.B      #14, D0
00001316  4E4F                     438          TRAP        #15
00001318                           439          
00001318  1C3C 0001                440          MOVE.B      #1,      D6
0000131C                           441          
0000131C  4E75                     442          RTS
0000131E                           443          
0000131E                           444  OP_CODE_ADDQ:
0000131E  43F9 00001512            445          LEA         ADDQ_MSG, A1
00001324  103C 000E                446          MOVE.B      #14, D0
00001328  4E4F                     447          TRAP        #15
0000132A                           448          
0000132A  1C3C 0001                449          MOVE.B      #1,      D6
0000132E                           450          
0000132E  4E75                     451          RTS
00001330                           452  
00001330                           453  OP_CODE_SUB:
00001330  43F9 00001517            454          LEA         SUB_MSG, A1
00001336  103C 000E                455          MOVE.B      #14, D0
0000133A  4E4F                     456          TRAP        #15
0000133C                           457          
0000133C  1C3C 0001                458          MOVE.B      #1,      D6
00001340                           459          
00001340  4E75                     460          RTS
00001342                           461          
00001342                           462  OP_CODE_RTS:
00001342  43F9 0000151B            463          LEA         RTS_MSG, A1
00001348  103C 000E                464          MOVE.B      #14, D0
0000134C  4E4F                     465          TRAP        #15
0000134E                           466          
0000134E  1C3C 0001                467          MOVE.B      #1,      D6
00001352                           468          
00001352  4E75                     469          RTS
00001354                           470          
00001354                           471  OP_CODE_NOP:
00001354  43F9 0000151F            472          LEA         NOP_MSG, A1
0000135A  103C 000E                473          MOVE.B      #14, D0
0000135E  4E4F                     474          TRAP        #15
00001360                           475          
00001360  1C3C 0001                476          MOVE.B      #1,      D6
00001364                           477          
00001364  4E75                     478          RTS
00001366                           479          
00001366                           480  OP_CODE_MOVEQ:
00001366                           481          *NOTE MOVEQ has static bit at index 8
00001366  43F9 00001523            482          LEA         MOVEQ_MSG, A1
0000136C  103C 000E                483          MOVE.B      #14, D0
00001370  4E4F                     484          TRAP        #15
00001372                           485          
00001372  43F9 00001534            486          LEA         WHITESPACE, A1
00001378  103C 000E                487          MOVE.B      #14, D0
0000137C  4E4F                     488          TRAP        #15
0000137E                           489          
0000137E  43F9 0000153D            490          LEA         IMM_DATA, A1
00001384  103C 000E                491          MOVE.B      #14, D0
00001388  4E4F                     492          TRAP        #15
0000138A                           493  
0000138A  43F9 0000153F            494          LEA         HEX, A1
00001390  103C 000E                495          MOVE.B      #14, D0
00001394  4E4F                     496          TRAP        #15
00001396                           497         
00001396  4EB9 00001770            498          JSR         DATA_7_0
0000139C                           499          
0000139C  43F9 00001536            500          LEA         WHITESPACE_COM, A1
000013A2  103C 000E                501          MOVE.B      #14, D0
000013A6  4E4F                     502          TRAP        #15
000013A8                           503          
000013A8  43F9 00001539            504          LEA         DATA_REG, A1
000013AE  103C 000E                505          MOVE.B      #14, D0
000013B2  4E4F                     506          TRAP        #15
000013B4                           507          
000013B4  4EB9 00001552            508          JSR         REGISTER_11_9
000013BA                           509          
000013BA  1C3C 0001                510          MOVE.B      #1,      D6
000013BE                           511          
000013BE  4E75                     512          RTS
000013C0                           513          
000013C0                           514  OP_CODE_AND:
000013C0  43F9 00001529            515          LEA         AND_MSG, A1
000013C6  103C 000E                516          MOVE.B      #14, D0
000013CA  4E4F                     517          TRAP        #15
000013CC                           518          
000013CC                           519          *check opmode
000013CC                           520          *if starts with 1 do Dn ^ <ea> -> <ea>
000013CC                           521          *OPMODE_8_6 will appent size next to opcode
000013CC  4EB9 0000156A            522          JSR         OPMODE_8_6
000013D2  E35C                     523          ROL.W       #1, D4
000013D4  6500 0038                524          BCS         OP_CODE_AND2
000013D8                           525          *else...
000013D8                           526          
000013D8  43F9 00001534            527          LEA         WHITESPACE, A1
000013DE  103C 000E                528          MOVE.B      #14, D0
000013E2  4E4F                     529          TRAP        #15
000013E4                           530          
000013E4                           531          *check ea and print
000013E4  4EB9 000015D4            532          JSR         EFFECTIVEADD_5_0
000013EA                           533          
000013EA  43F9 00001536            534          LEA         WHITESPACE_COM, A1
000013F0  103C 000E                535          MOVE.B      #14, D0
000013F4  4E4F                     536          TRAP        #15
000013F6                           537          
000013F6                           538          *print out data reg
000013F6                           539          
000013F6  43F9 00001539            540          LEA         DATA_REG, A1
000013FC  103C 000E                541          MOVE.B      #14, D0
00001400  4E4F                     542          TRAP        #15
00001402                           543          
00001402  4EB9 00001552            544          JSR         REGISTER_11_9
00001408                           545          
00001408                           546          
00001408  1C3C 0001                547          MOVE.B      #1,      D6
0000140C                           548          
0000140C  4E75                     549          RTS
0000140E                           550          
0000140E                           551  OP_CODE_AND2:
0000140E  43F9 00001534            552          LEA         WHITESPACE, A1
00001414  103C 000E                553          MOVE.B      #14, D0
00001418  4E4F                     554          TRAP        #15
0000141A                           555          
0000141A  43F9 00001539            556          LEA         DATA_REG, A1
00001420  103C 000E                557          MOVE.B      #14, D0
00001424  4E4F                     558          TRAP        #15
00001426                           559          
00001426  4EB9 00001552            560          JSR         REGISTER_11_9
0000142C                           561          
0000142C  43F9 00001536            562          LEA         WHITESPACE_COM, A1
00001432  103C 000E                563          MOVE.B      #14, D0
00001436  4E4F                     564          TRAP        #15
00001438                           565          
00001438  4EB9 000015D4            566          JSR         EFFECTIVEADD_5_0
0000143E                           567          
0000143E  1C3C 0001                568          MOVE.B      #1,      D6
00001442                           569          
00001442  4E75                     570          RTS
00001444                           571          
00001444                           572  OP_CODE_OR:
00001444  43F9 0000152D            573          LEA         OR_MSG, A1
0000144A  103C 000E                574          MOVE.B      #14, D0
0000144E  4E4F                     575          TRAP        #15
00001450                           576          
00001450  4EB9 0000156A            577          JSR         OPMODE_8_6
00001456  E35C                     578          ROL.W       #1, D4
00001458  6500 0038                579          BCS         OP_CODE_OR2
0000145C                           580          
0000145C  43F9 00001534            581          LEA         WHITESPACE, A1
00001462  103C 000E                582          MOVE.B      #14, D0
00001466  4E4F                     583          TRAP        #15
00001468                           584          
00001468  4EB9 000015D4            585          JSR         EFFECTIVEADD_5_0
0000146E                           586          
0000146E  43F9 00001536            587          LEA         WHITESPACE_COM, A1
00001474  103C 000E                588          MOVE.B      #14, D0
00001478  4E4F                     589          TRAP        #15
0000147A                           590          
0000147A  43F9 00001539            591          LEA         DATA_REG, A1
00001480  103C 000E                592          MOVE.B      #14, D0
00001484  4E4F                     593          TRAP        #15
00001486                           594          
00001486  4EB9 00001552            595          JSR         REGISTER_11_9
0000148C                           596              
0000148C  1C3C 0001                597          MOVE.B      #1,      D6
00001490                           598          
00001490  4E75                     599          RTS
00001492                           600          
00001492                           601  OP_CODE_OR2:
00001492  43F9 00001534            602          LEA         WHITESPACE, A1
00001498  103C 000E                603          MOVE.B      #14, D0
0000149C  4E4F                     604          TRAP        #15
0000149E                           605          
0000149E  43F9 00001539            606          LEA         DATA_REG, A1
000014A4  103C 000E                607          MOVE.B      #14, D0
000014A8  4E4F                     608          TRAP        #15
000014AA                           609          
000014AA  4EB9 00001552            610          JSR         REGISTER_11_9
000014B0                           611          
000014B0  43F9 00001536            612          LEA         WHITESPACE_COM, A1
000014B6  103C 000E                613          MOVE.B      #14, D0
000014BA  4E4F                     614          TRAP        #15
000014BC                           615          
000014BC  4EB9 000015D4            616          JSR         EFFECTIVEADD_5_0
000014C2                           617          
000014C2  1C3C 0001                618          MOVE.B      #1,      D6
000014C6                           619          
000014C6  4E75                     620          RTS
000014C8                           621          
000014C8                           622  OP_CODE_JSR:
000014C8  43F9 00001530            623          LEA         JSR_MSG, A1
000014CE  103C 000E                624          MOVE.B      #14, D0
000014D2  4E4F                     625          TRAP        #15
000014D4                           626          
000014D4  43F9 00001534            627          LEA         WHITESPACE, A1
000014DA  103C 000E                628          MOVE.B      #14, D0
000014DE  4E4F                     629          TRAP        #15
000014E0                           630          
000014E0  4EB9 000015D4            631          JSR         EFFECTIVEADD_5_0
000014E6                           632          
000014E6  1C3C 0001                633          MOVE.B      #1,      D6
000014EA                           634          
000014EA  4E75                     635          RTS
000014EC                           636  
000014EC= 4E 4F 54 00              637  NOT_MSG:        DC.B        'NOT',0
000014F0= 42 52 41 00              638  BRA_MSG:        DC.B        'BRA',0
000014F4                           639  
000014F4= 4D 4F 56 45 00           640  MOVE_MSG:       DC.B        'MOVE',0
000014F9= 4D 4F 56 45 4D 00        641  MOVEM_MSG:      DC.B        'MOVEM',0
000014FF= 4D 4F 56 45 41 00        642  MOVEA_MSG:      DC.B        'MOVEA',0
00001505= 4C 45 41 00              643  LEA_MSG:        DC.B        'LEA',0
00001509                           644  
00001509= 41 44 44 00              645  ADD_MSG:        DC.B        'ADD',0
0000150D= 41 44 44 41 00           646  ADDA_MSG:       DC.B        'ADDA',0
00001512= 41 44 44 51 00           647  ADDQ_MSG:       DC.B        'ADDQ',0
00001517= 53 55 42 00              648  SUB_MSG:        DC.B        'SUB',0
0000151B= 52 54 53 00              649  RTS_MSG:        DC.B        'RTS',0
0000151F= 4E 4F 50 00              650  NOP_MSG:        DC.B        'NOP',0
00001523                           651  
00001523= 4D 4F 56 45 51 00        652  MOVEQ_MSG:      DC.B        'MOVEQ',0
00001529= 41 4E 44 00              653  AND_MSG:        DC.B        'AND',0
0000152D= 4F 52 00                 654  OR_MSG:         DC.B        'OR',0
00001530= 4A 53 52 00              655  JSR_MSG:        DC.B        'JSR',0
00001534                           656  
00001534= 20 00                    657  WHITESPACE:     DC.B        ' ',0
00001536= 2C 20 00                 658  WHITESPACE_COM: DC.B        ', ',0
00001539                           659  
00001539= 44 00                    660  DATA_REG:        DC.B        'D',0
0000153B= 41 00                    661  ADDR_REG:        DC.B        'A',0
0000153D                           662  
0000153D= 23 00                    663  IMM_DATA:       DC.B        '#',0
0000153F= 24 00                    664  HEX:            DC.B        '$',0
00001541                           665  
00001541= 2E 42 00                 666  DOT_BYTE:       DC.B        '.B',0
00001544= 2E 57 00                 667  DOT_WORD:       DC.B        '.W',0
00001547= 2E 4C 00                 668  DOT_LONG:       DC.B        '.L',0
0000154A                           669  
0000154A= 28 00                    670  START_PAREN     DC.B        '(',0
0000154C= 29 00                    671  END_PAREN       DC.B        ')',0
0000154E                           672  
0000154E= 2B 00                    673  PLUS_SIGN       DC.B        '+',0
00001550= 2D 00                    674  MINUS_SIGN      DC.B        '-',0
00001552                           675  
00001552                           676  
00001552                           677  
00001552                           678  
00001552                           679  
00001552                           680  
00001552                           681  
00001552                           682  -------------------- end include --------------------
00001552                           683      INCLUDE         'Disassembler_EA.x68'
00001552                           684  
00001552                           685  REGISTER_11_9:
00001552                           686          *make a copy
00001552  3803                     687          MOVE.W      D3,     D4
00001554                           688          
00001554                           689          *isolate bits 11-9 on the right
00001554  343C 0004                690          MOVE.W      #4,     D2
00001558  E56C                     691          LSL.W       D2,     D4
0000155A  343C 000D                692          MOVE.W      #13,    D2
0000155E  E46C                     693          LSR.W       D2,     D4
00001560                           694          
00001560                           695          *print out the register number
00001560  2204                     696          MOVE.L      D4,     D1
00001562  103C 0003                697          MOVE.B      #3,     D0
00001566  4E4F                     698          TRAP        #15
00001568                           699          
00001568  4E75                     700          RTS
0000156A                           701  OPMODE_8_6:
0000156A                           702          *append size to opcode
0000156A  3803                     703          MOVE.W      D3,     D4
0000156C                           704          
0000156C  343C 0007                705          MOVE.W      #7,     D2
00001570  E56C                     706          LSL.W       D2,     D4
00001572  343C 000D                707          MOVE.W      #13,    D2
00001576  E46C                     708          LSR.W       D2,     D4
00001578                           709          
00001578  B83C 0000                710          CMP.B       #$0,    D4
0000157C  6700 0032                711          BEQ         BYTE_SIZE
00001580                           712          
00001580  B83C 0004                713          CMP.B       #$4,    D4
00001584  6700 002A                714          BEQ         BYTE_SIZE
00001588                           715          
00001588  B83C 0001                716          CMP.B       #$1,    D4
0000158C  6700 002E                717          BEQ         WORD_SIZE
00001590                           718          
00001590  B83C 0005                719          CMP.B       #$5,    D4
00001594  6700 0026                720          BEQ         WORD_SIZE
00001598                           721          
00001598  B83C 0002                722          CMP.B       #$2,    D4
0000159C  6700 002A                723          BEQ         LONG_SIZE
000015A0                           724          
000015A0  B83C 0006                725          CMP.B       #$6,    D4
000015A4  6700 0022                726          BEQ         LONG_SIZE
000015A8                           727             
000015A8                           728          *isolates bits 8-6 to D4 on the left side, so rotation can be done in higher level to corresponding output for opmode
000015A8                           729  PREP_FOR_ROT:
000015A8                           730          *MOVE.W      D3,     D4
000015A8                           731          
000015A8  343C 000D                732          MOVE.W      #13,     D2
000015AC  E56C                     733          LSL.W       D2,     D4
000015AE                           734          *MOVE.W      #13,    D2
000015AE                           735          *LSR.W       D2,     D4
000015AE                           736          
000015AE  4E75                     737          RTS
000015B0                           738  BYTE_SIZE:
000015B0  43F8 1541                739          LEA         DOT_BYTE, A1
000015B4  103C 000E                740          MOVE.B      #14, D0
000015B8  4E4F                     741          TRAP        #15
000015BA                           742  
000015BA  60EC                     743          BRA         PREP_FOR_ROT
000015BC                           744  WORD_SIZE:
000015BC  43F8 1544                745          LEA         DOT_WORD, A1
000015C0  103C 000E                746          MOVE.B      #14, D0
000015C4  4E4F                     747          TRAP        #15
000015C6                           748          
000015C6  60E0                     749          BRA         PREP_FOR_ROT
000015C8                           750  LONG_SIZE:
000015C8  43F8 1547                751          LEA         DOT_LONG, A1
000015CC  103C 000E                752          MOVE.B      #14, D0
000015D0  4E4F                     753          TRAP        #15
000015D2                           754          
000015D2  60D4                     755          BRA         PREP_FOR_ROT
000015D4                           756  EFFECTIVEADD_5_0:
000015D4                           757          *isolate mode bits (5-3)
000015D4                           758          *make a copy
000015D4  3803                     759          MOVE.W      D3,     D4
000015D6                           760          
000015D6                           761          *isolate bits 5-3 on the right
000015D6  343C 000A                762          MOVE.W      #10,     D2
000015DA  E56C                     763          LSL.W       D2,     D4
000015DC  343C 000D                764          MOVE.W      #13,    D2
000015E0  E46C                     765          LSR.W       D2,     D4
000015E2                           766          
000015E2  B83C 0000                767          CMP.B       #$0,    D4
000015E6  6700 002C                768          BEQ         DATAR_EA
000015EA                           769          
000015EA  B83C 0001                770          CMP.B       #$1,    D4
000015EE  6700 0046                771          BEQ         ADDR_EA
000015F2                           772          
000015F2  B83C 0002                773          CMP.B       #$2,    D4
000015F6  6700 0060                774          BEQ         ADDP_EA
000015FA                           775          
000015FA  B83C 0003                776          CMP.B       #$3,    D4
000015FE  6700 008E                777          BEQ         ADDPP_EA
00001602                           778          
00001602  B83C 0004                779          CMP.B       #$4,    D4
00001606  6700 00C6                780          BEQ         ADDPM_EA
0000160A                           781          
0000160A  B83C 0007                782          CMP.B       #$7,    D4
0000160E  6700 00FE                783          BEQ         IDATA_EA
00001612                           784  
00001612  4E75                     785          RTS
00001614                           786  DATAR_EA:
00001614                           787          *print the 'D'
00001614  43F8 1539                788          LEA         DATA_REG, A1
00001618  103C 000E                789          MOVE.B      #14, D0
0000161C  4E4F                     790          TRAP        #15
0000161E                           791          
0000161E  3803                     792          MOVE.W      D3,     D4
00001620                           793          
00001620                           794          *print the reg num
00001620                           795          *isolate bits 2-0 on the right
00001620  343C 000D                796          MOVE.W      #13,     D2
00001624  E56C                     797          LSL.W       D2,     D4
00001626  343C 000D                798          MOVE.W      #13,    D2
0000162A  E46C                     799          LSR.W       D2,     D4
0000162C                           800          
0000162C                           801          *print out the register number
0000162C  2204                     802          MOVE.L      D4,     D1
0000162E  103C 0003                803          MOVE.B      #3,     D0
00001632  4E4F                     804          TRAP        #15
00001634                           805  
00001634  4E75                     806          RTS
00001636                           807  ADDR_EA:
00001636                           808          *print the 'A'
00001636  43F8 153B                809          LEA         ADDR_REG, A1
0000163A  103C 000E                810          MOVE.B      #14, D0
0000163E  4E4F                     811          TRAP        #15
00001640                           812          
00001640  3803                     813          MOVE.W      D3,     D4
00001642                           814          
00001642                           815          *print the reg num
00001642                           816          *isolate bits 2-0 on the right
00001642  343C 000D                817          MOVE.W      #13,     D2
00001646  E56C                     818          LSL.W       D2,     D4
00001648  343C 000D                819          MOVE.W      #13,    D2
0000164C  E46C                     820          LSR.W       D2,     D4
0000164E                           821          
0000164E                           822          *print out the register number
0000164E  2204                     823          MOVE.L      D4,     D1
00001650  103C 0003                824          MOVE.B      #3,     D0
00001654  4E4F                     825          TRAP        #15
00001656                           826  
00001656  4E75                     827          RTS
00001658                           828  ADDP_EA:
00001658                           829          *print the '(A'
00001658  43F8 154A                830          LEA         START_PAREN, A1
0000165C  103C 000E                831          MOVE.B      #14, D0
00001660  4E4F                     832          TRAP        #15
00001662                           833          
00001662  43F8 153B                834          LEA         ADDR_REG, A1
00001666  103C 000E                835          MOVE.B      #14, D0
0000166A  4E4F                     836          TRAP        #15
0000166C                           837          
0000166C  3803                     838          MOVE.W      D3,     D4
0000166E                           839          
0000166E                           840          *print the reg num
0000166E                           841          *isolate bits 2-0 on the right
0000166E  343C 000D                842          MOVE.W      #13,     D2
00001672  E56C                     843          LSL.W       D2,     D4
00001674  343C 000D                844          MOVE.W      #13,    D2
00001678  E46C                     845          LSR.W       D2,     D4
0000167A                           846          
0000167A                           847          *print out the register number
0000167A  2204                     848          MOVE.L      D4,     D1
0000167C  103C 0003                849          MOVE.B      #3,     D0
00001680  4E4F                     850          TRAP        #15
00001682                           851          
00001682  43F8 154C                852          LEA         END_PAREN, A1
00001686  103C 000E                853          MOVE.B      #14, D0
0000168A  4E4F                     854          TRAP        #15
0000168C  4E75                     855          RTS
0000168E                           856  ADDPP_EA:
0000168E                           857          *print the '(A'
0000168E  43F8 154A                858          LEA         START_PAREN, A1
00001692  103C 000E                859          MOVE.B      #14, D0
00001696  4E4F                     860          TRAP        #15
00001698                           861          
00001698  43F8 153B                862          LEA         ADDR_REG, A1
0000169C  103C 000E                863          MOVE.B      #14, D0
000016A0  4E4F                     864          TRAP        #15
000016A2                           865          
000016A2  3803                     866          MOVE.W      D3,     D4
000016A4                           867          
000016A4                           868          *print the reg num
000016A4                           869          *isolate bits 2-0 on the right
000016A4  343C 000D                870          MOVE.W      #13,     D2
000016A8  E56C                     871          LSL.W       D2,     D4
000016AA  343C 000D                872          MOVE.W      #13,    D2
000016AE  E46C                     873          LSR.W       D2,     D4
000016B0                           874          
000016B0                           875          *print out the register number
000016B0  2204                     876          MOVE.L      D4,     D1
000016B2  103C 0003                877          MOVE.B      #3,     D0
000016B6  4E4F                     878          TRAP        #15
000016B8                           879          
000016B8  43F8 154C                880          LEA         END_PAREN, A1
000016BC  103C 000E                881          MOVE.B      #14, D0
000016C0  4E4F                     882          TRAP        #15
000016C2                           883          
000016C2  43F8 154E                884          LEA         PLUS_SIGN, A1
000016C6  103C 000E                885          MOVE.B      #14, D0
000016CA  4E4F                     886          TRAP        #15
000016CC                           887          
000016CC  4E75                     888          RTS
000016CE                           889  ADDPM_EA:
000016CE                           890          *print the '-(A'
000016CE  43F8 1550                891          LEA         MINUS_SIGN, A1
000016D2  103C 000E                892          MOVE.B      #14, D0
000016D6  4E4F                     893          TRAP        #15
000016D8                           894          
000016D8  43F8 154A                895          LEA         START_PAREN, A1
000016DC  103C 000E                896          MOVE.B      #14, D0
000016E0  4E4F                     897          TRAP        #15
000016E2                           898          
000016E2  43F8 153B                899          LEA         ADDR_REG, A1
000016E6  103C 000E                900          MOVE.B      #14, D0
000016EA  4E4F                     901          TRAP        #15
000016EC                           902          
000016EC  3803                     903          MOVE.W      D3,     D4
000016EE                           904          
000016EE                           905          *print the reg num
000016EE                           906          *isolate bits 2-0 on the right
000016EE  343C 000D                907          MOVE.W      #13,     D2
000016F2  E56C                     908          LSL.W       D2,     D4
000016F4  343C 000D                909          MOVE.W      #13,    D2
000016F8  E46C                     910          LSR.W       D2,     D4
000016FA                           911          
000016FA                           912          *print out the register number
000016FA  2204                     913          MOVE.L      D4,     D1
000016FC  103C 0003                914          MOVE.B      #3,     D0
00001700  4E4F                     915          TRAP        #15
00001702                           916          
00001702  43F8 154C                917          LEA         END_PAREN, A1
00001706  103C 000E                918          MOVE.B      #14, D0
0000170A  4E4F                     919          TRAP        #15
0000170C                           920          
0000170C  4E75                     921          RTS
0000170E                           922  IDATA_EA:
0000170E                           923          *(not doing this)check register to see if it's W or L addressinG
0000170E                           924          *use (A3)+.W or .L to get the address data
0000170E                           925          *print it out
0000170E                           926          
0000170E                           927          *->take the next long and spit it out
0000170E                           928          *print out the data in hex form
0000170E                           929          *NOTE that if register = 100 it means raw data, can be in decimal b/c not address
0000170E                           930          
0000170E  3803                     931          MOVE.W      D3,     D4
00001710                           932          
00001710                           933          *get reg num
00001710                           934          *isolate bits 2-0 on the right
00001710  343C 000D                935          MOVE.W      #13,     D2
00001714  E56C                     936          LSL.W       D2,     D4
00001716  343C 000D                937          MOVE.W      #13,    D2
0000171A  E46C                     938          LSR.W       D2,     D4
0000171C                           939          
0000171C                           940          *raw data
0000171C  B87C 0004                941          CMP         #$4,    D4
00001720  6700 0022                942          BEQ         IDATA
00001724                           943          
00001724                           944          *W addressing
00001724  B87C 0000                945          CMP         #$0,    D4
00001728  6700 002E                946          BEQ         WADDR
0000172C                           947          
0000172C  43F8 153F                948          LEA         HEX, A1
00001730  103C 000E                949          MOVE.B      #14, D0
00001734  4E4F                     950          TRAP        #15
00001736                           951          
00001736  143C 0010                952          MOVE.B      #16,    D2          *base 16
0000173A  103C 000F                953          MOVE.B      #15,    D0
0000173E  221B                     954          MOVE.L      (A3)+,   D1
00001740  4E4F                     955          TRAP        #15
00001742  4E75                     956          RTS
00001744                           957  IDATA:
00001744  43F8 153D                958          LEA         IMM_DATA, A1
00001748  103C 000E                959          MOVE.B      #14, D0
0000174C  4E4F                     960          TRAP        #15
0000174E                           961          
0000174E  321B                     962          MOVE.W      (A3)+,     D1
00001750  103C 0003                963          MOVE.B      #3,     D0
00001754  4E4F                     964          TRAP        #15
00001756  4E75                     965          RTS
00001758                           966          
00001758                           967  WADDR:
00001758  43F8 153F                968          LEA         HEX, A1
0000175C  103C 000E                969          MOVE.B      #14, D0
00001760  4E4F                     970          TRAP        #15
00001762                           971          
00001762  143C 0010                972          MOVE.B      #16,    D2          *base 16
00001766  103C 000F                973          MOVE.B      #15,    D0
0000176A  321B                     974          MOVE.W      (A3)+,   D1
0000176C  4E4F                     975          TRAP        #15
0000176E  4E75                     976          RTS
00001770                           977  
00001770                           978          
00001770                           979  DATA_7_0:
00001770                           980          *make a copy
00001770  3803                     981          MOVE.W      D3,     D4
00001772                           982          
00001772                           983          *isolate bits 7-0 on the right
00001772  343C 0008                984          MOVE.W      #8,     D2
00001776  E56C                     985          LSL.W       D2,     D4
00001778  343C 0008                986          MOVE.W      #8,     D2
0000177C  E46C                     987          LSR.W       D2,     D4
0000177E                           988          
0000177E                           989          *print out the data in hex form
0000177E  143C 0010                990          MOVE.B      #16,    D2          *base 16
00001782  103C 000F                991          MOVE.B      #15,    D0
00001786  3204                     992          MOVE.W      D4,     D1
00001788  4E4F                     993          TRAP        #15
0000178A                           994  
0000178A                           995  
0000178A  4E75                     996          RTS
0000178C                           997  
0000178C                           998  
0000178C                           999  
0000178C                          1000  
0000178C                          1001  -------------------- end include --------------------
0000178C                          1002      INCLUDE         'Sample_Test.x68'
0000178C                          1003  
0000178C                          1004                    ; first instruction of program
0000178C                          1005  
0000178C                          1006  TEST
0000178C  4E75                    1007      RTS
0000178E  4E71                    1008      NOP
00001790                          1009      
00001790  1401                    1010      MOVE.B      D1,     D2
00001792  3449                    1011      MOVEA.W     A1,     A2
00001794  48A1 007F               1012      MOVEM.W     A1-A7,  -(A1)
00001798  7000                    1013      MOVEQ       #$0,    D0
0000179A  7C32                    1014      MOVEQ       #50,  D6
0000179C  45D1                    1015      LEA         (A1),   A2
0000179E                          1016      
0000179E  C401                    1017      AND.B       D1,     D2
000017A0  CA93                    1018      AND.L       (A3),   D5
000017A2  C262                    1019      AND.W       -(A2),  D1
000017A4  C07C 007B               1020      AND.W       #123,   D0         
000017A8  C4B9 0000A000           1021      AND.L       $A000,  D2          *shows up as 0000A000 in data
000017AE  C479 0000A000           1022      AND.W       $0000A000, D2       *shows up as 0000A000 in data
000017B4  C01E                    1023      AND.B       (A6)+,  D0
000017B6  C312                    1024      AND.B       D1,     (A2)
000017B8  C578 A000               1025      AND.W       D2, $FFFFA000       *shows up as A000 in data, MOVE.L will take word from next opcode
000017BC                          1026      
000017BC  8401                    1027      OR.B        D1,     D2
000017BE  8C38 1234               1028      OR.B        $00001234,  D6
000017C2  8E39 0000ABCD           1029      OR.B        $ABCD,  D7
000017C8  8D39 1234ABCD           1030      OR.B        D6,     $1234ABCD
000017CE  8F39 0000ABCD           1031      OR.B        D7,     $ABCD
000017D4                          1032      
000017D4  70CD                    1033      MOVEQ       #$CD,    D0
000017D6  7C32                    1034      MOVEQ       #50,  D6
000017D8                          1035  
000017D8                          1036  
000017D8  D401                    1037      ADD.B       D1,     D2
000017DA  D4C1                    1038      ADDA.W      D1,     A2
000017DC  524A                    1039      ADDQ.W      #$1,    A2
000017DE  9401                    1040      SUB.B       D1,     D2
000017E0                          1041      
000017E0  4EB8 178C               1042      JSR         TEST
000017E4  6EA6                    1043      BGT.B       TEST
000017E6  6F00 FFA4               1044      BLE.W       TEST
000017EA  6700 FFA0               1045      BEQ.W       TEST
000017EE  609C                    1046      BRA         TEST
000017F0  4678 178C               1047      NOT         TEST
000017F4                          1048      
000017F4  E32A                    1049      LSL.B       D1,     D2
000017F6  E22A                    1050      LSR.B       D1,     D2
000017F8  E322                    1051      ASL.B       D1,     D2
000017FA  E222                    1052      ASR.B       D1,     D2
000017FC  E33A                    1053      ROL.B       D1,     D2
000017FE  E23A                    1054      ROR.B       D1,     D2
00001800                          1055  
00001800                          1056  
00001800                          1057  
00001800                          1058  
00001800                          1059  
00001800                          1060  
00001800                          1061  -------------------- end include --------------------
00001800                          1062      *INCLUDE         'demo_test.x68'
00001800                          1063  
00001800                          1064  
00001800                          1065  * Put variables and constants here
00001800                          1066  
00001800= 57 65 6C 63 6F 6D ...   1067  INTRO_MSG:       DC.B       'Welcome to Team Cools Disassembler!',CR,LF,0
00001826= 50 6C 65 61 73 65 ...   1068  STARTING_MSG:    DC.B       'Please enter the Starting Address',CR,LF,0
0000184A= 50 6C 65 61 73 65 ...   1069  ENDING_MSG:      DC.B       'Please enter the Ending Address',CR,LF,0
0000186C= 44 6F 6E 65 20 52 ...   1070  GOODBYE_MSG:     DC.B       'Done Reading data',CR,LF,0
00001880                          1071  * CR and LF for strings above because we want to go to next line after printing message
00001880                          1072  
00001880                          1073  STA_ADDR         DS.B        40
000018A8                          1074  END_ADDR         DS.B        40
000018D0                          1075  
000018D0                          1076  * no CR and LF for strings below because we want to print each number and letter
000018D0                          1077  
000018D0= 20 20 00                1078  SPACE_MSG:       DC.B        '  ',0
000018D3                          1079  
000018D3= 30 00                   1080  ZERO_MSG:        DC.B        '0',0
000018D5= 31 00                   1081  ONE_MSG:         DC.B        '1',0
000018D7= 32 00                   1082  TWO_MSG:         DC.B        '2',0
000018D9= 33 00                   1083  THREE_MSG:       DC.B        '3',0
000018DB= 34 00                   1084  FOUR_MSG:        DC.B        '4',0
000018DD= 35 00                   1085  FIVE_MSG:        DC.B        '5',0
000018DF= 36 00                   1086  SIX_MSG:         DC.B        '6',0
000018E1= 37 00                   1087  SEVEN_MSG:       DC.B        '7',0
000018E3= 38 00                   1088  EIGHT_MSG:       DC.B        '8',0
000018E5= 39 00                   1089  NINE_MSG:        DC.B        '9',0
000018E7= 41 00                   1090  A_MSG:           DC.B        'A',0
000018E9= 42 00                   1091  B_MSG:           DC.B        'B',0
000018EB= 43 00                   1092  C_MSG:           DC.B        'C',0
000018ED= 44 00                   1093  D_MSG:           DC.B        'D',0
000018EF= 45 00                   1094  E_MSG:           DC.B        'E',0
000018F1= 46 00                   1095  F_MSG:           DC.B        'F',0 
000018F3                          1096  
000018F3                          1097  
000018F3                          1098  *-----Carriage Return
000018F3  =0000000D               1099  CR              EQU          $0D
000018F3                          1100  *-----------Line Feed
000018F3  =0000000A               1101  LF              EQU          $0A
000018F3                          1102  
000018F3= 0D 0A 00                1103  NEW_LINE:       DC.B         '',CR,LF,0
000018F6                          1104  
000018F6                          1105      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDA_MSG            150D
ADDPM_EA            16CE
ADDPP_EA            168E
ADDP_EA             1658
ADDQ_MSG            1512
ADDR_EA             1636
ADDR_REG            153B
ADD_MSG             1509
AND_MSG             1529
ASCII_DONE          106E
A_MSG               18E7
BRA_MSG             14F0
BYTE_SIZE           15B0
B_MSG               18E9
CHECK_OPCODES       116A
CONVERT_TO_ASCII    1056
CR                  D
C_MSG               18EB
DATAR_EA            1614
DATA_7_0            1770
DATA_REG            1539
DONE                1158
DOT_BYTE            1541
DOT_LONG            1547
DOT_WORD            1544
D_MSG               18ED
EFFECTIVEADD_5_0    15D4
EIGHT_MSG           18E3
ENDING_MSG          184A
END_ADDR            18A8
END_PAREN           154C
E_MSG               18EF
FIVE_MSG            18DD
FOUR_MSG            18DB
F_MSG               18F1
GOODBYE_MSG         186C
HEX                 153F
IDATA               1744
IDATA_EA            170E
IMM_DATA            153D
INTRO_MSG           1800
ISOLATE_15_11       124A
ISOLATE_15_12       11D2
ISOLATE_15_14       125C
ISOLATE_15_6        121E
ISOLATE_15_8        1230
ISOLATE_16          120C
ISOLATE_8_6         126E
JSR_MSG             1530
LEA_MSG             1505
LETTER_ASCII        1084
LF                  A
LONG_SIZE           15C8
MINUS_SIGN          1550
MOVEA_MSG           14FF
MOVEM_MSG           14F9
MOVEQ_MSG           1523
MOVE_MSG            14F4
NEW_LINE            18F3
NINE_MSG            18E5
NOP_MSG             151F
NOT_MSG             14EC
NUMBER_ASCII        1070
ONE_MSG             18D5
OPMODE_8_6          156A
OP_CODE_ADD         12FA
OP_CODE_ADDA        130C
OP_CODE_ADDQ        131E
OP_CODE_AND         13C0
OP_CODE_AND2        140E
OP_CODE_BRA         12A0
OP_CODE_JSR         14C8
OP_CODE_LEA         12B2
OP_CODE_MOVE        12C4
OP_CODE_MOVEA       12D6
OP_CODE_MOVEM       12E8
OP_CODE_MOVEQ       1366
OP_CODE_NOP         1354
OP_CODE_NOT         128E
OP_CODE_OR          1444
OP_CODE_OR2         1492
OP_CODE_RTS         1342
OP_CODE_SUB         1330
OR_MSG              152D
PLUS_SIGN           154E
PREP_FOR_ROT        15A8
PRINT_DONE          1126
PRINT_LOOP          10F8
PRINT_MEMORY_LOOP   1098
REGISTER_11_9       1552
RETURN              11D0
REVERSE_DONE        1156
REVERSE_LOOP        1138
REVERSE_START       1128
RTS_MSG             151B
SEVEN_MSG           18E1
SIX_MSG             18DF
SPACE_MSG           18D0
START               1000
STARTING_MSG        1826
START_PAREN         154A
STA_ADDR            1880
SUB_MSG             1517
TEST                178C
THREE_MSG           18D9
TWO_MSG             18D7
WADDR               1758
WHITESPACE          1534
WHITESPACE_COM      1536
WORD_SIZE           15BC
ZERO_MSG            18D3
