00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 8/10/2022 3:22:42 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :Disassembler
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  START:                  ; first instruction of program
00001000                             9  
00001000                            10  * Put program code here
00001000                            11  
00001000                            12  *------LEA = Load effective address
00001000                            13  *------Running Trap #15 while the number 14 is in D0 will print out whatever data is in the address stored in A1
00001000                            14  
00001000  43F9 00001C4E             15          LEA         INTRO_MSG,      A1
00001006  103C 000E                 16          MOVE.B      #14,            D0    
0000100A  4E4F                      17          TRAP        #15
0000100C                            18          
0000100C  43F9 00001C74             19          LEA         STARTING_MSG,   A1
00001012  103C 000E                 20          MOVE.B      #14,            D0   
00001016  4E4F                      21          TRAP        #15
00001018                            22          
00001018                            23  *----------------- 
00001018                            24  *       Running trap command 15 while the number 2 is in D0 
00001018                            25  *       Will ask the user to enter input
00001018                            26  *       after the user hits enter, the length of the input is stored in D1
00001018                            27  *       and the user data is stored in the space allocated by STA_ADDR repressented by ASSCI code
00001018                            28  *       IE 31 = 1, 32 = 2 etc etc
00001018                            29  *       If I store the number 1200, it will appear in memory as 31 32 30 30
00001018                            30  
00001018  43F9 00001CCE             31          LEA         STA_ADDR,       A1
0000101E  103C 0002                 32          MOVE.B      #2,             D0
00001022  4E4F                      33          TRAP        #15
00001024                            34          
00001024  4EB9 00001056             35          JSR         CONVERT_TO_ASCII
0000102A                            36          
0000102A                            37          * A3 now has our Starting Address
0000102A  2647                      38          MOVEA.L     D7,             A3
0000102C                            39          
0000102C  4282                      40          CLR.L       D2
0000102E  4287                      41          CLR.L       D7
00001030                            42          
00001030  43F9 00001C98             43          LEA         ENDING_MSG,     A1
00001036  103C 000E                 44          MOVE.B      #14,            D0
0000103A  4E4F                      45          TRAP        #15
0000103C                            46          
0000103C  43F9 00001CF6             47          LEA         END_ADDR,       A1
00001042  103C 0002                 48          MOVE.B      #2,             D0
00001046  4E4F                      49          TRAP        #15
00001048                            50          
00001048  4EB9 00001056             51          JSR         CONVERT_TO_ASCII
0000104E                            52          * A4 now has our Ending Address
0000104E  2847                      53          MOVEA.L     D7,             A4
00001050                            54          
00001050                            55  
00001050  4EB9 00001098             56          JSR         PRINT_MEMORY_LOOP
00001056                            57          
00001056                            58          
00001056                            59          
00001056                            60          *BRA         DONE
00001056                            61          *   ASCII conversion
00001056                            62  *---------------------------------------        
00001056                            63  CONVERT_TO_ASCII:             
00001056  0C01 0000                 64          CMPI.B      #$0,            D1
0000105A  6700 0012                 65          BEQ         ASCII_DONE
0000105E  1419                      66          MOVE.B      (A1)+,          D2
00001060  103C 0039                 67          MOVE.B      #$39,           D0
00001064  B400                      68          CMP.B       D0,             D2
00001066  6F00 0008                 69          BLE         NUMBER_ASCII   
0000106A  6000 0018                 70          BRA         LETTER_ASCII  
0000106E                            71  
0000106E                            72  ASCII_DONE:
0000106E  4E75                      73          RTS
00001070                            74          
00001070                            75  NUMBER_ASCII:
00001070  5301                      76          SUBI.B      #$1,            D1
00001072  103C 0030                 77          MOVE.B      #$30,           D0
00001076  9400                      78          SUB.B       D0,             D2
00001078  DE02                      79          ADD.B       D2,             D7
0000107A  0C01 0000                 80          CMPI.B      #$0,            D1
0000107E  67EE                      81          BEQ         ASCII_DONE
00001080  E987                      82          ASL.L       #4,             D7
00001082  60D2                      83          BRA         CONVERT_TO_ASCII
00001084                            84  LETTER_ASCII:
00001084  5301                      85          SUBI.B      #$1,            D1
00001086  103C 0037                 86          MOVE.B      #$37,           D0
0000108A  9400                      87          SUB.B       D0,             D2
0000108C  DE02                      88          ADD.B       D2,             D7
0000108E  0C01 0000                 89          CMPI.B      #$0,            D1
00001092  67DA                      90          BEQ         ASCII_DONE
00001094  E987                      91          ASL.L       #4,             D7
00001096  60BE                      92          BRA         CONVERT_TO_ASCII
00001098                            93  *---------------------------------------        
00001098                            94          
00001098                            95          
00001098                            96          *   Printing data and addresses
00001098                            97  *---------------------------------------
00001098                            98  
00001098                            99  PRINT_MEMORY_LOOP:
00001098                           100          * add code here to compare current address with end address
00001098                           101          
00001098                           102          * if equal to, or further than ending address jump to DONE
00001098                           103          * SIMHALT
00001098  B9CB                     104          CMP.L       A3,             A4
0000109A  6700 00BC                105          BEQ         DONE
0000109E  6F00 00B8                106          BLE         DONE
000010A2                           107          
000010A2                           108          * We are goiong to keep track of the number of byts we have examined using D1
000010A2                           109          * Before printing the address we have to reverse the order
000010A2  4281                     110          CLR.L       D1
000010A4  4282                     111          CLR.L       D2
000010A6  123C 0008                112          MOVE.B      #$8,            D1
000010AA  260B                     113          MOVE.L      A3,             D3
000010AC  4EB9 00001128            114          JSR         REVERSE_START
000010B2                           115          
000010B2  2607                     116          MOVE.L      D7,             D3
000010B4  4281                     117          CLR.L       D1
000010B6  4282                     118          CLR.L       D2
000010B8  123C 0008                119          MOVE.B      #$8,            D1
000010BC  4EB9 000010F8            120          JSR         PRINT_LOOP
000010C2                           121          
000010C2                           122          
000010C2                           123          * space between address and data
000010C2  43F9 00001D1E            124          LEA         SPACE_MSG,      A1
000010C8  103C 000E                125          MOVE.B      #14,            D0    
000010CC  4E4F                     126          TRAP        #15
000010CE                           127          
000010CE  4281                     128          CLR.L       D1
000010D0  4282                     129          CLR.L       D2
000010D2  123C 0008                130          MOVE.B      #$8,            D1
000010D6  361B                     131          MOVE.W      (A3)+,          D3
000010D8                           132          *JSR         REVERSE_START
000010D8                           133          
000010D8                           134          *MOVE.L      D7,             D3
000010D8  4281                     135          CLR.L       D1
000010DA  4282                     136          CLR.L       D2
000010DC                           137          *MOVE.B      #$8,            D1
000010DC                           138          *JSR         PRINT_LOOP
000010DC                           139          
000010DC                           140          * Jump to Function in another file
000010DC  4EB9 0000116A            141          JSR         CHECK_OPCODES
000010E2                           142          
000010E2                           143          
000010E2  4281                     144          CLR.L       D1
000010E4  4282                     145          CLR.L       D2
000010E6  4283                     146          CLR.L       D3
000010E8  4284                     147          CLR.L       D4
000010EA                           148          * new line
000010EA  43F9 00001DB7            149          LEA         NEW_LINE,       A1
000010F0  103C 000E                150          MOVE.B      #14,            D0    
000010F4  4E4F                     151          TRAP        #15
000010F6                           152  
000010F6                           153          * branch to the start of this method
000010F6  60A0                     154          BRA         PRINT_MEMORY_LOOP
000010F8                           155  
000010F8                           156  
000010F8                           157  PRINT_LOOP:
000010F8                           158  
000010F8                           159          
000010F8                           160          * When D1 == 0, we are done and exit this loop
000010F8  0C01 0000                161          CMPI.B      #$0,            D1
000010FC  6700 0028                162          BEQ         PRINT_DONE
00001100  5301                     163          SUBI.B      #$1,            D1
00001102                           164          
00001102  1403                     165          MOVE.B      D3,             D2
00001104                           166          * Bit shifting to isolate the right most digit
00001104                           167          * 1234 5678 => 8000 0000 => 0000 0008
00001104  103C 001C                168          MOVE.B      #28,            D0    
00001108  E1AA                     169          LSL.L       D0,             D2     
0000110A  E99A                     170          ROL.L       #4,             D2 
0000110C                           171          
0000110C                           172          * Bit shifting to prep the next digit
0000110C                           173          * 1234 4567 => 0123 4567
0000110C  E88B                     174          LSR.L       #4, D3
0000110E                           175          
0000110E                           176          *Assuming D4 is empty
0000110E                           177          
0000110E  1802                     178          MOVE.B       D2,            D4
00001110  43F9 00001D21            179          LEA          ZERO_MSG,      A1
00001116                           180          * load the address of Zero_msg
00001116                           181          * because all of the msgs are stored next to each other in order
00001116                           182          * we can simply take the value isolated from the number, multiply it by 2 (msg's take up 2 bytes)
00001116                           183          * and then add it to the address starting at zero_msg
00001116  C8FC 0002                184          MULU         #2,            D4
0000111A  D3C4                     185          ADDA.L       D4,            A1
0000111C                           186          
0000111C                           187          * trap command 14 reads whatever address is in A1, and then spits out the data to the console
0000111C  103C 000E                188          MOVE.B       #14,           D0
00001120  4E4F                     189          TRAP         #15
00001122  60D4                     190          BRA          PRINT_LOOP
00001124  4644                     191          NOT          D4
00001126                           192          
00001126                           193  PRINT_DONE:
00001126  4E75                     194          RTS
00001128                           195          
00001128                           196      *   Reversing the address
00001128                           197  *---------------------------------------
00001128                           198  
00001128                           199  REVERSE_START:        
00001128  4281                     200          CLR.L       D1
0000112A  4287                     201          CLR.L       D7
0000112C  123C 0008                202          MOVE.B      #8,             D1
00001130  4EB9 00001138            203          JSR         REVERSE_LOOP
00001136  4E75                     204          RTS
00001138                           205          
00001138                           206  REVERSE_LOOP:
00001138                           207  
00001138                           208          
00001138  0C01 0000                209          CMPI.B      #$0,            D1
0000113C  6700 0018                210          BEQ         REVERSE_DONE
00001140  5301                     211          SUBI.B      #$1,            D1
00001142  E987                     212          ASL.L       #4,             D7
00001144                           213          
00001144  4285                     214          CLR.L       D5
00001146                           215          
00001146  1A03                     216          MOVE.B      D3,             D5
00001148                           217          
00001148  103C 001C                218          MOVE.B      #28,            D0    
0000114C  E1AD                     219          LSL.L       D0,             D5     
0000114E  E99D                     220          ROL.L       #4,             D5
00001150                           221          
00001150  DE05                     222          ADD.B       D5,             D7
00001152                           223          
00001152                           224          
00001152  E883                     225          ASR.L       #4,             D3
00001154                           226          
00001154  60E2                     227          BRA         REVERSE_LOOP
00001156                           228  
00001156                           229  REVERSE_DONE:
00001156  4E75                     230          RTS
00001158                           231  DONE:
00001158                           232  
00001158  43F9 00001CBA            233          LEA         GOODBYE_MSG,    A1
0000115E  103C 000E                234          MOVE.B      #14,            D0
00001162  4E4F                     235          TRAP        #15
00001164  103C 0009                236          MOVE.B      #9,             D0
00001168  4E4F                     237          TRAP        #15        
0000116A                           238          
0000116A                           239  
0000116A                           240      *SIMHALT             ; halt simulator
0000116A                           241  
0000116A                           242      INCLUDE         'Disassembler_OPCodes.x68'
0000116A                           243  
0000116A                           244  
0000116A                           245  CHECK_OPCODES:
0000116A                           246  
0000116A  4EB9 0000117E            247          JSR     ISOLATE_15_6
00001170  4EB9 0000118E            248          JSR     ISOLATE_15_8
00001176  4EB9 000011A6            249          JSR     ISOLATE_15_12
0000117C  4E75                     250          RTS
0000117E                           251          
0000117E                           252  ISOLATE_15_6:
0000117E                           253          
0000117E  2803                     254          MOVE.L      D3,     D4
00001180  7406                     255          MOVE.L      #6,     D2
00001182  E4AC                     256          LSR.L       D2,     D4
00001184                           257          
00001184  B87C 013A                258          CMP.W       #$13A,  D4
00001188  6700 0086                259          BEQ         OP_CODE_JSR
0000118C                           260          
0000118C  4E75                     261          RTS
0000118E                           262  
0000118E                           263  
0000118E                           264  ISOLATE_15_8:
0000118E                           265          *SIMHALT
0000118E  2803                     266          MOVE.L      D3,     D4
00001190  7408                     267          MOVE.L      #8,     D2
00001192  E4AC                     268          LSR.L       D2,     D4
00001194                           269          
00001194  B83C 0046                270          CMP.B       #$46,   D4
00001198  6700 0054                271          BEQ         OP_CODE_NOT
0000119C  B83C 0060                272          CMP.B       #$60,   D4
000011A0  6700 005A                273          BEQ         OP_CODE_BRA
000011A4                           274  
000011A4  4E75                     275          RTS
000011A6                           276          
000011A6                           277  ISOLATE_15_12:
000011A6  2803                     278          MOVE.L      D3,     D4
000011A8  740C                     279          MOVE.L      #12,    D2
000011AA  E4AC                     280          LSR.L       D2,     D4
000011AC                           281          
000011AC  B83C 0007                282          CMP.B       #$7,    D4
000011B0  6700 006C                283          BEQ         OP_CODE_MOVEQ
000011B4  B83C 0008                284          CMP.B       #$8,    D4
000011B8  6700 0288                285          BEQ         OP_CODE_OR      *may get confused with DIVU + any other opcodes that start with 1000 (ones that we are not required to cover)
000011BC  B83C 000C                286          CMP.B       #$C,    D4
000011C0  6700 00EE                287          BEQ         OP_CODE_AND
000011C4                           288          *If the 15-12 are 0110
000011C4  B83C 0006                289          CMP.B       #6,     D4
000011C8  6700 00F4                290          BEQ         OP_CODE_BCC
000011CC                           291          *If the 15-12 are 1110, then it is a shift(LSL, LSR, ROR, ROL, ASR, ASL)
000011CC  B83C 000E                292          CMP.B       #14,   D4
000011D0  6700 029E                293          BEQ         OP_CODE_SHIFT_ROTATE
000011D4  B83C 0004                294          CMP.B       #4,     D4
000011D8  6700 0052                295          BEQ         OP_CODE_LEA
000011DC  B83C 000D                296          CMP.B       #%1101, D4
000011E0  6700 014A                297          BEQ         OP_CODE_ADDA
000011E4  B83C 0005                298          CMP.B       #%0101, D4
000011E8  6700 01E6                299          BEQ         OP_CODE_ADDQ
000011EC  4E75                     300          RTS
000011EE                           301  
000011EE                           302  
000011EE                           303  
000011EE                           304  OP_CODE_NOT:
000011EE  43F9 00001D46            305          LEA         NOT_MSG, A1
000011F4  103C 000E                306          MOVE.B      #14, D0
000011F8  4E4F                     307          TRAP        #15
000011FA                           308          
000011FA  4E75                     309          RTS 
000011FC                           310  OP_CODE_BRA:
000011FC  43F9 00001D4A            311          LEA         BRA_MSG, A1
00001202  103C 000E                312          MOVE.B      #14, D0
00001206  4E4F                     313          TRAP        #15
00001208  4EB9 00001726            314          JSR         BR_EA_SIZE_AND_DISPLACEMENT
0000120E  4E75                     315          RTS 
00001210                           316  OP_CODE_JSR:
00001210  43F9 00001D4E            317          LEA         JSR_MSG, A1
00001216  103C 000E                318          MOVE.B      #14, D0
0000121A  4E4F                     319          TRAP        #15
0000121C                           320          
0000121C  4E75                     321          RTS
0000121E                           322  OP_CODE_MOVEQ:
0000121E  43F9 00001D52            323          LEA         MOVEQ_MSG, A1
00001224  103C 000E                324          MOVE.B      #14, D0
00001228  4E4F                     325          TRAP        #15
0000122A                           326          
0000122A  4E75                     327          RTS
0000122C                           328  
0000122C                           329  OP_CODE_LEA:
0000122C  48E7 0600                330          MOVEM.L    D5-D6, -(A7)
00001230  7A06                     331          MOVE.L     #6, D5
00001232  7C08                     332          MOVE.L     #8, D6
00001234  4EB9 000015A2            333          JSR        GET_BIT
0000123A  4CDF 0060                334          MOVEM.L    (A7)+, D5-D6
0000123E  B8BC 00000007            335          CMP.L      #7, D4
00001244  6600 0370                336          BNE        INSTRUCTION_DECODE_FAILURE
00001248  48E7 0600                337          MOVEM.L    D5-D6, -(A7)
0000124C  7A00                     338          MOVE.L     #0, D5
0000124E  7C05                     339          MOVE.L     #5, D6
00001250  4EB9 000015A2            340          JSR        GET_BIT
00001256  4CDF 0060                341          MOVEM.L    (A7)+, D5-D6
0000125A  B8BC 00000039            342          CMP.L      #%111001, D4
00001260  6700 002E                343          BEQ        OP_CODE_LEA_PRINT
00001264  B8BC 00000038            344          CMP.L      #%111000, D4
0000126A  6700 0024                345          BEQ        OP_CODE_LEA_PRINT
0000126E  48E7 0600                346          MOVEM.L    D5-D6, -(A7)
00001272  7A03                     347          MOVE.L     #3, D5
00001274  7C05                     348          MOVE.L     #5, D6
00001276  4EB9 000015A2            349          JSR        GET_BIT
0000127C  4CDF 0060                350          MOVEM.L    (A7)+, D5-D6
00001280  B8BC 00000002            351          CMP.L      #%010, D4
00001286  6700 0008                352          BEQ        OP_CODE_LEA_PRINT
0000128A  6000 032A                353          BRA        INSTRUCTION_DECODE_FAILURE
0000128E                           354          *Unreachable
0000128E  4E75                     355          RTS
00001290                           356  OP_CODE_LEA_PRINT
00001290  43F9 00001D5C            357          LEA         LEA_MSG, A1
00001296  103C 000E                358          MOVE.B      #14, D0
0000129A  4E4F                     359          TRAP        #15
0000129C  43F9 00001D1E            360          LEA         SPACE_MSG, A1
000012A2  103C 000E                361          MOVE.B      #14, D0
000012A6  4E4F                     362          TRAP        #15
000012A8  4EB9 000017E4            363          JSR         LEA_EA
000012AE  4E75                     364          RTS
000012B0                           365  
000012B0                           366  
000012B0                           367  OP_CODE_AND:
000012B0  43F9 00001D58            368          LEA         AND_MSG, A1
000012B6  103C 000E                369          MOVE.B      #14, D0
000012BA  4E4F                     370          TRAP        #15
000012BC                           371          
000012BC  4E75                     372          RTS
000012BE                           373  
000012BE                           374  OP_CODE_BCC
000012BE                           375          *Get bits from 8-11 to get the condition
000012BE                           376          *Only checking for (BGT, BLE, BEQ). Rest are considered
000012BE                           377          *invalid
000012BE  48E7 0600                378          MOVEM.L    D5-D6, -(A7)
000012C2  7A08                     379          MOVE.L     #8, D5
000012C4  7C0B                     380          MOVE.L     #11, D6
000012C6  4EB9 000015A2            381          JSR        GET_BIT
000012CC  4CDF 0060                382          MOVEM.L    (A7)+, D5-D6
000012D0  B8BC 0000000F            383          CMP.L      #15, D4
000012D6  6700 0018                384          BEQ        OP_CODE_BLE
000012DA  B8BC 0000000E            385          CMP.L      #14, D4
000012E0  6700 0022                386          BEQ        OP_CODE_BGT
000012E4  B8BC 00000007            387          CMP.L      #7,  D4
000012EA  6700 002C                388          BEQ        OP_CODE_BEQ
000012EE                           389          *Invalid instruction for the scope
000012EE  4E75                     390          RTS
000012F0                           391  
000012F0                           392  
000012F0                           393  OP_CODE_BLE
000012F0  43F9 00001D8A            394          LEA         BLE_MSG, A1
000012F6  103C 000E                395          MOVE.B      #14, D0
000012FA  4E4F                     396          TRAP        #15
000012FC  4EB9 00001726            397          JSR         BR_EA_SIZE_AND_DISPLACEMENT
00001302  4E75                     398          RTS
00001304                           399  
00001304                           400  OP_CODE_BGT
00001304  43F9 00001D8E            401          LEA         BGT_MSG, A1
0000130A  103C 000E                402          MOVE.B      #14, D0
0000130E  4E4F                     403          TRAP        #15
00001310  4EB9 00001726            404          JSR         BR_EA_SIZE_AND_DISPLACEMENT
00001316  4E75                     405          RTS
00001318                           406  
00001318                           407  
00001318                           408  OP_CODE_BEQ
00001318  43F9 00001D92            409          LEA         BEQ_MSG, A1
0000131E  103C 000E                410          MOVE.B      #14, D0
00001322  4E4F                     411          TRAP        #15
00001324  4EB9 00001726            412          JSR         BR_EA_SIZE_AND_DISPLACEMENT
0000132A  4E75                     413          RTS
0000132C                           414  
0000132C                           415  
0000132C                           416  OP_CODE_ADDA
0000132C  48E7 0600                417          MOVEM.L    D5-D6, -(A7)
00001330  7A06                     418          MOVE.L     #6, D5
00001332  7C08                     419          MOVE.L     #8, D6
00001334  4EB9 000015A2            420          JSR        GET_BIT
0000133A  4CDF 0060                421          MOVEM.L    (A7)+, D5-D6
0000133E  B8BC 00000002            422          CMP.L      #%010, D4
00001344  6F00 0270                423          BLE        INSTRUCTION_DECODE_FAILURE
00001348  B8BC 00000004            424          CMP.L      #%100, D4
0000134E  6700 0266                425          BEQ        INSTRUCTION_DECODE_FAILURE
00001352  B8BC 00000005            426          CMP.L      #%101, D4
00001358  6700 025C                427          BEQ        INSTRUCTION_DECODE_FAILURE
0000135C  B8BC 00000006            428          CMP.L      #%110, D4
00001362  6700 0252                429          BEQ        INSTRUCTION_DECODE_FAILURE
00001366  48E7 0600                430          MOVEM.L    D5-D6, -(A7)
0000136A  7A00                     431          MOVE.L     #0, D5
0000136C  7C05                     432          MOVE.L     #5, D6
0000136E  4EB9 000015A2            433          JSR        GET_BIT
00001374  4CDF 0060                434          MOVEM.L    (A7)+, D5-D6
00001378  B8BC 0000003A            435          CMP.L      #%111010, D4
0000137E  6700 0236                436          BEQ        INSTRUCTION_DECODE_FAILURE
00001382  B8BC 0000003B            437          CMP.L      #%111011, D4
00001388  6700 022C                438          BEQ        INSTRUCTION_DECODE_FAILURE
0000138C  B8BC 0000003C            439          CMP.L      #%111100, D4
00001392  6E00 0222                440          BGT        INSTRUCTION_DECODE_FAILURE
00001396  48E7 0600                441          MOVEM.L    D5-D6, -(A7)
0000139A  7A03                     442          MOVE.L     #3, D5
0000139C  7C05                     443          MOVE.L     #5, D6
0000139E  4EB9 000015A2            444          JSR        GET_BIT
000013A4  4CDF 0060                445          MOVEM.L    (A7)+, D5-D6
000013A8  B8BC 00000005            446          CMP.L      #%101, D4
000013AE  6700 0206                447          BEQ        INSTRUCTION_DECODE_FAILURE
000013B2  B8BC 00000006            448          CMP.L      #%110, D4
000013B8  6700 01FC                449          BEQ        INSTRUCTION_DECODE_FAILURE
000013BC  43F9 00001D9B            450          LEA        ADDA_MSG, A1
000013C2  103C 000E                451          MOVE.B      #14, D0
000013C6  4E4F                     452          TRAP        #15
000013C8  4EB9 00001840            453          JSR        ADDA_EA_SIZE_AND_EA  
000013CE  4E75                     454          RTS
000013D0                           455  
000013D0                           456  OP_CODE_ADDQ
000013D0  48E7 0600                457          MOVEM.L    D5-D6, -(A7)
000013D4  7A06                     458          MOVE.L     #6, D5
000013D6  7C07                     459          MOVE.L     #7, D6
000013D8  4EB9 000015A2            460          JSR        GET_BIT
000013DE  4CDF 0060                461          MOVEM.L    (A7)+, D5-D6
000013E2  B8BC 00000003            462          CMP.L      #%11, D4
000013E8  6700 01CC                463          BEQ        INSTRUCTION_DECODE_FAILURE
000013EC  48E7 0600                464          MOVEM.L    D5-D6, -(A7)
000013F0  7A00                     465          MOVE.L     #0, D5
000013F2  7C05                     466          MOVE.L     #5, D6
000013F4  4EB9 000015A2            467          JSR        GET_BIT
000013FA  4CDF 0060                468          MOVEM.L    (A7)+, D5-D6
000013FE  B8BC 00000039            469          CMP.L      #%111001, D4
00001404  6E00 01B0                470          BGT        INSTRUCTION_DECODE_FAILURE
00001408  48E7 0600                471          MOVEM.L    D5-D6, -(A7)
0000140C  7A03                     472          MOVE.L     #3, D5
0000140E  7C05                     473          MOVE.L     #5, D6
00001410  4EB9 000015A2            474          JSR        GET_BIT
00001416  4CDF 0060                475          MOVEM.L    (A7)+, D5-D6
0000141A  B8BC 00000005            476          CMP.L      #%101, D4
00001420  6700 0194                477          BEQ        INSTRUCTION_DECODE_FAILURE
00001424  B8BC 00000006            478          CMP.L      #%110, D4
0000142A  6700 018A                479          BEQ        INSTRUCTION_DECODE_FAILURE
0000142E  43F9 00001D96            480          LEA        ADDQ_MSG, A1
00001434  103C 000E                481          MOVE.B      #14, D0
00001438  4E4F                     482          TRAP        #15
0000143A  4EB9 0000193A            483          JSR        ADDQ_EA_SIZE_AND_EA
00001440  4E75                     484          RTS
00001442                           485  
00001442                           486  OP_CODE_OR:
00001442                           487          *check for divu/other opcodes that start with 1000
00001442                           488          *isolate bits 8-6 to check for DIVU
00001442  2803                     489          MOVE.L      D3,     D4
00001444  7407                     490          MOVE.L      #7,     D2
00001446  E56C                     491          LSL.W       D2,     D4
00001448  740D                     492          MOVE.L      #13,    D2
0000144A  E46C                     493          LSR.W       D2,     D4
0000144C                           494          
0000144C  B83C 0003                495          CMP.B       #$3,    D4
00001450  6700 0010                496          BEQ         OP_CODE_DATA
00001454                           497          
00001454  43F9 00001D80            498          LEA         OR_MSG, A1
0000145A  103C 000E                499          MOVE.B      #14, D0
0000145E  4E4F                     500          TRAP        #15
00001460                           501          
00001460  4E75                     502          RTS
00001462                           503  OP_CODE_DATA:
00001462  43F9 00001D83            504          LEA         DATA_MSG, A1
00001468  103C 000E                505          MOVE.B      #14, D0
0000146C  4E4F                     506          TRAP        #15
0000146E                           507          
0000146E  4E75                     508          RTS   
00001470                           509  
00001470                           510  
00001470                           511  OP_CODE_SHIFT_ROTATE
00001470                           512          *Now check whether it is register shift or memory shift
00001470                           513          *If the 6-7 bit is 11, then it is a memory else register shift
00001470  48E7 0600                514          MOVEM.L    D5-D6, -(A7)
00001474  7A06                     515          MOVE.L     #6, D5
00001476  7C07                     516          MOVE.L     #7, D6
00001478  4EB9 000015A2            517          JSR        GET_BIT
0000147E  4CDF 0060                518          MOVEM.L    (A7)+, D5-D6
00001482  B8BC 00000003            519          CMP.L      #3, D4
00001488  6700 0056                520          BEQ        OP_CODE_MEMORY_SHIFT_ROTATE
0000148C  6000 0002                521          BRA        OP_CODE_REGISTER_SHIFT_ROTATE
00001490                           522  
00001490                           523  
00001490                           524  OP_CODE_REGISTER_SHIFT_ROTATE
00001490                           525          *Messages are loaded in the order of -ASR, ASL, LSR, LSL, RORX, RORL, ROR, ROL where
00001490                           526          *each message is of 4 bytes. Essentially using a combination of (9-11) bit + dr(8th bit) we
00001490                           527          *can index the appropriate message. Mathy and unreadable code but prevents lot of rebudency
00001490  43F9 00001D60            528          LEA        ASR_MSG, A1
00001496  48E7 0600                529          MOVEM.L    D5-D6, -(A7)
0000149A  7A08                     530          MOVE.L     #8, D5
0000149C  7C08                     531          MOVE.L     #8, D6
0000149E  4EB9 000015A2            532          JSR        GET_BIT
000014A4  4CDF 0060                533          MOVEM.L    (A7)+, D5-D6
000014A8  C8FC 0004                534          MULU         #4,            D4
000014AC  D3C4                     535          ADDA.L       D4,            A1
000014AE                           536          *Check (3, 11) bit 
000014AE                           537          *000->ASR/ASL, 001->LSR/LSL, 011->ROR/ROL
000014AE  48E7 0600                538          MOVEM.L    D5-D6, -(A7)
000014B2  7A03                     539          MOVE.L     #3, D5
000014B4  7C04                     540          MOVE.L     #4, D6
000014B6  4EB9 000015A2            541          JSR        GET_BIT
000014BC  B8BC 00000002            542          CMP.L      #2, D4
000014C2  4CDF 0060                543          MOVEM.L    (A7)+, D5-D6
000014C6  C8FC 0008                544          MULU        #8,      D4
000014CA  D3C4                     545          ADDA.L       D4,            A1
000014CC  103C 000E                546          MOVE.B      #14, D0
000014D0  4E4F                     547          TRAP        #15
000014D2  4EB9 000015F0            548          JSR         SHIFT_ROTATE_EA_SIZE
000014D8  4EB9 00001620            549          JSR         SHIFT_ROTATE_EA_REGISTER
000014DE  4E75                     550          RTS
000014E0                           551  
000014E0                           552  
000014E0                           553  OP_CODE_MEMORY_SHIFT_ROTATE
000014E0                           554          *If mode bits are less than 010, then invalid instruction so just RTS
000014E0  48E7 0600                555          MOVEM.L    D5-D6, -(A7)
000014E4  7A03                     556          MOVE.L     #3, D5
000014E6  7C05                     557          MOVE.L     #5, D6
000014E8  4EB9 000015A2            558          JSR        GET_BIT
000014EE  4CDF 0060                559          MOVEM.L    (A7)+, D5-D6
000014F2  B8BC 00000002            560          CMP.L      #2, D4
000014F8  6B00 00BC                561          BMI        INSTRUCTION_DECODE_FAILURE
000014FC                           562          *If mode bits are 101 or 110, then it is dispacement address register EA which is invalid
000014FC                           563          *for the current scope
000014FC  B8BC 00000005            564          CMP.L      #5, D4
00001502  6700 00B2                565          BEQ        INSTRUCTION_DECODE_FAILURE
00001506  B8BC 00000006            566          CMP.L      #6, D4
0000150C  6700 00A8                567          BEQ        INSTRUCTION_DECODE_FAILURE
00001510                           568          *If mode bits+register bits are greater than 111001, then invalid instruction
00001510  48E7 0600                569          MOVEM.L    D5-D6, -(A7)
00001514  7A00                     570          MOVE.L     #0, D5
00001516  7C05                     571          MOVE.L     #5, D6
00001518  4EB9 000015A2            572          JSR        GET_BIT
0000151E  4CDF 0060                573          MOVEM.L    (A7)+, D5-D6
00001522  B8BC 00000039            574          CMP.L      #%111001, D4
00001528  6E00 008C                575          BGT        INSTRUCTION_DECODE_FAILURE
0000152C  7A09                     576          MOVE.L     #9, D5
0000152E  7C0B                     577          MOVE.L     #11, D6
00001530  4EB9 000015A2            578          JSR        GET_BIT
00001536  B8BC 00000002            579          CMP.L      #2, D4
0000153C  6700 0078                580          BEQ        INSTRUCTION_DECODE_FAILURE *If the 9-11 are 010(RORX, ROLX), instruction decode error.
00001540                           581          *Messages are loaded in the order of -ASR, ASL, LSR, LSL, RORX, RORL, ROR, ROL where
00001540                           582          *each message is of 4 bytes. Essentially using a combination of (9-11) bit + dr(8th bit) we
00001540                           583          *can index the appropriate message. Mathy and unreadable code but prevents lot of rebudency
00001540  43F9 00001D60            584          LEA        ASR_MSG, A1
00001546  48E7 0600                585          MOVEM.L    D5-D6, -(A7)
0000154A  7A08                     586          MOVE.L     #8, D5
0000154C  7C08                     587          MOVE.L     #8, D6
0000154E  4EB9 000015A2            588          JSR        GET_BIT
00001554  4CDF 0060                589          MOVEM.L    (A7)+, D5-D6
00001558  C8FC 0004                590          MULU         #4,            D4
0000155C  D3C4                     591          ADDA.L       D4,            A1
0000155E                           592          *Check (9, 11) bit 
0000155E                           593          *000->ASR/ASL, 001->LSR/LSL, 011->ROR/ROL
0000155E  48E7 0600                594          MOVEM.L    D5-D6, -(A7)
00001562  7A09                     595          MOVE.L     #9, D5
00001564  7C0B                     596          MOVE.L     #11, D6
00001566  4EB9 000015A2            597          JSR        GET_BIT
0000156C  B8BC 00000002            598          CMP.L      #2, D4
00001572  4CDF 0060                599          MOVEM.L    (A7)+, D5-D6
00001576  C8FC 0008                600          MULU        #8,      D4
0000157A  D3C4                     601          ADDA.L       D4,            A1
0000157C  103C 000E                602          MOVE.B      #14, D0
00001580  4E4F                     603          TRAP        #15
00001582  43F9 00001DA3            604          LEA        WORD_MSG, A1
00001588  103C 000E                605          MOVE.B      #14, D0
0000158C  4E4F                     606          TRAP        #15
0000158E  43F9 00001D1E            607          LEA         SPACE_MSG,      A1
00001594  103C 000E                608          MOVE.B      #14,            D0    
00001598  4E4F                     609          TRAP        #15
0000159A  4EB9 00001704            610          JSR         SHIFT_ROTATE_EA_MEMORY
000015A0  4E75                     611          RTS
000015A2                           612  
000015A2                           613  
000015A2                           614  
000015A2                           615  GET_BIT
000015A2  4284                     616          CLR.L   D4
000015A4  3803                     617          MOVE.W  D3, D4   
000015A6                           618          *Shift it to left by 15-y to get rid of all the bits to the left of yth bit 
000015A6                           619          *and then shift the bits such that the xth bit is the 0th bit
000015A6  4486                     620          NEG.L   D6
000015A8  0686 0000000F            621          ADDI.L  #15, D6
000015AE  DA86                     622          ADD.L   D6, D5
000015B0  ED6C                     623          LSL.W   D6, D4
000015B2  EA6C                     624          LSR.W   D5, D4
000015B4  4E75                     625          RTS
000015B6                           626  
000015B6                           627  INSTRUCTION_DECODE_FAILURE
000015B6  3803                     628          MOVE.W  D3, D4
000015B8  43F9 00001D83            629          LEA DATA_MSG, A1
000015BE  103C 000E                630          MOVE.B      #14, D0
000015C2  4E4F                     631          TRAP        #15
000015C4  43F9 00001D1E            632          LEA SPACE_MSG, A1
000015CA  103C 000E                633          MOVE.B      #14, D0
000015CE  4E4F                     634          TRAP        #15
000015D0  43F9 00001DAB            635          LEA DOLLAR_MSG, A1
000015D6  103C 000E                636          MOVE.B      #14, D0
000015DA  4E4F                     637          TRAP        #15
000015DC  4EB9 00001BEE            638          JSR PRINT_WORD_VALUE
000015E2  43F9 00001DB7            639          LEA NEW_LINE, A1
000015E8  103C 000E                640          MOVE.B      #14, D0
000015EC  4E4F                     641          TRAP        #15
000015EE  4E75                     642          RTS
000015F0                           643  
000015F0                           644  
000015F0                           645  
000015F0                           646  
000015F0                           647  -------------------- end include --------------------
000015F0                           648      *INCLUDE         'demo_test.x68'
000015F0                           649      INCLUDE          'Disassembler_EA.x68'
000015F0                           650  
000015F0                           651  
000015F0                           652  
000015F0                           653  
000015F0                           654  SHIFT_ROTATE_EA_SIZE
000015F0  48E7 0600                655      MOVEM.L    D5-D6, -(A7)
000015F4  7A06                     656      MOVE.L     #6, D5
000015F6  7C07                     657      MOVE.L     #7, D6
000015F8  4EB8 15A2                658      JSR        GET_BIT
000015FC  4CDF 0060                659      MOVEM.L    (A7)+, D5-D6
00001600  43F9 00001DA0            660      LEA        BYTE_MSG, A1
00001606  C8FC 0003                661      MULU       #3, D4
0000160A  D3C4                     662      ADDA.L       D4,  A1
0000160C  103C 000E                663      MOVE.B      #14, D0
00001610  4E4F                     664      TRAP        #15
00001612  43F9 00001D1E            665      LEA         SPACE_MSG,      A1
00001618  103C 000E                666      MOVE.B      #14,            D0    
0000161C  4E4F                     667      TRAP        #15
0000161E  4E75                     668      RTS
00001620                           669  
00001620                           670  
00001620                           671  
00001620                           672  
00001620                           673  SHIFT_ROTATE_EA_REGISTER
00001620  48E7 0600                674      MOVEM.L    D5-D6, -(A7)
00001624  7A05                     675      MOVE.L     #5, D5
00001626  7C05                     676      MOVE.L     #5, D6
00001628  4EB8 15A2                677      JSR        GET_BIT
0000162C  4CDF 0060                678      MOVEM.L    (A7)+, D5-D6
00001630  B8BC 00000001            679      CMP.L      #1,  D4
00001636  6600 0070                680      BNE        SHIFT_ROTATE_IMM_SOURCE
0000163A                           681  
0000163A                           682  SHIFT_ROTATE_REGISTER_SOURCE
0000163A  43F9 00001D3B            683      LEA        D_MSG, A1
00001640  103C 000E                684      MOVE.B      #14,   D0    
00001644  4E4F                     685      TRAP        #15
00001646  48E7 0600                686      MOVEM.L    D5-D6, -(A7)
0000164A  7A09                     687      MOVE.L     #9, D5
0000164C  7C0B                     688      MOVE.L     #11, D6
0000164E  4EB8 15A2                689      JSR        GET_BIT
00001652  4CDF 0060                690      MOVEM.L    (A7)+, D5-D6
00001656  43F9 00001D21            691      LEA       ZERO_MSG, A1
0000165C  C8FC 0002                692      MULU      #2, D4    
00001660  D3C4                     693      ADDA.L    D4, A1
00001662  103C 000E                694      MOVE.B      #14,   D0    
00001666  4E4F                     695      TRAP        #15
00001668  6000 0002                696      BRA       SHIFT_ROTATE_REGISTER_DEST
0000166C                           697  
0000166C                           698  SHIFT_ROTATE_REGISTER_DEST
0000166C  43F9 00001DA9            699      LEA        COMMA_MSG, A1    
00001672  103C 000E                700      MOVE.B      #14,   D0    
00001676  4E4F                     701      TRAP        #15
00001678  43F9 00001D3B            702      LEA        D_MSG, A1
0000167E  103C 000E                703      MOVE.B      #14,   D0    
00001682  4E4F                     704      TRAP        #15
00001684  48E7 0600                705      MOVEM.L    D5-D6, -(A7)
00001688  7A00                     706      MOVE.L     #0, D5
0000168A  7C02                     707      MOVE.L     #2, D6
0000168C  4EB8 15A2                708      JSR        GET_BIT
00001690  4CDF 0060                709      MOVEM.L    (A7)+, D5-D6
00001694  43F9 00001D21            710      LEA       ZERO_MSG, A1
0000169A  C8FC 0002                711      MULU      #2, D4    
0000169E  D3C4                     712      ADDA.L    D4, A1
000016A0  103C 000E                713      MOVE.B      #14,   D0    
000016A4  4E4F                     714      TRAP        #15
000016A6  4E75                     715      RTS
000016A8                           716  
000016A8                           717  SHIFT_ROTATE_IMM_SOURCE
000016A8  43F9 00001DAD            718      LEA        HASH_MSG, A1
000016AE  103C 000E                719      MOVE.B      #14,   D0    
000016B2  4E4F                     720      TRAP        #15
000016B4  43F9 00001DAB            721      LEA        DOLLAR_MSG, A1
000016BA  103C 000E                722      MOVE.B      #14,   D0    
000016BE  4E4F                     723      TRAP        #15
000016C0  48E7 0600                724      MOVEM.L    D5-D6, -(A7)
000016C4  7A09                     725      MOVE.L     #9, D5
000016C6  7C0B                     726      MOVE.L     #11, D6
000016C8  4EB8 15A2                727      JSR        GET_BIT
000016CC  4CDF 0060                728      MOVEM.L    (A7)+, D5-D6
000016D0  B8BC 00000000            729      CMP.L      #0, D4
000016D6  6700 001C                730      BEQ       SHIFT_ROTATE_COUNT_8
000016DA  6000 0002                731      BRA       SHIFT_ROTATE_COUNT_1_7
000016DE                           732   
000016DE                           733  SHIFT_ROTATE_COUNT_1_7
000016DE  43F9 00001D21            734      LEA       ZERO_MSG, A1
000016E4  C8FC 0002                735      MULU      #2, D4    
000016E8  D3C4                     736      ADDA.L    D4, A1
000016EA  103C 000E                737      MOVE.B      #14,   D0    
000016EE  4E4F                     738      TRAP        #15
000016F0  6000 FF7A                739      BRA       SHIFT_ROTATE_REGISTER_DEST
000016F4                           740  
000016F4                           741  SHIFT_ROTATE_COUNT_8
000016F4  43F9 00001D31            742      LEA       EIGHT_MSG, A1
000016FA  103C 000E                743      MOVE.B      #14,   D0    
000016FE  4E4F                     744      TRAP        #15
00001700  6000 FF6A                745      BRA       SHIFT_ROTATE_REGISTER_DEST
00001704                           746  
00001704                           747  
00001704                           748  
00001704                           749  
00001704                           750  
00001704                           751  SHIFT_ROTATE_EA_MEMORY
00001704  48E7 0600                752      MOVEM.L    D5-D6, -(A7)
00001708  7A00                     753      MOVE.L     #0, D5
0000170A  7C05                     754      MOVE.L     #5, D6
0000170C  4EB8 15A2                755      JSR        GET_BIT
00001710  4CDF 0060                756      MOVEM.L    (A7)+, D5-D6
00001714  48E7 1600                757      MOVEM.L    D3/D5-D6, -(A7)
00001718  2604                     758      MOVE.L     D4, D3
0000171A  4EB9 00001A14            759      JSR        GET_EA
00001720  4CDF 0068                760      MOVEM.L    (A7)+, D3/D5-D6
00001724  4E75                     761      RTS
00001726                           762  
00001726                           763  
00001726                           764  
00001726                           765  BR_EA_SIZE_AND_DISPLACEMENT
00001726  48E7 0600                766      MOVEM.L    D5-D6, -(A7)
0000172A  7A00                     767      MOVE.L     #0, D5
0000172C  7C07                     768      MOVE.L     #7, D6
0000172E  4EB8 15A2                769      JSR        GET_BIT
00001732  4CDF 0060                770      MOVEM.L    (A7)+, D5-D6
00001736  B8BC 00000000            771      CMP.L      #0, D4
0000173C  6700 0050                772      BEQ        BR_WORD_DISPLACEMENT
00001740                           773  BR_BYTE_DISPLACEMENT
00001740  43F9 00001DA0            774      LEA         BYTE_MSG, A1
00001746  103C 000E                775      MOVE.B      #14, D0
0000174A  4E4F                     776      TRAP        #15
0000174C  43F9 00001D1E            777      LEA         SPACE_MSG,   A1
00001752  103C 000E                778      MOVE.B      #14,   D0    
00001756  4E4F                     779      TRAP        #15
00001758  48E7 0400                780      MOVEM.L     D5, -(A7)
0000175C  2A04                     781      MOVE.L      D4, D5
0000175E  E31D                     782      ROL.B       #1, D5
00001760  0285 00000001            783      ANDI.L      #1, D5
00001766  BA3C 0001                784      CMP.B       #1, D5
0000176A  6700 0010                785      BEQ         NEG_BYTE_DISPLACEMENT
0000176E  4CDF 0020                786      MOVEM.L    (A7)+, D5
00001772  D88B                     787      ADD.L       A3, D4
00001774  4EB9 00001C1C            788      JSR         PRINT_LONG_VALUE
0000177A  4E75                     789      RTS
0000177C                           790  NEG_BYTE_DISPLACEMENT
0000177C  4CDF 0020                791      MOVEM.L    (A7)+, D5
00001780  4404                     792      NEG.B       D4
00001782  988B                     793      SUB.L       A3, D4
00001784  4484                     794      NEG.L       D4
00001786  4EB9 00001C1C            795      JSR         PRINT_LONG_VALUE
0000178C  4E75                     796      RTS
0000178E                           797  BR_WORD_DISPLACEMENT
0000178E  43F9 00001DA3            798      LEA         WORD_MSG, A1
00001794  103C 000E                799      MOVE.B      #14, D0
00001798  4E4F                     800      TRAP        #15
0000179A  43F9 00001D1E            801      LEA         SPACE_MSG,   A1
000017A0  103C 000E                802      MOVE.B      #14,   D0    
000017A4  4E4F                     803      TRAP        #15 
000017A6  4284                     804      CLR.L       D4
000017A8  381B                     805      MOVE.W      (A3)+, D4
000017AA  48E7 0400                806      MOVEM.L     D5, -(A7)
000017AE  2A04                     807      MOVE.L      D4, D5
000017B0  E35D                     808      ROL.W       #1, D5
000017B2  0285 00000001            809      ANDI.L      #1, D5
000017B8  BA3C 0001                810      CMP.B       #1, D5
000017BC  6700 0012                811      BEQ         NEG_WORD_DISPLACEMENT
000017C0  4CDF 0020                812      MOVEM.L    (A7)+, D5
000017C4  D88B                     813      ADD.L       A3, D4
000017C6  5584                     814      SUB.L       #2, D4
000017C8  4EB9 00001C1C            815      JSR         PRINT_LONG_VALUE
000017CE  4E75                     816      RTS
000017D0                           817  NEG_WORD_DISPLACEMENT
000017D0  4CDF 0020                818      MOVEM.L    (A7)+, D5
000017D4  4444                     819      NEG.W       D4
000017D6  988B                     820      SUB.L       A3, D4
000017D8  4484                     821      NEG.L       D4
000017DA  5584                     822      SUB.L       #2, D4
000017DC  4EB9 00001C1C            823      JSR         PRINT_LONG_VALUE
000017E2  4E75                     824      RTS
000017E4                           825  
000017E4                           826  
000017E4                           827  
000017E4                           828  
000017E4                           829  
000017E4                           830  LEA_EA
000017E4                           831      *Prints the source operand
000017E4  48E7 0600                832      MOVEM.L    D5-D6, -(A7)
000017E8  7A00                     833      MOVE.L     #0, D5
000017EA  7C05                     834      MOVE.L     #5, D6
000017EC  4EB8 15A2                835      JSR        GET_BIT
000017F0  4CDF 0060                836      MOVEM.L    (A7)+, D5-D6
000017F4  48E7 1600                837      MOVEM.L    D3/D5-D6, -(A7)
000017F8  2604                     838      MOVE.L     D4, D3
000017FA  4EB9 00001A14            839      JSR        GET_EA
00001800  4CDF 0068                840      MOVEM.L    (A7)+, D3/D5-D6
00001804                           841  
00001804  43F9 00001DA9            842      LEA        COMMA_MSG, A1
0000180A  103C 000E                843      MOVE.B      #14,   D0    
0000180E  4E4F                     844      TRAP        #15
00001810                           845  
00001810                           846      *Prints the dest operand
00001810  43F9 00001D35            847      LEA        A_MSG, A1
00001816  103C 000E                848      MOVE.B      #14,   D0    
0000181A  4E4F                     849      TRAP        #15
0000181C  48E7 0600                850      MOVEM.L    D5-D6, -(A7)
00001820  7A09                     851      MOVE.L     #9, D5
00001822  7C0B                     852      MOVE.L     #11, D6
00001824  4EB8 15A2                853      JSR        GET_BIT
00001828  4CDF 0060                854      MOVEM.L    (A7)+, D5-D6
0000182C  43F9 00001D21            855      LEA       ZERO_MSG, A1
00001832  C8FC 0002                856      MULU      #2, D4    
00001836  D3C4                     857      ADDA.L    D4, A1
00001838  103C 000E                858      MOVE.B      #14,   D0    
0000183C  4E4F                     859      TRAP        #15
0000183E  4E75                     860      RTS
00001840                           861  
00001840                           862  
00001840                           863  
00001840                           864  
00001840                           865  ADDA_EA_SIZE_AND_EA 
00001840  48E7 0600                866      MOVEM.L    D5-D6, -(A7)
00001844  7A08                     867      MOVE.L     #8, D5
00001846  7C08                     868      MOVE.L     #8, D6
00001848  4EB8 15A2                869      JSR        GET_BIT
0000184C  4CDF 0060                870      MOVEM.L    (A7)+, D5-D6
00001850  43F9 00001DA3            871      LEA        WORD_MSG, A1
00001856  C8FC 0003                872      MULU       #3, D4
0000185A  D3C4                     873      ADDA.L     D4, A1
0000185C  103C 000E                874      MOVE.B      #14, D0
00001860  4E4F                     875      TRAP        #15
00001862                           876  
00001862  43F9 00001D1E            877      LEA         SPACE_MSG,   A1
00001868  103C 000E                878      MOVE.B      #14,   D0    
0000186C  4E4F                     879      TRAP        #15
0000186E                           880  
0000186E  48E7 0600                881      MOVEM.L    D5-D6, -(A7)
00001872  7A00                     882      MOVE.L     #0, D5
00001874  7C05                     883      MOVE.L     #5, D6
00001876  4EB8 15A2                884      JSR        GET_BIT
0000187A  4CDF 0060                885      MOVEM.L    (A7)+, D5-D6
0000187E  B8BC 0000003C            886      CMP.L      #%111100, D4
00001884  6700 0022                887      BEQ        ADDA_EA_IMM_SOURCE
00001888                           888  ADDA_EA_NON_IMM_SOURCE
00001888  48E7 1600                889      MOVEM.L    D3/D5-D6, -(A7)
0000188C  2604                     890      MOVE.L     D4, D3     
0000188E  4EB9 00001A14            891      JSR        GET_EA
00001894  43F9 00001DA9            892      LEA         COMMA_MSG,   A1
0000189A  103C 000E                893      MOVE.B      #14,   D0    
0000189E  4E4F                     894      TRAP        #15
000018A0  4CDF 0068                895      MOVEM.L    (A7)+, D3/D5-D6
000018A4  6000 0064                896      BRA        ADDA_EA_DEST
000018A8                           897  ADDA_EA_IMM_SOURCE
000018A8  43F9 00001DAD            898      LEA        HASH_MSG, A1
000018AE  103C 000E                899      MOVE.B      #14,   D0    
000018B2  4E4F                     900      TRAP        #15
000018B4  43F9 00001DAB            901      LEA        DOLLAR_MSG, A1
000018BA  103C 000E                902      MOVE.B      #14,   D0    
000018BE  4E4F                     903      TRAP        #15
000018C0  48E7 0600                904      MOVEM.L    D5-D6, -(A7)
000018C4  7A06                     905      MOVE.L     #6, D5
000018C6  7C08                     906      MOVE.L     #8, D6
000018C8  4EB8 15A2                907      JSR        GET_BIT
000018CC  4CDF 0060                908      MOVEM.L    (A7)+, D5-D6
000018D0  B8BC 00000003            909      CMP.L      #%011, D4
000018D6  6700 001A                910      BEQ        ADDA_EA_IMM_WORD
000018DA                           911  ADDA_EA_IMM_LONG
000018DA  281B                     912      MOVE.L     (A3)+, D4
000018DC  4EB9 00001C1C            913      JSR        PRINT_LONG_VALUE
000018E2                           914  
000018E2  43F9 00001DA9            915      LEA         COMMA_MSG,   A1
000018E8  103C 000E                916      MOVE.B      #14,   D0    
000018EC  4E4F                     917      TRAP        #15
000018EE  6000 001A                918      BRA         ADDA_EA_DEST
000018F2                           919  ADDA_EA_IMM_WORD
000018F2  381B                     920      MOVE.W     (A3)+, D4
000018F4  4EB9 00001BEE            921      JSR        PRINT_WORD_VALUE
000018FA                           922  
000018FA  43F9 00001DA9            923      LEA         COMMA_MSG,   A1
00001900  103C 000E                924      MOVE.B      #14,   D0    
00001904  4E4F                     925      TRAP        #15
00001906  6000 0002                926      BRA         ADDA_EA_DEST
0000190A                           927  
0000190A                           928  ADDA_EA_DEST   
0000190A  48E7 0600                929      MOVEM.L    D5-D6, -(A7)
0000190E  7A09                     930      MOVE.L     #9, D5
00001910  7C0B                     931      MOVE.L     #11, D6
00001912  4EB8 15A2                932      JSR        GET_BIT
00001916  4CDF 0060                933      MOVEM.L    (A7)+, D5-D6
0000191A  43F9 00001D35            934      LEA   A_MSG, A1
00001920  103C 000E                935      MOVE.B   #14,  D0    
00001924  4E4F                     936      TRAP     #15
00001926  43F9 00001D21            937      LEA    ZERO_MSG, A1
0000192C  C8FC 0002                938      MULU       #2, D4
00001930  D3C4                     939      ADDA.L     D4, A1
00001932  103C 000E                940      MOVE.B   #14,  D0    
00001936  4E4F                     941      TRAP     #15
00001938  4E75                     942      RTS
0000193A                           943  
0000193A                           944  
0000193A                           945  
0000193A                           946  
0000193A                           947  ADDQ_EA_SIZE_AND_EA
0000193A  48E7 0600                948      MOVEM.L    D5-D6, -(A7)
0000193E  7A06                     949      MOVE.L     #6, D5
00001940  7C07                     950      MOVE.L     #7, D6
00001942  4EB8 15A2                951      JSR        GET_BIT
00001946  4CDF 0060                952      MOVEM.L    (A7)+, D5-D6
0000194A  43F9 00001DA0            953      LEA        BYTE_MSG, A1
00001950  C8FC 0003                954      MULU       #3, D4
00001954  D3C4                     955      ADDA.L       D4,  A1
00001956  103C 000E                956      MOVE.B      #14, D0
0000195A  4E4F                     957      TRAP        #15
0000195C  43F9 00001D1E            958      LEA         SPACE_MSG,      A1
00001962  103C 000E                959      MOVE.B      #14,            D0    
00001966  4E4F                     960      TRAP        #15
00001968                           961  
00001968  48E7 0600                962      MOVEM.L    D5-D6, -(A7)
0000196C  7A09                     963      MOVE.L     #9, D5
0000196E  7C0B                     964      MOVE.L     #11, D6
00001970  4EB8 15A2                965      JSR        GET_BIT
00001974  4CDF 0060                966      MOVEM.L    (A7)+, D5-D6
00001978  43F9 00001DAD            967      LEA        HASH_MSG, A1
0000197E  103C 000E                968      MOVE.B      #14,   D0    
00001982  4E4F                     969      TRAP        #15
00001984  43F9 00001DAB            970      LEA        DOLLAR_MSG, A1
0000198A  103C 000E                971      MOVE.B      #14,   D0    
0000198E  4E4F                     972      TRAP        #15
00001990  B8BC 00000000            973      CMP.L      #0, D4
00001996  6700 0042                974      BEQ       ADDQ_ADD_COUNT_8
0000199A                           975  
0000199A                           976  ADDQ_ADD_COUNT_1_7
0000199A  43F9 00001D21            977      LEA       ZERO_MSG, A1
000019A0  C8FC 0002                978      MULU      #2, D4    
000019A4  D3C4                     979      ADDA.L    D4, A1
000019A6  103C 000E                980      MOVE.B      #14,   D0    
000019AA  4E4F                     981      TRAP        #15
000019AC  43F9 00001DA9            982      LEA         COMMA_MSG,   A1
000019B2  103C 000E                983      MOVE.B      #14,   D0    
000019B6  4E4F                     984      TRAP        #15
000019B8  48E7 0600                985      MOVEM.L    D5-D6, -(A7)
000019BC  7A00                     986      MOVE.L     #0, D5
000019BE  7C05                     987      MOVE.L     #5, D6
000019C0  4EB8 15A2                988      JSR        GET_BIT
000019C4  4CDF 0060                989      MOVEM.L    (A7)+, D5-D6
000019C8  48E7 1600                990      MOVEM.L    D3/D5-D6, -(A7)
000019CC  2604                     991      MOVE.L     D4, D3
000019CE  4EB9 00001A14            992      JSR        GET_EA
000019D4  4CDF 0068                993      MOVEM.L    (A7)+, D3/D5-D6
000019D8  4E75                     994      RTS
000019DA                           995  
000019DA                           996  ADDQ_ADD_COUNT_8
000019DA  43F9 00001D31            997      LEA       EIGHT_MSG, A1
000019E0  103C 000E                998      MOVE.B      #14,   D0    
000019E4  4E4F                     999      TRAP        #15
000019E6  43F9 00001DA9           1000      LEA         COMMA_MSG,   A1
000019EC  103C 000E               1001      MOVE.B      #14,   D0    
000019F0  4E4F                    1002      TRAP        #15
000019F2  48E7 0600               1003      MOVEM.L    D5-D6, -(A7)
000019F6  7A00                    1004      MOVE.L     #0, D5
000019F8  7C05                    1005      MOVE.L     #5, D6
000019FA  4EB8 15A2               1006      JSR        GET_BIT
000019FE  4CDF 0060               1007      MOVEM.L    (A7)+, D5-D6
00001A02  48E7 1600               1008      MOVEM.L    D3/D5-D6, -(A7)
00001A06  2604                    1009      MOVE.L     D4, D3   
00001A08  4EB9 00001A14           1010      JSR        GET_EA
00001A0E  4CDF 0068               1011      MOVEM.L    (A7)+, D3/D5-D6
00001A12  4E75                    1012      RTS
00001A14                          1013  
00001A14                          1014  
00001A14                          1015  
00001A14                          1016  
00001A14                          1017  GET_EA
00001A14  7A03                    1018      MOVE.L     #3, D5
00001A16  7C05                    1019      MOVE.L     #5, D6
00001A18  4EB8 15A2               1020      JSR        GET_BIT
00001A1C  B8BC 00000000           1021      CMP.L      #0, D4
00001A22  6700 0048               1022      BEQ        EA_DATA_REGISTER
00001A26  B8BC 00000001           1023      CMP.L      #1, D4
00001A2C  6700 0066               1024      BEQ        EA_ADDR_REGISTER
00001A30  B8BC 00000002           1025      CMP.L      #2, D4
00001A36  6700 0084               1026      BEQ        EA_INDIRECT
00001A3A  B8BC 00000003           1027      CMP.L      #3, D4
00001A40  6700 00BA               1028      BEQ        EA_INDIRECT_INCREMENT
00001A44  B8BC 00000004           1029      CMP.L      #4, D4
00001A4A  6700 00FC               1030      BEQ        EA_INDIRECT_DECREMENT
00001A4E                          1031      *101, and 110 mode bits should be detected in disassembler_OPCodes 
00001A4E  7A00                    1032      MOVE.L     #0, D5
00001A50  7C02                    1033      MOVE.L     #2, D6
00001A52  4EB8 15A2               1034      JSR        GET_BIT
00001A56  B8BC 00000000           1035      CMP.L      #0, D4
00001A5C  6700 0136               1036      BEQ        EA_ABS_WORD
00001A60  B8BC 00000001           1037      CMP.L      #1, D4
00001A66  6700 0144               1038      BEQ        EA_ABS_LONG
00001A6A                          1039      *Unreachable
00001A6A  4E75                    1040      RTS
00001A6C                          1041      
00001A6C                          1042  
00001A6C                          1043  EA_DATA_REGISTER
00001A6C  43F9 00001D3B           1044      LEA   D_MSG, A1
00001A72  103C 000E               1045      MOVE.B   #14,  D0    
00001A76  4E4F                    1046      TRAP     #15
00001A78  43F9 00001D21           1047      LEA    ZERO_MSG, A1
00001A7E  7A00                    1048      MOVE.L     #0, D5
00001A80  7C02                    1049      MOVE.L     #2, D6
00001A82  4EB8 15A2               1050      JSR        GET_BIT
00001A86  C8FC 0002               1051      MULU       #2, D4
00001A8A  D3C4                    1052      ADDA.L     D4, A1
00001A8C  103C 000E               1053      MOVE.B   #14,  D0    
00001A90  4E4F                    1054      TRAP     #15
00001A92  4E75                    1055      RTS
00001A94                          1056  
00001A94                          1057  
00001A94                          1058  EA_ADDR_REGISTER
00001A94  43F9 00001D35           1059      LEA   A_MSG, A1
00001A9A  103C 000E               1060      MOVE.B   #14,  D0    
00001A9E  4E4F                    1061      TRAP     #15
00001AA0  43F9 00001D21           1062      LEA    ZERO_MSG, A1
00001AA6  7A00                    1063      MOVE.L     #0, D5
00001AA8  7C02                    1064      MOVE.L     #2, D6
00001AAA  4EB8 15A2               1065      JSR        GET_BIT
00001AAE  C8FC 0002               1066      MULU       #2, D4
00001AB2  D3C4                    1067      ADDA.L     D4, A1
00001AB4  103C 000E               1068      MOVE.B   #14,  D0    
00001AB8  4E4F                    1069      TRAP     #15
00001ABA  4E75                    1070      RTS
00001ABC                          1071  
00001ABC                          1072  
00001ABC                          1073  EA_INDIRECT
00001ABC  43F9 00001DB3           1074      LEA   OPEN_PARENTHESIS_MSG, A1
00001AC2  103C 000E               1075      MOVE.B   #14,  D0    
00001AC6  4E4F                    1076      TRAP     #15
00001AC8  43F9 00001D35           1077      LEA   A_MSG, A1
00001ACE  103C 000E               1078      MOVE.B   #14,  D0    
00001AD2  4E4F                    1079      TRAP     #15
00001AD4  43F9 00001D21           1080      LEA    ZERO_MSG, A1
00001ADA  7A00                    1081      MOVE.L     #0, D5
00001ADC  7C02                    1082      MOVE.L     #2, D6
00001ADE  4EB8 15A2               1083      JSR        GET_BIT
00001AE2  C8FC 0002               1084      MULU       #2, D4
00001AE6  D3C4                    1085      ADDA.L     D4, A1
00001AE8  103C 000E               1086      MOVE.B   #14,  D0    
00001AEC  4E4F                    1087      TRAP     #15
00001AEE  43F9 00001DB5           1088      LEA   CLOSE_PARENTHESIS_MSG, A1
00001AF4  103C 000E               1089      MOVE.B   #14,  D0    
00001AF8  4E4F                    1090      TRAP     #15
00001AFA  4E75                    1091      RTS
00001AFC                          1092  
00001AFC                          1093  
00001AFC                          1094  
00001AFC                          1095  EA_INDIRECT_INCREMENT
00001AFC  43F9 00001DB3           1096      LEA   OPEN_PARENTHESIS_MSG, A1
00001B02  103C 000E               1097      MOVE.B   #14,  D0    
00001B06  4E4F                    1098      TRAP     #15
00001B08  43F9 00001D35           1099      LEA   A_MSG, A1
00001B0E  103C 000E               1100      MOVE.B   #14,  D0    
00001B12  4E4F                    1101      TRAP     #15
00001B14  43F9 00001D21           1102      LEA    ZERO_MSG, A1
00001B1A  7A00                    1103      MOVE.L     #0, D5
00001B1C  7C02                    1104      MOVE.L     #2, D6
00001B1E  4EB8 15A2               1105      JSR        GET_BIT
00001B22  C8FC 0002               1106      MULU       #2, D4
00001B26  D3C4                    1107      ADDA.L     D4, A1
00001B28  103C 000E               1108      MOVE.B   #14,  D0    
00001B2C  4E4F                    1109      TRAP     #15
00001B2E  43F9 00001DB5           1110      LEA   CLOSE_PARENTHESIS_MSG, A1
00001B34  103C 000E               1111      MOVE.B   #14,  D0    
00001B38  4E4F                    1112      TRAP     #15
00001B3A  43F9 00001DAF           1113      LEA   PLUS_MSG, A1
00001B40  103C 000E               1114      MOVE.B   #14,  D0    
00001B44  4E4F                    1115      TRAP     #15
00001B46  4E75                    1116      RTS
00001B48                          1117  
00001B48                          1118  
00001B48                          1119  EA_INDIRECT_DECREMENT
00001B48  43F9 00001DB1           1120      LEA   MINUS_MSG, A1
00001B4E  103C 000E               1121      MOVE.B   #14,  D0    
00001B52  4E4F                    1122      TRAP     #15
00001B54  43F9 00001DB3           1123      LEA   OPEN_PARENTHESIS_MSG, A1
00001B5A  103C 000E               1124      MOVE.B   #14,  D0    
00001B5E  4E4F                    1125      TRAP     #15
00001B60  43F9 00001D35           1126      LEA   A_MSG, A1
00001B66  103C 000E               1127      MOVE.B   #14,  D0    
00001B6A  4E4F                    1128      TRAP     #15
00001B6C  43F9 00001D21           1129      LEA    ZERO_MSG, A1
00001B72  7A00                    1130      MOVE.L     #0, D5
00001B74  7C02                    1131      MOVE.L     #2, D6
00001B76  4EB8 15A2               1132      JSR        GET_BIT
00001B7A  C8FC 0002               1133      MULU       #2, D4
00001B7E  D3C4                    1134      ADDA.L     D4, A1
00001B80  103C 000E               1135      MOVE.B   #14,  D0    
00001B84  4E4F                    1136      TRAP     #15
00001B86  43F9 00001DB5           1137      LEA   CLOSE_PARENTHESIS_MSG, A1
00001B8C  103C 000E               1138      MOVE.B   #14,  D0    
00001B90  4E4F                    1139      TRAP     #15
00001B92  4E75                    1140      RTS
00001B94                          1141  
00001B94                          1142  
00001B94                          1143  
00001B94                          1144  EA_ABS_WORD
00001B94  4284                    1145      CLR.L      D4
00001B96  381B                    1146      MOVE.W     (A3)+, D4
00001B98  43F9 00001DAB           1147      LEA        DOLLAR_MSG,       A1
00001B9E  103C 000E               1148      MOVE.B      #14,            D0    
00001BA2  4E4F                    1149      TRAP        #15
00001BA4  4EB9 00001BEE           1150      JSR        PRINT_WORD_VALUE
00001BAA  4E75                    1151      RTS
00001BAC                          1152  
00001BAC                          1153  EA_ABS_LONG
00001BAC  281B                    1154      MOVE.L    (A3)+, D4
00001BAE  43F9 00001DAB           1155      LEA        DOLLAR_MSG,       A1
00001BB4  103C 000E               1156      MOVE.B      #14,            D0    
00001BB8  4E4F                    1157      TRAP        #15
00001BBA  4EB9 00001C1C           1158      JSR        PRINT_LONG_VALUE
00001BC0  4E75                    1159      RTS
00001BC2                          1160  
00001BC2                          1161  
00001BC2                          1162  
00001BC2                          1163  
00001BC2                          1164  PRINT_BYTE_VALUE
00001BC2  48E7 0600               1165          MOVEM.L    D5-D6, -(A7)
00001BC6  7C02                    1166          MOVE.L     #2, D6
00001BC8                          1167  PRINT_BYTE_VALUE_LOOP
00001BC8                          1168          *Gets the most significant bit basically
00001BC8                          1169          *Could use GET_BIT subroutine but it is 
00001BC8                          1170          *costly in terms of registers used
00001BC8  1A04                    1171          MOVE.B     D4, D5
00001BCA  E80D                    1172          LSR.B      #4, D5
00001BCC  E90C                    1173          LSL.B      #4, D4
00001BCE  43F9 00001D21           1174          LEA        ZERO_MSG,      A1
00001BD4                          1175          * load the address of Zero_msg
00001BD4                          1176          * because all of the msgs are stored next to each other in order
00001BD4                          1177          * we can simply take the value isolated from the number, multiply it by 2 (msg's take up 2 bytes)
00001BD4                          1178          * and then add it to the address starting at zero_msg
00001BD4  CAFC 0002               1179          MULU         #2,            D5
00001BD8  D3C5                    1180          ADDA.L       D5,            A1
00001BDA  103C 000E               1181          MOVE.B      #14, D0
00001BDE  4E4F                    1182          TRAP        #15
00001BE0  5386                    1183          SUBI.L      #1, D6
00001BE2  BC3C 0000               1184          CMP.B       #0, D6
00001BE6  66E0                    1185          BNE         PRINT_BYTE_VALUE_LOOP
00001BE8  4CDF 0060               1186          MOVEM.L    (A7)+, D5-D6
00001BEC  4E75                    1187          RTS
00001BEE                          1188  
00001BEE                          1189  
00001BEE                          1190  
00001BEE                          1191  PRINT_WORD_VALUE
00001BEE  48E7 0600               1192          MOVEM.L    D5-D6, -(A7)
00001BF2  7C04                    1193          MOVE.L     #4, D6
00001BF4                          1194  PRINT_WORD_VALUE_LOOP
00001BF4                          1195          *Gets the most significant bit basically
00001BF4                          1196          *Could use GET_BIT subroutine but it is 
00001BF4                          1197          *costly in terms of registers used
00001BF4  3A04                    1198          MOVE.W     D4, D5
00001BF6  EC4D                    1199          LSR.W      #6, D5
00001BF8  EC4D                    1200          LSR.W      #6, D5
00001BFA  E94C                    1201          LSL.W      #4, D4
00001BFC  43F9 00001D21           1202          LEA        ZERO_MSG,      A1
00001C02                          1203          * load the address of Zero_msg
00001C02                          1204          * because all of the msgs are stored next to each other in order
00001C02                          1205          * we can simply take the value isolated from the number, multiply it by 2 (msg's take up 2 bytes)
00001C02                          1206          * and then add it to the address starting at zero_msg
00001C02  CAFC 0002               1207          MULU         #2,            D5
00001C06  D3C5                    1208          ADDA.L       D5,            A1
00001C08  103C 000E               1209          MOVE.B      #14, D0
00001C0C  4E4F                    1210          TRAP        #15
00001C0E  5386                    1211          SUBI.L      #1, D6
00001C10  BC3C 0000               1212          CMP.B       #0, D6
00001C14  66DE                    1213          BNE         PRINT_WORD_VALUE_LOOP
00001C16  4CDF 0060               1214          MOVEM.L    (A7)+, D5-D6
00001C1A  4E75                    1215          RTS
00001C1C                          1216  
00001C1C                          1217  
00001C1C                          1218  PRINT_LONG_VALUE
00001C1C  48E7 0600               1219          MOVEM.L    D5-D6, -(A7)
00001C20  7C08                    1220          MOVE.L     #8, D6
00001C22                          1221  PRINT_LONG_VALUE_LOOP
00001C22                          1222          *Gets the most significant bit basically
00001C22                          1223          *Could use GET_BIT subroutine but it is 
00001C22                          1224          *costly in terms of registers used
00001C22  2A04                    1225          MOVE.L     D4, D5
00001C24  E08D                    1226          LSR.L      #8, D5
00001C26  E08D                    1227          LSR.L      #8, D5
00001C28  E08D                    1228          LSR.L      #8, D5
00001C2A  E88D                    1229          LSR.L      #4, D5
00001C2C  E98C                    1230          LSL.L      #4, D4
00001C2E  43F9 00001D21           1231          LEA        ZERO_MSG,      A1
00001C34                          1232          * load the address of Zero_msg
00001C34                          1233          * because all of the msgs are stored next to each other in order
00001C34                          1234          * we can simply take the value isolated from the number, multiply it by 2 (msg's take up 2 bytes)
00001C34                          1235          * and then add it to the address starting at zero_msg
00001C34  CAFC 0002               1236          MULU         #2,            D5
00001C38  D3C5                    1237          ADDA.L       D5,            A1
00001C3A  103C 000E               1238          MOVE.B      #14, D0
00001C3E  4E4F                    1239          TRAP        #15
00001C40  5386                    1240          SUBI.L      #1, D6
00001C42  BC3C 0000               1241          CMP.B       #0, D6
00001C46  66DA                    1242          BNE         PRINT_LONG_VALUE_LOOP
00001C48  4CDF 0060               1243          MOVEM.L    (A7)+, D5-D6
00001C4C  4E75                    1244          RTS
00001C4E                          1245  
00001C4E                          1246  
00001C4E                          1247   
00001C4E                          1248  -------------------- end include --------------------
00001C4E                          1249  
00001C4E                          1250  
00001C4E                          1251  * Put variables and constants here
00001C4E                          1252  
00001C4E= 57 65 6C 63 6F 6D ...   1253  INTRO_MSG:       DC.B       'Welcome to Team Cools Disassembler!',CR,LF,0
00001C74= 50 6C 65 61 73 65 ...   1254  STARTING_MSG:    DC.B       'Please enter the Starting Address',CR,LF,0
00001C98= 50 6C 65 61 73 65 ...   1255  ENDING_MSG:      DC.B       'Please enter the Ending Address',CR,LF,0
00001CBA= 44 6F 6E 65 20 52 ...   1256  GOODBYE_MSG:     DC.B       'Done Reading data',CR,LF,0
00001CCE                          1257  * CR and LF for strings above because we want to go to next line after printing message
00001CCE                          1258  
00001CCE                          1259  STA_ADDR         DS.B        40
00001CF6                          1260  END_ADDR         DS.B        40
00001D1E                          1261  
00001D1E                          1262  * no CR and LF for strings below because we want to print each number and letter
00001D1E                          1263  
00001D1E= 20 20 00                1264  SPACE_MSG:       DC.B        '  ',0
00001D21                          1265  
00001D21= 30 00                   1266  ZERO_MSG:        DC.B        '0',0
00001D23= 31 00                   1267  ONE_MSG:         DC.B        '1',0
00001D25= 32 00                   1268  TWO_MSG:         DC.B        '2',0
00001D27= 33 00                   1269  THREE_MSG:       DC.B        '3',0
00001D29= 34 00                   1270  FOUR_MSG:        DC.B        '4',0
00001D2B= 35 00                   1271  FIVE_MSG:        DC.B        '5',0
00001D2D= 36 00                   1272  SIX_MSG:         DC.B        '6',0
00001D2F= 37 00                   1273  SEVEN_MSG:       DC.B        '7',0
00001D31= 38 00                   1274  EIGHT_MSG:       DC.B        '8',0
00001D33= 39 00                   1275  NINE_MSG:        DC.B        '9',0
00001D35= 41 00                   1276  A_MSG:           DC.B        'A',0
00001D37= 42 00                   1277  B_MSG:           DC.B        'B',0
00001D39= 43 00                   1278  C_MSG:           DC.B        'C',0
00001D3B= 44 00                   1279  D_MSG:           DC.B        'D',0
00001D3D= 45 00                   1280  E_MSG:           DC.B        'E',0
00001D3F= 46 00                   1281  F_MSG:           DC.B        'F',0 
00001D41                          1282  
00001D41                          1283  * opcodes
00001D41= 4A 53 52 20 00          1284  JSRMSG:             DC.B        'JSR ',0
00001D46= 4E 4F 54 00             1285  NOT_MSG:        DC.B        'NOT',0
00001D4A= 42 52 41 00             1286  BRA_MSG:        DC.B        'BRA',0
00001D4E= 4A 53 52 00             1287  JSR_MSG:        DC.B        'JSR',0
00001D52= 4D 4F 56 45 51 00       1288  MOVEQ_MSG:      DC.B        'MOVEQ',0
00001D58= 41 4E 44 00             1289  AND_MSG:        DC.B        'AND',0
00001D5C= 4C 45 41 00             1290  LEA_MSG         DC.B        'LEA',0
00001D60= 41 53 52 00             1291  ASR_MSG         DC.B        'ASR',0
00001D64= 41 53 4C 00             1292  ASL_MSG         DC.B        'ASL',0
00001D68= 4C 53 52 00             1293  LSR_MSG         DC.B        'LSR',0
00001D6C= 4C 53 4C 00             1294  LSL_MSG         DC.B        'LSL',0
00001D70= 52 4F 58 00             1295  ROXR_MSG        DC.B        'ROX',0  *Unused messages but present because helps in indexing, DONT USE IT
00001D74= 52 4F 58 00             1296  ROXL_MSG        DC.B        'ROX',0  *Unused messages but present because helps in indexing, DONT USE IT
00001D78= 52 4F 52 00             1297  ROR_MSG         DC.B        'ROR',0
00001D7C= 52 4F 4C 00             1298  ROL_MSG         DC.B        'ROL',0
00001D80= 4F 52 00                1299  OR_MSG:         DC.B        'OR',0
00001D83= 44 41 54 41 00          1300  DATA_MSG:       DC.B        'DATA',0
00001D88= 42 00                   1301  BCC_MSG         DC.B        'B', 0
00001D8A= 42 4C 45 00             1302  BLE_MSG         DC.B        'BLE', 0
00001D8E= 42 47 54 00             1303  BGT_MSG         DC.B        'BGT',0
00001D92= 42 45 51 00             1304  BEQ_MSG         DC.B        'BEQ',0
00001D96= 41 44 44 51 00          1305  ADDQ_MSG        DC.B        'ADDQ',0
00001D9B= 41 44 44 41 00          1306  ADDA_MSG        DC.B        'ADDA',0
00001DA0= 2E 42 00                1307  BYTE_MSG        DC.B        '.B', 0
00001DA3= 2E 57 00                1308  WORD_MSG        DC.B        '.W', 0
00001DA6= 2E 4C 00                1309  LONG_MSG        DC.B        '.L', 0
00001DA9                          1310  
00001DA9= 2C 00                   1311  COMMA_MSG       DC.B        ',', 0
00001DAB= 24 00                   1312  DOLLAR_MSG      DC.B        '$', 0
00001DAD= 23 00                   1313  HASH_MSG        DC.B        '#', 0
00001DAF= 2B 00                   1314  PLUS_MSG        DC.B        '+', 0
00001DB1= 2D 00                   1315  MINUS_MSG       DC.B        '-', 0
00001DB3= 28 00                   1316  OPEN_PARENTHESIS_MSG  DC.B   '(', 0
00001DB5= 29 00                   1317  CLOSE_PARENTHESIS_MSG DC.B  ')', 0
00001DB7                          1318  *-----Carriage Return
00001DB7  =0000000D               1319  CR              EQU          $0D
00001DB7                          1320  *-----------Line Feed
00001DB7  =0000000A               1321  LF              EQU          $0A
00001DB7                          1322  
00001DB7= 0D 0A 00                1323  NEW_LINE:       DC.B         '',CR,LF,0
00001DBA                          1324  
00001DBA                          1325      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDA_EA_DEST        190A
ADDA_EA_IMM_LONG    18DA
ADDA_EA_IMM_SOURCE  18A8
ADDA_EA_IMM_WORD    18F2
ADDA_EA_NON_IMM_SOURCE  1888
ADDA_EA_SIZE_AND_EA  1840
ADDA_MSG            1D9B
ADDQ_ADD_COUNT_1_7  199A
ADDQ_ADD_COUNT_8    19DA
ADDQ_EA_SIZE_AND_EA  193A
ADDQ_MSG            1D96
AND_MSG             1D58
ASCII_DONE          106E
ASL_MSG             1D64
ASR_MSG             1D60
A_MSG               1D35
BCC_MSG             1D88
BEQ_MSG             1D92
BGT_MSG             1D8E
BLE_MSG             1D8A
BRA_MSG             1D4A
BR_BYTE_DISPLACEMENT  1740
BR_EA_SIZE_AND_DISPLACEMENT  1726
BR_WORD_DISPLACEMENT  178E
BYTE_MSG            1DA0
B_MSG               1D37
CHECK_OPCODES       116A
CLOSE_PARENTHESIS_MSG  1DB5
COMMA_MSG           1DA9
CONVERT_TO_ASCII    1056
CR                  D
C_MSG               1D39
DATA_MSG            1D83
DOLLAR_MSG          1DAB
DONE                1158
D_MSG               1D3B
EA_ABS_LONG         1BAC
EA_ABS_WORD         1B94
EA_ADDR_REGISTER    1A94
EA_DATA_REGISTER    1A6C
EA_INDIRECT         1ABC
EA_INDIRECT_DECREMENT  1B48
EA_INDIRECT_INCREMENT  1AFC
EIGHT_MSG           1D31
ENDING_MSG          1C98
END_ADDR            1CF6
E_MSG               1D3D
FIVE_MSG            1D2B
FOUR_MSG            1D29
F_MSG               1D3F
GET_BIT             15A2
GET_EA              1A14
GOODBYE_MSG         1CBA
HASH_MSG            1DAD
INSTRUCTION_DECODE_FAILURE  15B6
INTRO_MSG           1C4E
ISOLATE_15_12       11A6
ISOLATE_15_6        117E
ISOLATE_15_8        118E
JSRMSG              1D41
JSR_MSG             1D4E
LEA_EA              17E4
LEA_MSG             1D5C
LETTER_ASCII        1084
LF                  A
LONG_MSG            1DA6
LSL_MSG             1D6C
LSR_MSG             1D68
MINUS_MSG           1DB1
MOVEQ_MSG           1D52
NEG_BYTE_DISPLACEMENT  177C
NEG_WORD_DISPLACEMENT  17D0
NEW_LINE            1DB7
NINE_MSG            1D33
NOT_MSG             1D46
NUMBER_ASCII        1070
ONE_MSG             1D23
OPEN_PARENTHESIS_MSG  1DB3
OP_CODE_ADDA        132C
OP_CODE_ADDQ        13D0
OP_CODE_AND         12B0
OP_CODE_BCC         12BE
OP_CODE_BEQ         1318
OP_CODE_BGT         1304
OP_CODE_BLE         12F0
OP_CODE_BRA         11FC
OP_CODE_DATA        1462
OP_CODE_JSR         1210
OP_CODE_LEA         122C
OP_CODE_LEA_PRINT   1290
OP_CODE_MEMORY_SHIFT_ROTATE  14E0
OP_CODE_MOVEQ       121E
OP_CODE_NOT         11EE
OP_CODE_OR          1442
OP_CODE_REGISTER_SHIFT_ROTATE  1490
OP_CODE_SHIFT_ROTATE  1470
OR_MSG              1D80
PLUS_MSG            1DAF
PRINT_BYTE_VALUE    1BC2
PRINT_BYTE_VALUE_LOOP  1BC8
PRINT_DONE          1126
PRINT_LONG_VALUE    1C1C
PRINT_LONG_VALUE_LOOP  1C22
PRINT_LOOP          10F8
PRINT_MEMORY_LOOP   1098
PRINT_WORD_VALUE    1BEE
PRINT_WORD_VALUE_LOOP  1BF4
REVERSE_DONE        1156
REVERSE_LOOP        1138
REVERSE_START       1128
ROL_MSG             1D7C
ROR_MSG             1D78
ROXL_MSG            1D74
ROXR_MSG            1D70
SEVEN_MSG           1D2F
SHIFT_ROTATE_COUNT_1_7  16DE
SHIFT_ROTATE_COUNT_8  16F4
SHIFT_ROTATE_EA_MEMORY  1704
SHIFT_ROTATE_EA_REGISTER  1620
SHIFT_ROTATE_EA_SIZE  15F0
SHIFT_ROTATE_IMM_SOURCE  16A8
SHIFT_ROTATE_REGISTER_DEST  166C
SHIFT_ROTATE_REGISTER_SOURCE  163A
SIX_MSG             1D2D
SPACE_MSG           1D1E
START               1000
STARTING_MSG        1C74
STA_ADDR            1CCE
THREE_MSG           1D27
TWO_MSG             1D25
WORD_MSG            1DA3
ZERO_MSG            1D21
