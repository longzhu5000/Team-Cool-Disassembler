00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 7/28/2022 4:56:04 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :Disassembler
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  START:                  ; first instruction of program
00001000                             9  
00001000                            10  * Put program code here
00001000                            11  
00001000                            12  *------LEA = Load effective address
00001000                            13  *------Running Trap #15 while the number 14 is in D0 will print out whatever data is in the address stored in A1
00001000                            14  
00001000  43F9 00001434             15          LEA         INTRO_MSG,      A1
00001006  103C 000E                 16          MOVE.B      #14,            D0    
0000100A  4E4F                      17          TRAP        #15
0000100C                            18          
0000100C  43F9 0000145A             19          LEA         STARTING_MSG,   A1
00001012  103C 000E                 20          MOVE.B      #14,            D0   
00001016  4E4F                      21          TRAP        #15
00001018                            22          
00001018                            23  *----------------- 
00001018                            24  *       Running trap command 15 while the number 2 is in D0 
00001018                            25  *       Will ask the user to enter input
00001018                            26  *       after the user hits enter, the length of the input is stored in D1
00001018                            27  *       and the user data is stored in the space allocated by STA_ADDR repressented by ASSCI code
00001018                            28  *       IE 31 = 1, 32 = 2 etc etc
00001018                            29  *       If I store the number 1200, it will appear in memory as 31 32 30 30
00001018                            30  
00001018  43F9 000014B4             31          LEA         STA_ADDR,       A1
0000101E  103C 0002                 32          MOVE.B      #2,             D0
00001022  4E4F                      33          TRAP        #15
00001024                            34          
00001024  4EB9 00001056             35          JSR         CONVERT_TO_ASCII
0000102A                            36          
0000102A                            37          * A3 now has our Starting Address
0000102A  2647                      38          MOVEA.L     D7,             A3
0000102C                            39          
0000102C  4282                      40          CLR.L       D2
0000102E  4287                      41          CLR.L       D7
00001030                            42          
00001030  43F9 0000147E             43          LEA         ENDING_MSG,     A1
00001036  103C 000E                 44          MOVE.B      #14,            D0
0000103A  4E4F                      45          TRAP        #15
0000103C                            46          
0000103C  43F9 000014DC             47          LEA         END_ADDR,       A1
00001042  103C 0002                 48          MOVE.B      #2,             D0
00001046  4E4F                      49          TRAP        #15
00001048                            50          
00001048  4EB9 00001056             51          JSR         CONVERT_TO_ASCII
0000104E                            52          * A4 now has our Ending Address
0000104E  2847                      53          MOVEA.L     D7,             A4
00001050                            54          
00001050                            55  
00001050  4EB9 00001098             56          JSR         PRINT_MEMORY_LOOP
00001056                            57          
00001056                            58          
00001056                            59          
00001056                            60          *BRA         DONE
00001056                            61          *   ASCII conversion
00001056                            62  *---------------------------------------        
00001056                            63  CONVERT_TO_ASCII:             
00001056  0C01 0000                 64          CMPI.B      #$0,            D1
0000105A  6700 0012                 65          BEQ         ASCII_DONE
0000105E  1419                      66          MOVE.B      (A1)+,          D2
00001060  103C 0039                 67          MOVE.B      #$39,           D0
00001064  B400                      68          CMP.B       D0,             D2
00001066  6F00 0008                 69          BLE         NUMBER_ASCII   
0000106A  6000 0018                 70          BRA         LETTER_ASCII  
0000106E                            71  
0000106E                            72  ASCII_DONE:
0000106E  4E75                      73          RTS
00001070                            74          
00001070                            75  NUMBER_ASCII:
00001070  5301                      76          SUBI.B      #$1,            D1
00001072  103C 0030                 77          MOVE.B      #$30,           D0
00001076  9400                      78          SUB.B       D0,             D2
00001078  DE02                      79          ADD.B       D2,             D7
0000107A  0C01 0000                 80          CMPI.B      #$0,            D1
0000107E  67EE                      81          BEQ         ASCII_DONE
00001080  E987                      82          ASL.L       #4,             D7
00001082  60D2                      83          BRA         CONVERT_TO_ASCII
00001084                            84  LETTER_ASCII:
00001084  5301                      85          SUBI.B      #$1,            D1
00001086  103C 0037                 86          MOVE.B      #$37,           D0
0000108A  9400                      87          SUB.B       D0,             D2
0000108C  DE02                      88          ADD.B       D2,             D7
0000108E  0C01 0000                 89          CMPI.B      #$0,            D1
00001092  67DA                      90          BEQ         ASCII_DONE
00001094  E987                      91          ASL.L       #4,             D7
00001096  60BE                      92          BRA         CONVERT_TO_ASCII
00001098                            93  *---------------------------------------        
00001098                            94          
00001098                            95          
00001098                            96          *   Printing data and addresses
00001098                            97  *---------------------------------------
00001098                            98  
00001098                            99  PRINT_MEMORY_LOOP:
00001098                           100          * add code here to compare current address with end address
00001098                           101          
00001098                           102          * if equal to, or further than ending address jump to DONE
00001098                           103          * SIMHALT
00001098  B9CB                     104          CMP.L       A3,             A4
0000109A  6700 00BC                105          BEQ         DONE
0000109E  6F00 00B8                106          BLE         DONE
000010A2                           107          
000010A2                           108          * We are goiong to keep track of the number of byts we have examined using D1
000010A2                           109          * Before printing the address we have to reverse the order
000010A2  4281                     110          CLR.L       D1
000010A4  4282                     111          CLR.L       D2
000010A6  123C 0008                112          MOVE.B      #$8,            D1
000010AA  260B                     113          MOVE.L      A3,             D3
000010AC  4EB9 00001128            114          JSR         REVERSE_START
000010B2                           115          
000010B2  2607                     116          MOVE.L      D7,             D3
000010B4  4281                     117          CLR.L       D1
000010B6  4282                     118          CLR.L       D2
000010B8  123C 0008                119          MOVE.B      #$8,            D1
000010BC  4EB9 000010F8            120          JSR         PRINT_LOOP
000010C2                           121          
000010C2                           122          
000010C2                           123          * space between address and data
000010C2  43F9 00001504            124          LEA         SPACE_MSG,      A1
000010C8  103C 000E                125          MOVE.B      #14,            D0    
000010CC  4E4F                     126          TRAP        #15
000010CE                           127          
000010CE  4281                     128          CLR.L       D1
000010D0  4282                     129          CLR.L       D2
000010D2  123C 0008                130          MOVE.B      #$8,            D1
000010D6  361B                     131          MOVE.W      (A3)+,          D3
000010D8                           132          *JSR         REVERSE_START
000010D8                           133          
000010D8                           134          *MOVE.L      D7,             D3
000010D8  4281                     135          CLR.L       D1
000010DA  4282                     136          CLR.L       D2
000010DC                           137          *MOVE.B      #$8,            D1
000010DC                           138          *JSR         PRINT_LOOP
000010DC                           139          
000010DC                           140          * Jump to Function in another file
000010DC  4EB9 0000116A            141          JSR         CHECK_OPCODES
000010E2                           142          
000010E2                           143          
000010E2  4281                     144          CLR.L       D1
000010E4  4282                     145          CLR.L       D2
000010E6  4283                     146          CLR.L       D3
000010E8  4284                     147          CLR.L       D4
000010EA                           148          * new line
000010EA  43F9 00001527            149          LEA         NEW_LINE,       A1
000010F0  103C 000E                150          MOVE.B      #14,            D0    
000010F4  4E4F                     151          TRAP        #15
000010F6                           152  
000010F6                           153          * branch to the start of this method
000010F6  60A0                     154          BRA         PRINT_MEMORY_LOOP
000010F8                           155  
000010F8                           156  
000010F8                           157  PRINT_LOOP:
000010F8                           158  
000010F8                           159          
000010F8                           160          * When D1 == 0, we are done and exit this loop
000010F8  0C01 0000                161          CMPI.B      #$0,            D1
000010FC  6700 0028                162          BEQ         PRINT_DONE
00001100  5301                     163          SUBI.B      #$1,            D1
00001102                           164          
00001102  1403                     165          MOVE.B      D3,             D2
00001104                           166          * Bit shifting to isolate the right most digit
00001104                           167          * 1234 5678 => 8000 0000 => 0000 0008
00001104  103C 001C                168          MOVE.B      #28,            D0    
00001108  E1AA                     169          LSL.L       D0,             D2     
0000110A  E99A                     170          ROL.L       #4,             D2 
0000110C                           171          
0000110C                           172          * Bit shifting to prep the next digit
0000110C                           173          * 1234 4567 => 0123 4567
0000110C  E883                     174          ASR.L       #4, D3
0000110E                           175          
0000110E                           176          *Assuming D4 is empty
0000110E                           177          
0000110E  1802                     178          MOVE.B       D2,            D4
00001110  43F9 00001507            179          LEA          ZERO_MSG,      A1
00001116                           180          * load the address of Zero_msg
00001116                           181          * because all of the msgs are stored next to each other in order
00001116                           182          * we can simply take the value isolated from the number, multiply it by 2 (msg's take up 2 bytes)
00001116                           183          * and then add it to the address starting at zero_msg
00001116  C8FC 0002                184          MULU         #2,            D4
0000111A  D3C4                     185          ADDA.L       D4,            A1
0000111C                           186          
0000111C                           187          * trap command 14 reads whatever address is in A1, and then spits out the data to the console
0000111C  103C 000E                188          MOVE.B       #14,           D0
00001120  4E4F                     189          TRAP         #15
00001122  60D4                     190          BRA          PRINT_LOOP
00001124  4644                     191          NOT          D4
00001126                           192          
00001126                           193  PRINT_DONE:
00001126  4E75                     194          RTS
00001128                           195          
00001128                           196      *   Reversing the address
00001128                           197  *---------------------------------------
00001128                           198  
00001128                           199  REVERSE_START:        
00001128  4281                     200          CLR.L       D1
0000112A  4287                     201          CLR.L       D7
0000112C  123C 0008                202          MOVE.B      #8,             D1
00001130  4EB9 00001138            203          JSR         REVERSE_LOOP
00001136  4E75                     204          RTS
00001138                           205          
00001138                           206  REVERSE_LOOP:
00001138                           207  
00001138                           208          
00001138  0C01 0000                209          CMPI.B      #$0,            D1
0000113C  6700 0018                210          BEQ         REVERSE_DONE
00001140  5301                     211          SUBI.B      #$1,            D1
00001142  E987                     212          ASL.L       #4,             D7
00001144                           213          
00001144  4285                     214          CLR.L       D5
00001146                           215          
00001146  1A03                     216          MOVE.B      D3,             D5
00001148                           217          
00001148  103C 001C                218          MOVE.B      #28,            D0    
0000114C  E1AD                     219          LSL.L       D0,             D5     
0000114E  E99D                     220          ROL.L       #4,             D5
00001150                           221          
00001150  DE05                     222          ADD.B       D5,             D7
00001152                           223          
00001152                           224          
00001152  E883                     225          ASR.L       #4,             D3
00001154                           226          
00001154  60E2                     227          BRA         REVERSE_LOOP
00001156                           228  
00001156                           229  REVERSE_DONE:
00001156  4E75                     230          RTS
00001158                           231  DONE:
00001158                           232  
00001158  43F9 000014A0            233          LEA         GOODBYE_MSG,    A1
0000115E  103C 000E                234          MOVE.B      #14,            D0
00001162  4E4F                     235          TRAP        #15
00001164  103C 0009                236          MOVE.B      #9,             D0
00001168  4E4F                     237          TRAP        #15        
0000116A                           238          
0000116A                           239  
0000116A                           240      *SIMHALT             ; halt simulator
0000116A                           241  
0000116A                           242      INCLUDE         'Disassembler_OPCodes.x68'
0000116A                           243  
0000116A                           244  
0000116A                           245  
0000116A                           246  CHECK_OPCODES:
0000116A  4286                     247          CLR.L   D6
0000116C                           248  
0000116C  4EB9 0000120C            249          JSR     ISOLATE_16
00001172  BC3C 0001                250          CMP.B   #$1,    D6
00001176  6700 0058                251          BEQ     RETURN
0000117A                           252          
0000117A  4EB9 0000121E            253          JSR     ISOLATE_15_6
00001180  BC3C 0001                254          CMP.B   #$1,    D6
00001184  6700 004A                255          BEQ     RETURN
00001188                           256  
00001188  4EB9 00001230            257          JSR     ISOLATE_15_8
0000118E  BC3C 0001                258          CMP.B   #$1,    D6
00001192  6700 003C                259          BEQ     RETURN
00001196                           260          
00001196  4EB9 0000124A            261          JSR     ISOLATE_15_11
0000119C  BC3C 0001                262          CMP.B   #$1,    D6
000011A0  6700 002E                263          BEQ     RETURN
000011A4                           264          
000011A4  4EB9 000011D2            265          JSR     ISOLATE_15_12
000011AA  BC3C 0001                266          CMP.B   #$1,    D6
000011AE  6700 0020                267          BEQ     RETURN
000011B2                           268          
000011B2  4EB9 0000126E            269          JSR     ISOLATE_8_6
000011B8  BC3C 0001                270          CMP.B   #$1,    D6        
000011BC  6700 0012                271          BEQ     RETURN
000011C0                           272          
000011C0  4EB9 0000125C            273          JSR     ISOLATE_15_14    
000011C6  BC3C 0001                274          CMP.B   #$1,    D6
000011CA  6700 0004                275          BEQ     RETURN
000011CE                           276          
000011CE                           277  
000011CE  4E75                     278          RTS
000011D0                           279  RETURN:
000011D0  4E75                     280          RTS
000011D2                           281  
000011D2                           282  ISOLATE_15_12:
000011D2  3803                     283          MOVE.W      D3,     D4
000011D4  343C 000C                284          MOVE.W      #12,     D2
000011D8  E46C                     285          LSR.W       D2,     D4
000011DA                           286          
000011DA  B83C 000D                287          CMP.B       #$D,   D4
000011DE  6700 011A                288          BEQ         OP_CODE_ADD
000011E2                           289         ;CMP.W       #$D,   D4
000011E2                           290         ;BEQ         OP_CODE_ADDA
000011E2  B83C 0005                291          CMP.B       #$5,   D4
000011E6  6700 0136                292          BEQ         OP_CODE_ADDQ
000011EA  B83C 0009                293          CMP.B       #$9,   D4
000011EE  6700 0140                294          BEQ         OP_CODE_SUB
000011F2                           295          
000011F2  B83C 0007                296          CMP.B       #$7,    D4
000011F6  6700 016E                297          BEQ         OP_CODE_MOVEQ
000011FA  B83C 0008                298          CMP.B       #$8,    D4
000011FE  6700 018A                299          BEQ         OP_CODE_OR      *may get confused with DIVU + any other opcodes that start with 1000 (ones that we are not required to cover)
00001202  B83C 000C                300          CMP.B       #$C,    D4
00001206  6700 0170                301          BEQ         OP_CODE_AND
0000120A                           302  
0000120A  4E75                     303          RTS
0000120C                           304          
0000120C                           305  ISOLATE_16:
0000120C                           306  
0000120C  B67C 4E71                307          CMP.W       #$4E71, D3
00001210  6700 0142                308          BEQ         OP_CODE_NOP
00001214  B67C 4E75                309          CMP.W       #$4E75, D3
00001218  6700 0128                310          BEQ         OP_CODE_RTS
0000121C                           311  
0000121C  4E75                     312          RTS
0000121E                           313  
0000121E                           314  ISOLATE_15_6:
0000121E                           315          
0000121E  3803                     316          MOVE.W      D3,     D4
00001220  343C 0006                317          MOVE.W      #6,     D2
00001224  E46C                     318          LSR.W       D2,     D4
00001226                           319          
00001226  B87C 013A                320          CMP.W       #$13A,  D4
0000122A  6700 0170                321          BEQ         OP_CODE_JSR
0000122E                           322          
0000122E  4E75                     323          RTS
00001230                           324  
00001230                           325  ISOLATE_15_8:
00001230  3803                     326          MOVE.W      D3,     D4
00001232  343C 0008                327          MOVE.W      #8,     D2
00001236  E46C                     328          LSR.W       D2,     D4
00001238                           329          
00001238  B83C 0046                330          CMP.B       #$46,   D4
0000123C  6700 0050                331          BEQ         OP_CODE_NOT
00001240  B83C 0060                332          CMP.B       #$60,   D4
00001244  6700 005A                333          BEQ         OP_CODE_BRA
00001248                           334  
00001248  4E75                     335          RTS
0000124A                           336          
0000124A                           337  ISOLATE_15_11:
0000124A  3803                     338          MOVE.W      D3,     D4
0000124C  343C 000B                339          MOVE.W      #11,    D2
00001250  E46C                     340          LSR.W       D2,     D4
00001252                           341          
00001252  B83C 0009                342          CMP.B       #$9,    D4
00001256  6700 0090                343          BEQ         OP_CODE_MOVEM
0000125A                           344          
0000125A  4E75                     345          RTS
0000125C                           346          
0000125C                           347  ISOLATE_15_14:
0000125C  3803                     348          MOVE.W      D3,     D4
0000125E  343C 000E                349          MOVE.W      #14,    D2
00001262  E46C                     350          LSR.W       D2,     D4
00001264                           351          
00001264  B83C 0000                352          CMP.B       #$0,    D4
00001268  6700 005A                353          BEQ         OP_CODE_MOVE
0000126C                           354          
0000126C  4E75                     355          RTS
0000126E                           356          
0000126E                           357  ISOLATE_8_6:
0000126E  3803                     358          MOVE.W      D3,     D4
00001270  343C 0007                359          MOVE.W      #7,     D2
00001274  E56C                     360          LSL.W       D2,     D4
00001276  343C 000D                361          MOVE.W      #13,    D2
0000127A  E46C                     362          LSR.W       D2,     D4
0000127C                           363          
0000127C  B83C 0001                364          CMP.B       #$1,    D4
00001280  6700 0054                365          BEQ         OP_CODE_MOVEA
00001284  B83C 0007                366          CMP.B       #$7,    D4
00001288  6700 0028                367          BEQ         OP_CODE_LEA
0000128C                           368  
0000128C  4E75                     369          RTS
0000128E                           370  
0000128E                           371  
0000128E                           372  
0000128E                           373  OP_CODE_NOT:
0000128E  43F9 000013AE            374          LEA         NOT_MSG, A1
00001294  103C 000E                375          MOVE.B      #14, D0
00001298  4E4F                     376          TRAP        #15
0000129A                           377          
0000129A  1C3C 0001                378          MOVE.B      #1,      D6
0000129E                           379          
0000129E  4E75                     380          RTS 
000012A0                           381  OP_CODE_BRA:
000012A0  43F9 000013B2            382          LEA         BRA_MSG, A1
000012A6  103C 000E                383          MOVE.B      #14, D0
000012AA  4E4F                     384          TRAP        #15
000012AC                           385          
000012AC  1C3C 0001                386          MOVE.B      #1,      D6
000012B0                           387          *MOVE.W      (A3)+,   D7
000012B0                           388          
000012B0  4E75                     389          RTS
000012B2                           390          
000012B2                           391  OP_CODE_LEA:
000012B2  43F9 000013C7            392          LEA         LEA_MSG, A1
000012B8  103C 000E                393          MOVE.B      #14, D0
000012BC  4E4F                     394          TRAP        #15
000012BE                           395  
000012BE  1C3C 0001                396          MOVE.B      #1,      D6
000012C2                           397  
000012C2  4E75                     398          RTS        
000012C4                           399  OP_CODE_MOVE:
000012C4                           400  
000012C4  43F9 000013B6            401          LEA         MOVE_MSG, A1
000012CA  103C 000E                402          MOVE.B      #14, D0
000012CE  4E4F                     403          TRAP        #15
000012D0                           404  
000012D0  1C3C 0001                405          MOVE.B      #1,      D6
000012D4                           406  
000012D4  4E75                     407          RTS
000012D6                           408          
000012D6                           409  OP_CODE_MOVEA:
000012D6  43F9 000013C1            410          LEA         MOVEA_MSG, A1
000012DC  103C 000E                411          MOVE.B      #14, D0
000012E0  4E4F                     412          TRAP        #15
000012E2                           413  
000012E2  1C3C 0001                414          MOVE.B      #1,      D6
000012E6                           415  
000012E6  4E75                     416          RTS
000012E8                           417  
000012E8                           418  OP_CODE_MOVEM:
000012E8  43F9 000013BB            419          LEA         MOVEM_MSG, A1
000012EE  103C 000E                420          MOVE.B      #14, D0
000012F2  4E4F                     421          TRAP        #15
000012F4                           422  
000012F4  1C3C 0001                423          MOVE.B      #1,      D6
000012F8                           424  
000012F8  4E75                     425          RTS
000012FA                           426  OP_CODE_ADD:
000012FA  43F9 000013CB            427          LEA         ADD_MSG, A1
00001300  103C 000E                428          MOVE.B      #14, D0
00001304  4E4F                     429          TRAP        #15
00001306                           430          
00001306  1C3C 0001                431          MOVE.B      #1,      D6
0000130A                           432          
0000130A  4E75                     433          RTS
0000130C                           434          
0000130C                           435  OP_CODE_ADDA:
0000130C  43F9 000013CF            436          LEA         ADDA_MSG, A1
00001312  103C 000E                437          MOVE.B      #14, D0
00001316  4E4F                     438          TRAP        #15
00001318                           439          
00001318  1C3C 0001                440          MOVE.B      #1,      D6
0000131C                           441          
0000131C  4E75                     442          RTS
0000131E                           443          
0000131E                           444  OP_CODE_ADDQ:
0000131E  43F9 000013D4            445          LEA         ADDQ_MSG, A1
00001324  103C 000E                446          MOVE.B      #14, D0
00001328  4E4F                     447          TRAP        #15
0000132A                           448          
0000132A  1C3C 0001                449          MOVE.B      #1,      D6
0000132E                           450          
0000132E  4E75                     451          RTS
00001330                           452  
00001330                           453  OP_CODE_SUB:
00001330  43F9 000013D9            454          LEA         SUB_MSG, A1
00001336  103C 000E                455          MOVE.B      #14, D0
0000133A  4E4F                     456          TRAP        #15
0000133C                           457          
0000133C  1C3C 0001                458          MOVE.B      #1,      D6
00001340                           459          
00001340  4E75                     460          RTS
00001342                           461          
00001342                           462  OP_CODE_RTS:
00001342  43F9 000013DD            463          LEA         RTS_MSG, A1
00001348  103C 000E                464          MOVE.B      #14, D0
0000134C  4E4F                     465          TRAP        #15
0000134E                           466          
0000134E  1C3C 0001                467          MOVE.B      #1,      D6
00001352                           468          
00001352  4E75                     469          RTS
00001354                           470          
00001354                           471  OP_CODE_NOP:
00001354  43F9 000013E1            472          LEA         NOP_MSG, A1
0000135A  103C 000E                473          MOVE.B      #14, D0
0000135E  4E4F                     474          TRAP        #15
00001360                           475          
00001360  1C3C 0001                476          MOVE.B      #1,      D6
00001364                           477          
00001364  4E75                     478          RTS
00001366                           479          
00001366                           480  OP_CODE_MOVEQ:
00001366  43F9 000013E5            481          LEA         MOVEQ_MSG, A1
0000136C  103C 000E                482          MOVE.B      #14, D0
00001370  4E4F                     483          TRAP        #15
00001372                           484          
00001372  1C3C 0001                485          MOVE.B      #1,      D6
00001376                           486          
00001376  4E75                     487          RTS
00001378                           488          
00001378                           489  OP_CODE_AND:
00001378  43F9 000013EB            490          LEA         AND_MSG, A1
0000137E  103C 000E                491          MOVE.B      #14, D0
00001382  4E4F                     492          TRAP        #15
00001384                           493          
00001384  1C3C 0001                494          MOVE.B      #1,      D6
00001388                           495          
00001388  4E75                     496          RTS
0000138A                           497          
0000138A                           498  OP_CODE_OR:
0000138A  43F9 000013EF            499          LEA         OR_MSG, A1
00001390  103C 000E                500          MOVE.B      #14, D0
00001394  4E4F                     501          TRAP        #15
00001396                           502          
00001396  1C3C 0001                503          MOVE.B      #1,      D6
0000139A                           504          
0000139A  4E75                     505          RTS
0000139C                           506  
0000139C                           507  OP_CODE_JSR:
0000139C  43F9 000013F2            508          LEA         JSR_MSG, A1
000013A2  103C 000E                509          MOVE.B      #14, D0
000013A6  4E4F                     510          TRAP        #15
000013A8                           511          
000013A8  1C3C 0001                512          MOVE.B      #1,      D6
000013AC                           513          
000013AC  4E75                     514          RTS
000013AE                           515  
000013AE= 4E 4F 54 00              516  NOT_MSG:        DC.B        'NOT',0
000013B2= 42 52 41 00              517  BRA_MSG:        DC.B        'BRA',0
000013B6                           518  
000013B6= 4D 4F 56 45 00           519  MOVE_MSG:       DC.B        'MOVE',0
000013BB= 4D 4F 56 45 4D 00        520  MOVEM_MSG:      DC.B        'MOVEM',0
000013C1= 4D 4F 56 45 41 00        521  MOVEA_MSG:      DC.B        'MOVEA',0
000013C7= 4C 45 41 00              522  LEA_MSG:        DC.B        'LEA',0
000013CB                           523  
000013CB= 41 44 44 00              524  ADD_MSG:        DC.B        'ADD',0
000013CF= 41 44 44 41 00           525  ADDA_MSG:       DC.B        'ADDA',0
000013D4= 41 44 44 51 00           526  ADDQ_MSG:       DC.B        'ADDQ',0
000013D9= 53 55 42 00              527  SUB_MSG:        DC.B        'SUB',0
000013DD= 52 54 53 00              528  RTS_MSG:        DC.B        'RTS',0
000013E1= 4E 4F 50 00              529  NOP_MSG:        DC.B        'NOP',0
000013E5                           530  
000013E5= 4D 4F 56 45 51 00        531  MOVEQ_MSG:      DC.B        'MOVEQ',0
000013EB= 41 4E 44 00              532  AND_MSG:        DC.B        'AND',0
000013EF= 4F 52 00                 533  OR_MSG:         DC.B        'OR',0
000013F2= 4A 53 52 00              534  JSR_MSG:        DC.B        'JSR',0
000013F6                           535  
000013F6                           536  
000013F6                           537  
000013F6                           538  -------------------- end include --------------------
000013F6                           539      INCLUDE         'Disassembler_EA.x68'
000013F6                           540  
000013F6                           541  
000013F6                           542  EA_ISOLATE_8_6:
000013F6                           543  
000013F6                           544  
000013F6                           545  
000013F6  4E75                     546              RTS
000013F8                           547  
000013F8                           548  -------------------- end include --------------------
000013F8                           549      INCLUDE         'Sample_Test.x68'
000013F8                           550  
000013F8                           551                    ; first instruction of program
000013F8                           552  
000013F8                           553  TEST
000013F8  4E75                     554      RTS
000013FA  4E71                     555      NOP
000013FC                           556      
000013FC  1401                     557      MOVE.B      D1,     D2
000013FE  3449                     558      MOVEA.W     A1,     A2
00001400  48A1 007F                559      MOVEM.W     A1-A7,  -(A1)
00001404  7000                     560      MOVEQ       #$0,    D0
00001406  45D1                     561      LEA         (A1),   A2
00001408                           562      
00001408  C401                     563      AND.B       D1,     D2
0000140A  8401                     564      OR.B        D1,     D2
0000140C                           565  
0000140C  D401                     566      ADD.B       D1,     D2
0000140E  D4C1                     567      ADDA.W      D1,     A2
00001410  524A                     568      ADDQ.W      #$1,    A2
00001412  9401                     569      SUB.B       D1,     D2
00001414                           570      
00001414  4EB8 13F8                571      JSR         TEST
00001418  6EDE                     572      BGT.B       TEST
0000141A  6F00 FFDC                573      BLE.W       TEST
0000141E  6700 FFD8                574      BEQ.W       TEST
00001422  60D4                     575      BRA         TEST
00001424  4678 13F8                576      NOT         TEST
00001428                           577      
00001428  E32A                     578      LSL.B       D1,     D2
0000142A  E22A                     579      LSR.B       D1,     D2
0000142C  E322                     580      ASL.B       D1,     D2
0000142E  E222                     581      ASR.B       D1,     D2
00001430  E33A                     582      ROL.B       D1,     D2
00001432  E23A                     583      ROR.B       D1,     D2
00001434                           584  
00001434                           585  
00001434                           586  -------------------- end include --------------------
00001434                           587      *INCLUDE         'demo_test.x68'
00001434                           588  
00001434                           589  
00001434                           590  * Put variables and constants here
00001434                           591  
00001434= 57 65 6C 63 6F 6D ...    592  INTRO_MSG:       DC.B       'Welcome to Team Cools Disassembler!',CR,LF,0
0000145A= 50 6C 65 61 73 65 ...    593  STARTING_MSG:    DC.B       'Please enter the Starting Address',CR,LF,0
0000147E= 50 6C 65 61 73 65 ...    594  ENDING_MSG:      DC.B       'Please enter the Ending Address',CR,LF,0
000014A0= 44 6F 6E 65 20 52 ...    595  GOODBYE_MSG:     DC.B       'Done Reading data',CR,LF,0
000014B4                           596  * CR and LF for strings above because we want to go to next line after printing message
000014B4                           597  
000014B4                           598  STA_ADDR         DS.B        40
000014DC                           599  END_ADDR         DS.B        40
00001504                           600  
00001504                           601  * no CR and LF for strings below because we want to print each number and letter
00001504                           602  
00001504= 20 20 00                 603  SPACE_MSG:       DC.B        '  ',0
00001507                           604  
00001507= 30 00                    605  ZERO_MSG:        DC.B        '0',0
00001509= 31 00                    606  ONE_MSG:         DC.B        '1',0
0000150B= 32 00                    607  TWO_MSG:         DC.B        '2',0
0000150D= 33 00                    608  THREE_MSG:       DC.B        '3',0
0000150F= 34 00                    609  FOUR_MSG:        DC.B        '4',0
00001511= 35 00                    610  FIVE_MSG:        DC.B        '5',0
00001513= 36 00                    611  SIX_MSG:         DC.B        '6',0
00001515= 37 00                    612  SEVEN_MSG:       DC.B        '7',0
00001517= 38 00                    613  EIGHT_MSG:       DC.B        '8',0
00001519= 39 00                    614  NINE_MSG:        DC.B        '9',0
0000151B= 41 00                    615  A_MSG:           DC.B        'A',0
0000151D= 42 00                    616  B_MSG:           DC.B        'B',0
0000151F= 43 00                    617  C_MSG:           DC.B        'C',0
00001521= 44 00                    618  D_MSG:           DC.B        'D',0
00001523= 45 00                    619  E_MSG:           DC.B        'E',0
00001525= 46 00                    620  F_MSG:           DC.B        'F',0 
00001527                           621  
00001527                           622  
00001527                           623  *-----Carriage Return
00001527  =0000000D                624  CR              EQU          $0D
00001527                           625  *-----------Line Feed
00001527  =0000000A                626  LF              EQU          $0A
00001527                           627  
00001527= 0D 0A 00                 628  NEW_LINE:       DC.B         '',CR,LF,0
0000152A                           629  
0000152A                           630      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDA_MSG            13CF
ADDQ_MSG            13D4
ADD_MSG             13CB
AND_MSG             13EB
ASCII_DONE          106E
A_MSG               151B
BRA_MSG             13B2
B_MSG               151D
CHECK_OPCODES       116A
CONVERT_TO_ASCII    1056
CR                  D
C_MSG               151F
DONE                1158
D_MSG               1521
EA_ISOLATE_8_6      13F6
EIGHT_MSG           1517
ENDING_MSG          147E
END_ADDR            14DC
E_MSG               1523
FIVE_MSG            1511
FOUR_MSG            150F
F_MSG               1525
GOODBYE_MSG         14A0
INTRO_MSG           1434
ISOLATE_15_11       124A
ISOLATE_15_12       11D2
ISOLATE_15_14       125C
ISOLATE_15_6        121E
ISOLATE_15_8        1230
ISOLATE_16          120C
ISOLATE_8_6         126E
JSR_MSG             13F2
LEA_MSG             13C7
LETTER_ASCII        1084
LF                  A
MOVEA_MSG           13C1
MOVEM_MSG           13BB
MOVEQ_MSG           13E5
MOVE_MSG            13B6
NEW_LINE            1527
NINE_MSG            1519
NOP_MSG             13E1
NOT_MSG             13AE
NUMBER_ASCII        1070
ONE_MSG             1509
OP_CODE_ADD         12FA
OP_CODE_ADDA        130C
OP_CODE_ADDQ        131E
OP_CODE_AND         1378
OP_CODE_BRA         12A0
OP_CODE_JSR         139C
OP_CODE_LEA         12B2
OP_CODE_MOVE        12C4
OP_CODE_MOVEA       12D6
OP_CODE_MOVEM       12E8
OP_CODE_MOVEQ       1366
OP_CODE_NOP         1354
OP_CODE_NOT         128E
OP_CODE_OR          138A
OP_CODE_RTS         1342
OP_CODE_SUB         1330
OR_MSG              13EF
PRINT_DONE          1126
PRINT_LOOP          10F8
PRINT_MEMORY_LOOP   1098
RETURN              11D0
REVERSE_DONE        1156
REVERSE_LOOP        1138
REVERSE_START       1128
RTS_MSG             13DD
SEVEN_MSG           1515
SIX_MSG             1513
SPACE_MSG           1504
START               1000
STARTING_MSG        145A
STA_ADDR            14B4
SUB_MSG             13D9
TEST                13F8
THREE_MSG           150D
TWO_MSG             150B
ZERO_MSG            1507
