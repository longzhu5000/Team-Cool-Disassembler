00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 8/8/2022 6:55:08 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :Disassembler
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  START:                  ; first instruction of program
00001000                             9  
00001000                            10  * Put program code here
00001000                            11  
00001000                            12  *------LEA = Load effective address
00001000                            13  *------Running Trap #15 while the number 14 is in D0 will print out whatever data is in the address stored in A1
00001000                            14  
00001000  43F9 000018A8             15          LEA         INTRO_MSG,      A1
00001006  103C 000E                 16          MOVE.B      #14,            D0    
0000100A  4E4F                      17          TRAP        #15
0000100C                            18          
0000100C  43F9 000018CE             19          LEA         STARTING_MSG,   A1
00001012  103C 000E                 20          MOVE.B      #14,            D0   
00001016  4E4F                      21          TRAP        #15
00001018                            22          
00001018                            23  *----------------- 
00001018                            24  *       Running trap command 15 while the number 2 is in D0 
00001018                            25  *       Will ask the user to enter input
00001018                            26  *       after the user hits enter, the length of the input is stored in D1
00001018                            27  *       and the user data is stored in the space allocated by STA_ADDR repressented by ASSCI code
00001018                            28  *       IE 31 = 1, 32 = 2 etc etc
00001018                            29  *       If I store the number 1200, it will appear in memory as 31 32 30 30
00001018                            30  
00001018  43F9 00001928             31          LEA         STA_ADDR,       A1
0000101E  103C 0002                 32          MOVE.B      #2,             D0
00001022  4E4F                      33          TRAP        #15
00001024                            34          
00001024  4EB9 00001056             35          JSR         CONVERT_TO_ASCII
0000102A                            36          
0000102A                            37          * A3 now has our Starting Address
0000102A  2647                      38          MOVEA.L     D7,             A3
0000102C                            39          
0000102C  4282                      40          CLR.L       D2
0000102E  4287                      41          CLR.L       D7
00001030                            42          
00001030  43F9 000018F2             43          LEA         ENDING_MSG,     A1
00001036  103C 000E                 44          MOVE.B      #14,            D0
0000103A  4E4F                      45          TRAP        #15
0000103C                            46          
0000103C  43F9 00001950             47          LEA         END_ADDR,       A1
00001042  103C 0002                 48          MOVE.B      #2,             D0
00001046  4E4F                      49          TRAP        #15
00001048                            50          
00001048  4EB9 00001056             51          JSR         CONVERT_TO_ASCII
0000104E                            52          * A4 now has our Ending Address
0000104E  2847                      53          MOVEA.L     D7,             A4
00001050                            54          
00001050                            55  
00001050  4EB9 00001098             56          JSR         PRINT_MEMORY_LOOP
00001056                            57          
00001056                            58          
00001056                            59          
00001056                            60          *BRA         DONE
00001056                            61          *   ASCII conversion
00001056                            62  *---------------------------------------        
00001056                            63  CONVERT_TO_ASCII:             
00001056  0C01 0000                 64          CMPI.B      #$0,            D1
0000105A  6700 0012                 65          BEQ         ASCII_DONE
0000105E  1419                      66          MOVE.B      (A1)+,          D2
00001060  103C 0039                 67          MOVE.B      #$39,           D0
00001064  B400                      68          CMP.B       D0,             D2
00001066  6F00 0008                 69          BLE         NUMBER_ASCII   
0000106A  6000 0018                 70          BRA         LETTER_ASCII  
0000106E                            71  
0000106E                            72  ASCII_DONE:
0000106E  4E75                      73          RTS
00001070                            74          
00001070                            75  NUMBER_ASCII:
00001070  5301                      76          SUBI.B      #$1,            D1
00001072  103C 0030                 77          MOVE.B      #$30,           D0
00001076  9400                      78          SUB.B       D0,             D2
00001078  DE02                      79          ADD.B       D2,             D7
0000107A  0C01 0000                 80          CMPI.B      #$0,            D1
0000107E  67EE                      81          BEQ         ASCII_DONE
00001080  E987                      82          ASL.L       #4,             D7
00001082  60D2                      83          BRA         CONVERT_TO_ASCII
00001084                            84  LETTER_ASCII:
00001084  5301                      85          SUBI.B      #$1,            D1
00001086  103C 0037                 86          MOVE.B      #$37,           D0
0000108A  9400                      87          SUB.B       D0,             D2
0000108C  DE02                      88          ADD.B       D2,             D7
0000108E  0C01 0000                 89          CMPI.B      #$0,            D1
00001092  67DA                      90          BEQ         ASCII_DONE
00001094  E987                      91          ASL.L       #4,             D7
00001096  60BE                      92          BRA         CONVERT_TO_ASCII
00001098                            93  *---------------------------------------        
00001098                            94          
00001098                            95          
00001098                            96          *   Printing data and addresses
00001098                            97  *---------------------------------------
00001098                            98  
00001098                            99  PRINT_MEMORY_LOOP:
00001098                           100          * add code here to compare current address with end address
00001098                           101          
00001098                           102          * if equal to, or further than ending address jump to DONE
00001098                           103          * SIMHALT
00001098  B9CB                     104          CMP.L       A3,             A4
0000109A  6700 00BC                105          BEQ         DONE
0000109E  6F00 00B8                106          BLE         DONE
000010A2                           107          
000010A2                           108          * We are goiong to keep track of the number of byts we have examined using D1
000010A2                           109          * Before printing the address we have to reverse the order
000010A2  4281                     110          CLR.L       D1
000010A4  4282                     111          CLR.L       D2
000010A6  123C 0008                112          MOVE.B      #$8,            D1
000010AA  260B                     113          MOVE.L      A3,             D3
000010AC  4EB9 00001128            114          JSR         REVERSE_START
000010B2                           115          
000010B2  2607                     116          MOVE.L      D7,             D3
000010B4  4281                     117          CLR.L       D1
000010B6  4282                     118          CLR.L       D2
000010B8  123C 0008                119          MOVE.B      #$8,            D1
000010BC  4EB9 000010F8            120          JSR         PRINT_LOOP
000010C2                           121          
000010C2                           122          
000010C2                           123          * space between address and data
000010C2  43F9 00001978            124          LEA         SPACE_MSG,      A1
000010C8  103C 000E                125          MOVE.B      #14,            D0    
000010CC  4E4F                     126          TRAP        #15
000010CE                           127          
000010CE  4281                     128          CLR.L       D1
000010D0  4282                     129          CLR.L       D2
000010D2  123C 0008                130          MOVE.B      #$8,            D1
000010D6  361B                     131          MOVE.W      (A3)+,          D3
000010D8                           132          *JSR         REVERSE_START
000010D8                           133          
000010D8                           134          *MOVE.L      D7,             D3
000010D8  4281                     135          CLR.L       D1
000010DA  4282                     136          CLR.L       D2
000010DC                           137          *MOVE.B      #$8,            D1
000010DC                           138          *JSR         PRINT_LOOP
000010DC                           139          
000010DC                           140          * Jump to Function in another file
000010DC  4EB9 0000116A            141          JSR         CHECK_OPCODES
000010E2                           142          
000010E2                           143          
000010E2  4281                     144          CLR.L       D1
000010E4  4282                     145          CLR.L       D2
000010E6  4283                     146          CLR.L       D3
000010E8  4284                     147          CLR.L       D4
000010EA                           148          * new line
000010EA  43F9 0000199B            149          LEA         NEW_LINE,       A1
000010F0  103C 000E                150          MOVE.B      #14,            D0    
000010F4  4E4F                     151          TRAP        #15
000010F6                           152  
000010F6                           153          * branch to the start of this method
000010F6  60A0                     154          BRA         PRINT_MEMORY_LOOP
000010F8                           155  
000010F8                           156  
000010F8                           157  PRINT_LOOP:
000010F8                           158  
000010F8                           159          
000010F8                           160          * When D1 == 0, we are done and exit this loop
000010F8  0C01 0000                161          CMPI.B      #$0,            D1
000010FC  6700 0028                162          BEQ         PRINT_DONE
00001100  5301                     163          SUBI.B      #$1,            D1
00001102                           164          
00001102  1403                     165          MOVE.B      D3,             D2
00001104                           166          * Bit shifting to isolate the right most digit
00001104                           167          * 1234 5678 => 8000 0000 => 0000 0008
00001104  103C 001C                168          MOVE.B      #28,            D0    
00001108  E1AA                     169          LSL.L       D0,             D2     
0000110A  E99A                     170          ROL.L       #4,             D2 
0000110C                           171          
0000110C                           172          * Bit shifting to prep the next digit
0000110C                           173          * 1234 4567 => 0123 4567
0000110C  E883                     174          ASR.L       #4, D3
0000110E                           175          
0000110E                           176          *Assuming D4 is empty
0000110E                           177          
0000110E  1802                     178          MOVE.B       D2,            D4
00001110  43F9 0000197B            179          LEA          ZERO_MSG,      A1
00001116                           180          * load the address of Zero_msg
00001116                           181          * because all of the msgs are stored next to each other in order
00001116                           182          * we can simply take the value isolated from the number, multiply it by 2 (msg's take up 2 bytes)
00001116                           183          * and then add it to the address starting at zero_msg
00001116  C8FC 0002                184          MULU         #2,            D4
0000111A  D3C4                     185          ADDA.L       D4,            A1
0000111C                           186          
0000111C                           187          * trap command 14 reads whatever address is in A1, and then spits out the data to the console
0000111C  103C 000E                188          MOVE.B       #14,           D0
00001120  4E4F                     189          TRAP         #15
00001122  60D4                     190          BRA          PRINT_LOOP
00001124  4644                     191          NOT          D4
00001126                           192          
00001126                           193  PRINT_DONE:
00001126  4E75                     194          RTS
00001128                           195          
00001128                           196      *   Reversing the address
00001128                           197  *---------------------------------------
00001128                           198  
00001128                           199  REVERSE_START:        
00001128  4281                     200          CLR.L       D1
0000112A  4287                     201          CLR.L       D7
0000112C  123C 0008                202          MOVE.B      #8,             D1
00001130  4EB9 00001138            203          JSR         REVERSE_LOOP
00001136  4E75                     204          RTS
00001138                           205          
00001138                           206  REVERSE_LOOP:
00001138                           207  
00001138                           208          
00001138  0C01 0000                209          CMPI.B      #$0,            D1
0000113C  6700 0018                210          BEQ         REVERSE_DONE
00001140  5301                     211          SUBI.B      #$1,            D1
00001142  E987                     212          ASL.L       #4,             D7
00001144                           213          
00001144  4285                     214          CLR.L       D5
00001146                           215          
00001146  1A03                     216          MOVE.B      D3,             D5
00001148                           217          
00001148  103C 001C                218          MOVE.B      #28,            D0    
0000114C  E1AD                     219          LSL.L       D0,             D5     
0000114E  E99D                     220          ROL.L       #4,             D5
00001150                           221          
00001150  DE05                     222          ADD.B       D5,             D7
00001152                           223          
00001152                           224          
00001152  E883                     225          ASR.L       #4,             D3
00001154                           226          
00001154  60E2                     227          BRA         REVERSE_LOOP
00001156                           228  
00001156                           229  REVERSE_DONE:
00001156  4E75                     230          RTS
00001158                           231  DONE:
00001158                           232  
00001158  43F9 00001914            233          LEA         GOODBYE_MSG,    A1
0000115E  103C 000E                234          MOVE.B      #14,            D0
00001162  4E4F                     235          TRAP        #15
00001164  103C 0009                236          MOVE.B      #9,             D0
00001168  4E4F                     237          TRAP        #15        
0000116A                           238          
0000116A                           239  
0000116A                           240      *SIMHALT             ; halt simulator
0000116A                           241  
0000116A                           242      INCLUDE         'Disassembler_OPCodes.x68'
0000116A                           243  
0000116A                           244  
0000116A                           245  
0000116A                           246  CHECK_OPCODES:
0000116A  4286                     247          CLR.L   D6
0000116C                           248  
0000116C  4EB9 0000120C            249          JSR     ISOLATE_16
00001172  BC3C 0001                250          CMP.B   #$1,    D6
00001176  6700 0058                251          BEQ     RETURN
0000117A                           252          
0000117A  4EB9 0000121E            253          JSR     ISOLATE_15_6
00001180  BC3C 0001                254          CMP.B   #$1,    D6
00001184  6700 004A                255          BEQ     RETURN
00001188                           256  
00001188  4EB9 00001230            257          JSR     ISOLATE_15_8
0000118E  BC3C 0001                258          CMP.B   #$1,    D6
00001192  6700 003C                259          BEQ     RETURN
00001196                           260          
00001196  4EB9 0000124A            261          JSR     ISOLATE_15_11
0000119C  BC3C 0001                262          CMP.B   #$1,    D6
000011A0  6700 002E                263          BEQ     RETURN
000011A4                           264          
000011A4  4EB9 000011D2            265          JSR     ISOLATE_15_12
000011AA  BC3C 0001                266          CMP.B   #$1,    D6
000011AE  6700 0020                267          BEQ     RETURN
000011B2                           268          
000011B2  4EB9 0000126E            269          JSR     ISOLATE_8_6
000011B8  BC3C 0001                270          CMP.B   #$1,    D6        
000011BC  6700 0012                271          BEQ     RETURN
000011C0                           272          
000011C0  4EB9 0000125C            273          JSR     ISOLATE_15_14    
000011C6  BC3C 0001                274          CMP.B   #$1,    D6
000011CA  6700 0004                275          BEQ     RETURN
000011CE                           276          
000011CE                           277  
000011CE  4E75                     278          RTS
000011D0                           279  RETURN:
000011D0  4E75                     280          RTS
000011D2                           281  
000011D2                           282  ISOLATE_15_12:
000011D2  3803                     283          MOVE.W      D3,     D4
000011D4  343C 000C                284          MOVE.W      #12,     D2
000011D8  E46C                     285          LSR.W       D2,     D4
000011DA                           286          
000011DA  B83C 000D                287          CMP.B       #$D,   D4
000011DE  6700 0132                288          BEQ         OP_CODE_ADD
000011E2                           289         ;CMP.W       #$D,   D4
000011E2                           290         ;BEQ         OP_CODE_ADDA
000011E2  B83C 0005                291          CMP.B       #$5,   D4
000011E6  6700 014E                292          BEQ         OP_CODE_ADDQ
000011EA  B83C 0009                293          CMP.B       #$9,   D4
000011EE  6700 0158                294          BEQ         OP_CODE_SUB
000011F2                           295          
000011F2  B83C 0007                296          CMP.B       #$7,    D4
000011F6  6700 0186                297          BEQ         OP_CODE_MOVEQ
000011FA  B83C 0008                298          CMP.B       #$8,    D4
000011FE  6700 025C                299          BEQ         OP_CODE_OR      *may get confused with DIVU + any other opcodes that start with 1000 (ones that we are not required to cover)
00001202  B83C 000C                300          CMP.B       #$C,    D4
00001206  6700 01D0                301          BEQ         OP_CODE_AND
0000120A                           302  
0000120A  4E75                     303          RTS
0000120C                           304          
0000120C                           305  ISOLATE_16:
0000120C                           306  
0000120C  B67C 4E71                307          CMP.W       #$4E71, D3
00001210  6700 015A                308          BEQ         OP_CODE_NOP
00001214  B67C 4E75                309          CMP.W       #$4E75, D3
00001218  6700 0140                310          BEQ         OP_CODE_RTS
0000121C                           311  
0000121C  4E75                     312          RTS
0000121E                           313  
0000121E                           314  ISOLATE_15_6:
0000121E                           315          
0000121E  3803                     316          MOVE.W      D3,     D4
00001220  343C 0006                317          MOVE.W      #6,     D2
00001224  E46C                     318          LSR.W       D2,     D4
00001226                           319          
00001226  B87C 013A                320          CMP.W       #$13A,  D4
0000122A  6700 02B4                321          BEQ         OP_CODE_JSR
0000122E                           322          
0000122E  4E75                     323          RTS
00001230                           324  
00001230                           325  ISOLATE_15_8:
00001230  3803                     326          MOVE.W      D3,     D4
00001232  343C 0008                327          MOVE.W      #8,     D2
00001236  E46C                     328          LSR.W       D2,     D4
00001238                           329          
00001238  B83C 0046                330          CMP.B       #$46,   D4
0000123C  6700 0050                331          BEQ         OP_CODE_NOT
00001240  B83C 0060                332          CMP.B       #$60,   D4
00001244  6700 0072                333          BEQ         OP_CODE_BRA
00001248                           334  
00001248  4E75                     335          RTS
0000124A                           336          
0000124A                           337  ISOLATE_15_11:
0000124A  3803                     338          MOVE.W      D3,     D4
0000124C  343C 000B                339          MOVE.W      #11,    D2
00001250  E46C                     340          LSR.W       D2,     D4
00001252                           341          
00001252  B83C 0009                342          CMP.B       #$9,    D4
00001256  6700 00A8                343          BEQ         OP_CODE_MOVEM
0000125A                           344          
0000125A  4E75                     345          RTS
0000125C                           346          
0000125C                           347  ISOLATE_15_14:
0000125C  3803                     348          MOVE.W      D3,     D4
0000125E  343C 000E                349          MOVE.W      #14,    D2
00001262  E46C                     350          LSR.W       D2,     D4
00001264                           351          
00001264  B83C 0000                352          CMP.B       #$0,    D4
00001268  6700 0072                353          BEQ         OP_CODE_MOVE
0000126C                           354          
0000126C  4E75                     355          RTS
0000126E                           356          
0000126E                           357  ISOLATE_8_6:
0000126E  3803                     358          MOVE.W      D3,     D4
00001270  343C 0007                359          MOVE.W      #7,     D2
00001274  E56C                     360          LSL.W       D2,     D4
00001276  343C 000D                361          MOVE.W      #13,    D2
0000127A  E46C                     362          LSR.W       D2,     D4
0000127C                           363          
0000127C  B83C 0001                364          CMP.B       #$1,    D4
00001280  6700 006C                365          BEQ         OP_CODE_MOVEA
00001284  B83C 0007                366          CMP.B       #$7,    D4
00001288  6700 0040                367          BEQ         OP_CODE_LEA
0000128C                           368  
0000128C  4E75                     369          RTS
0000128E                           370  
0000128E                           371  
0000128E                           372  
0000128E                           373  OP_CODE_NOT:
0000128E  43F9 00001504            374          LEA         NOT_MSG, A1
00001294  103C 000E                375          MOVE.B      #14, D0
00001298  4E4F                     376          TRAP        #15
0000129A                           377          
0000129A  4EB9 000015C8            378          JSR         SIZE_7_6
000012A0                           379          
000012A0  43F9 0000154C            380          LEA         WHITESPACE, A1
000012A6  103C 000E                381          MOVE.B      #14, D0
000012AA  4E4F                     382          TRAP        #15
000012AC                           383          
000012AC  4EB9 00001614            384          JSR         EFFECTIVEADD_5_0
000012B2                           385          
000012B2  1C3C 0001                386          MOVE.B      #1,      D6
000012B6                           387          
000012B6  4E75                     388          RTS 
000012B8                           389  OP_CODE_BRA:
000012B8  43F9 00001508            390          LEA         BRA_MSG, A1
000012BE  103C 000E                391          MOVE.B      #14, D0
000012C2  4E4F                     392          TRAP        #15
000012C4                           393          
000012C4  1C3C 0001                394          MOVE.B      #1,      D6
000012C8                           395          *MOVE.W      (A3)+,   D7
000012C8                           396          
000012C8  4E75                     397          RTS
000012CA                           398          
000012CA                           399  OP_CODE_LEA:
000012CA  43F9 0000151D            400          LEA         LEA_MSG, A1
000012D0  103C 000E                401          MOVE.B      #14, D0
000012D4  4E4F                     402          TRAP        #15
000012D6                           403  
000012D6  1C3C 0001                404          MOVE.B      #1,      D6
000012DA                           405  
000012DA  4E75                     406          RTS        
000012DC                           407  OP_CODE_MOVE:
000012DC                           408  
000012DC  43F9 0000150C            409          LEA         MOVE_MSG, A1
000012E2  103C 000E                410          MOVE.B      #14, D0
000012E6  4E4F                     411          TRAP        #15
000012E8                           412  
000012E8  1C3C 0001                413          MOVE.B      #1,      D6
000012EC                           414  
000012EC  4E75                     415          RTS
000012EE                           416          
000012EE                           417  OP_CODE_MOVEA:
000012EE  43F9 00001517            418          LEA         MOVEA_MSG, A1
000012F4  103C 000E                419          MOVE.B      #14, D0
000012F8  4E4F                     420          TRAP        #15
000012FA                           421  
000012FA  1C3C 0001                422          MOVE.B      #1,      D6
000012FE                           423  
000012FE  4E75                     424          RTS
00001300                           425  
00001300                           426  OP_CODE_MOVEM:
00001300  43F9 00001511            427          LEA         MOVEM_MSG, A1
00001306  103C 000E                428          MOVE.B      #14, D0
0000130A  4E4F                     429          TRAP        #15
0000130C                           430  
0000130C  1C3C 0001                431          MOVE.B      #1,      D6
00001310                           432  
00001310  4E75                     433          RTS
00001312                           434  OP_CODE_ADD:
00001312  43F9 00001521            435          LEA         ADD_MSG, A1
00001318  103C 000E                436          MOVE.B      #14, D0
0000131C  4E4F                     437          TRAP        #15
0000131E                           438          
0000131E  1C3C 0001                439          MOVE.B      #1,      D6
00001322                           440          
00001322  4E75                     441          RTS
00001324                           442          
00001324                           443  OP_CODE_ADDA:
00001324  43F9 00001525            444          LEA         ADDA_MSG, A1
0000132A  103C 000E                445          MOVE.B      #14, D0
0000132E  4E4F                     446          TRAP        #15
00001330                           447          
00001330  1C3C 0001                448          MOVE.B      #1,      D6
00001334                           449          
00001334  4E75                     450          RTS
00001336                           451          
00001336                           452  OP_CODE_ADDQ:
00001336  43F9 0000152A            453          LEA         ADDQ_MSG, A1
0000133C  103C 000E                454          MOVE.B      #14, D0
00001340  4E4F                     455          TRAP        #15
00001342                           456          
00001342  1C3C 0001                457          MOVE.B      #1,      D6
00001346                           458          
00001346  4E75                     459          RTS
00001348                           460  
00001348                           461  OP_CODE_SUB:
00001348  43F9 0000152F            462          LEA         SUB_MSG, A1
0000134E  103C 000E                463          MOVE.B      #14, D0
00001352  4E4F                     464          TRAP        #15
00001354                           465          
00001354  1C3C 0001                466          MOVE.B      #1,      D6
00001358                           467          
00001358  4E75                     468          RTS
0000135A                           469          
0000135A                           470  OP_CODE_RTS:
0000135A  43F9 00001533            471          LEA         RTS_MSG, A1
00001360  103C 000E                472          MOVE.B      #14, D0
00001364  4E4F                     473          TRAP        #15
00001366                           474          
00001366  1C3C 0001                475          MOVE.B      #1,      D6
0000136A                           476          
0000136A  4E75                     477          RTS
0000136C                           478          
0000136C                           479  OP_CODE_NOP:
0000136C  43F9 00001537            480          LEA         NOP_MSG, A1
00001372  103C 000E                481          MOVE.B      #14, D0
00001376  4E4F                     482          TRAP        #15
00001378                           483          
00001378  1C3C 0001                484          MOVE.B      #1,      D6
0000137C                           485          
0000137C  4E75                     486          RTS
0000137E                           487          
0000137E                           488  OP_CODE_MOVEQ:
0000137E                           489          *NOTE MOVEQ has static bit at index 8
0000137E  43F9 0000153B            490          LEA         MOVEQ_MSG, A1
00001384  103C 000E                491          MOVE.B      #14, D0
00001388  4E4F                     492          TRAP        #15
0000138A                           493          
0000138A  43F9 0000154C            494          LEA         WHITESPACE, A1
00001390  103C 000E                495          MOVE.B      #14, D0
00001394  4E4F                     496          TRAP        #15
00001396                           497          
00001396  43F9 00001555            498          LEA         IMM_DATA, A1
0000139C  103C 000E                499          MOVE.B      #14, D0
000013A0  4E4F                     500          TRAP        #15
000013A2                           501  
000013A2  43F9 00001557            502          LEA         HEX, A1
000013A8  103C 000E                503          MOVE.B      #14, D0
000013AC  4E4F                     504          TRAP        #15
000013AE                           505         
000013AE  4EB9 000017B2            506          JSR         DATA_7_0
000013B4                           507          
000013B4  43F9 0000154E            508          LEA         WHITESPACE_COM, A1
000013BA  103C 000E                509          MOVE.B      #14, D0
000013BE  4E4F                     510          TRAP        #15
000013C0                           511          
000013C0  43F9 00001551            512          LEA         DATA_REG, A1
000013C6  103C 000E                513          MOVE.B      #14, D0
000013CA  4E4F                     514          TRAP        #15
000013CC                           515          
000013CC  4EB9 0000156A            516          JSR         REGISTER_11_9
000013D2                           517          
000013D2  1C3C 0001                518          MOVE.B      #1,      D6
000013D6                           519          
000013D6  4E75                     520          RTS
000013D8                           521          
000013D8                           522  OP_CODE_AND:
000013D8  43F9 00001541            523          LEA         AND_MSG, A1
000013DE  103C 000E                524          MOVE.B      #14, D0
000013E2  4E4F                     525          TRAP        #15
000013E4                           526          
000013E4                           527          *check opmode
000013E4                           528          *if starts with 1 do Dn ^ <ea> -> <ea>
000013E4                           529          *OPMODE_8_6 will appent size next to opcode
000013E4  4EB9 00001582            530          JSR         OPMODE_8_6
000013EA  E35C                     531          ROL.W       #1, D4
000013EC  6500 0038                532          BCS         OP_CODE_AND2
000013F0                           533          *else...
000013F0                           534          
000013F0  43F9 0000154C            535          LEA         WHITESPACE, A1
000013F6  103C 000E                536          MOVE.B      #14, D0
000013FA  4E4F                     537          TRAP        #15
000013FC                           538          
000013FC                           539          *check ea and print
000013FC  4EB9 00001614            540          JSR         EFFECTIVEADD_5_0
00001402                           541          
00001402  43F9 0000154E            542          LEA         WHITESPACE_COM, A1
00001408  103C 000E                543          MOVE.B      #14, D0
0000140C  4E4F                     544          TRAP        #15
0000140E                           545          
0000140E                           546          *print out data reg
0000140E                           547          
0000140E  43F9 00001551            548          LEA         DATA_REG, A1
00001414  103C 000E                549          MOVE.B      #14, D0
00001418  4E4F                     550          TRAP        #15
0000141A                           551          
0000141A  4EB9 0000156A            552          JSR         REGISTER_11_9
00001420                           553          
00001420                           554          
00001420  1C3C 0001                555          MOVE.B      #1,      D6
00001424                           556          
00001424  4E75                     557          RTS
00001426                           558          
00001426                           559  OP_CODE_AND2:
00001426  43F9 0000154C            560          LEA         WHITESPACE, A1
0000142C  103C 000E                561          MOVE.B      #14, D0
00001430  4E4F                     562          TRAP        #15
00001432                           563          
00001432  43F9 00001551            564          LEA         DATA_REG, A1
00001438  103C 000E                565          MOVE.B      #14, D0
0000143C  4E4F                     566          TRAP        #15
0000143E                           567          
0000143E  4EB9 0000156A            568          JSR         REGISTER_11_9
00001444                           569          
00001444  43F9 0000154E            570          LEA         WHITESPACE_COM, A1
0000144A  103C 000E                571          MOVE.B      #14, D0
0000144E  4E4F                     572          TRAP        #15
00001450                           573          
00001450  4EB9 00001614            574          JSR         EFFECTIVEADD_5_0
00001456                           575          
00001456  1C3C 0001                576          MOVE.B      #1,      D6
0000145A                           577          
0000145A  4E75                     578          RTS
0000145C                           579          
0000145C                           580  OP_CODE_OR:
0000145C  43F9 00001545            581          LEA         OR_MSG, A1
00001462  103C 000E                582          MOVE.B      #14, D0
00001466  4E4F                     583          TRAP        #15
00001468                           584          
00001468  4EB9 00001582            585          JSR         OPMODE_8_6
0000146E  E35C                     586          ROL.W       #1, D4
00001470  6500 0038                587          BCS         OP_CODE_OR2
00001474                           588          
00001474  43F9 0000154C            589          LEA         WHITESPACE, A1
0000147A  103C 000E                590          MOVE.B      #14, D0
0000147E  4E4F                     591          TRAP        #15
00001480                           592          
00001480  4EB9 00001614            593          JSR         EFFECTIVEADD_5_0
00001486                           594          
00001486  43F9 0000154E            595          LEA         WHITESPACE_COM, A1
0000148C  103C 000E                596          MOVE.B      #14, D0
00001490  4E4F                     597          TRAP        #15
00001492                           598          
00001492  43F9 00001551            599          LEA         DATA_REG, A1
00001498  103C 000E                600          MOVE.B      #14, D0
0000149C  4E4F                     601          TRAP        #15
0000149E                           602          
0000149E  4EB9 0000156A            603          JSR         REGISTER_11_9
000014A4                           604              
000014A4  1C3C 0001                605          MOVE.B      #1,      D6
000014A8                           606          
000014A8  4E75                     607          RTS
000014AA                           608          
000014AA                           609  OP_CODE_OR2:
000014AA  43F9 0000154C            610          LEA         WHITESPACE, A1
000014B0  103C 000E                611          MOVE.B      #14, D0
000014B4  4E4F                     612          TRAP        #15
000014B6                           613          
000014B6  43F9 00001551            614          LEA         DATA_REG, A1
000014BC  103C 000E                615          MOVE.B      #14, D0
000014C0  4E4F                     616          TRAP        #15
000014C2                           617          
000014C2  4EB9 0000156A            618          JSR         REGISTER_11_9
000014C8                           619          
000014C8  43F9 0000154E            620          LEA         WHITESPACE_COM, A1
000014CE  103C 000E                621          MOVE.B      #14, D0
000014D2  4E4F                     622          TRAP        #15
000014D4                           623          
000014D4  4EB9 00001614            624          JSR         EFFECTIVEADD_5_0
000014DA                           625          
000014DA  1C3C 0001                626          MOVE.B      #1,      D6
000014DE                           627          
000014DE  4E75                     628          RTS
000014E0                           629          
000014E0                           630  OP_CODE_JSR:
000014E0  43F9 00001548            631          LEA         JSR_MSG, A1
000014E6  103C 000E                632          MOVE.B      #14, D0
000014EA  4E4F                     633          TRAP        #15
000014EC                           634          
000014EC  43F9 0000154C            635          LEA         WHITESPACE, A1
000014F2  103C 000E                636          MOVE.B      #14, D0
000014F6  4E4F                     637          TRAP        #15
000014F8                           638          
000014F8  4EB9 00001614            639          JSR         EFFECTIVEADD_5_0
000014FE                           640          
000014FE  1C3C 0001                641          MOVE.B      #1,      D6
00001502                           642          
00001502  4E75                     643          RTS
00001504                           644  
00001504= 4E 4F 54 00              645  NOT_MSG:        DC.B        'NOT',0
00001508= 42 52 41 00              646  BRA_MSG:        DC.B        'BRA',0
0000150C                           647  
0000150C= 4D 4F 56 45 00           648  MOVE_MSG:       DC.B        'MOVE',0
00001511= 4D 4F 56 45 4D 00        649  MOVEM_MSG:      DC.B        'MOVEM',0
00001517= 4D 4F 56 45 41 00        650  MOVEA_MSG:      DC.B        'MOVEA',0
0000151D= 4C 45 41 00              651  LEA_MSG:        DC.B        'LEA',0
00001521                           652  
00001521= 41 44 44 00              653  ADD_MSG:        DC.B        'ADD',0
00001525= 41 44 44 41 00           654  ADDA_MSG:       DC.B        'ADDA',0
0000152A= 41 44 44 51 00           655  ADDQ_MSG:       DC.B        'ADDQ',0
0000152F= 53 55 42 00              656  SUB_MSG:        DC.B        'SUB',0
00001533= 52 54 53 00              657  RTS_MSG:        DC.B        'RTS',0
00001537= 4E 4F 50 00              658  NOP_MSG:        DC.B        'NOP',0
0000153B                           659  
0000153B= 4D 4F 56 45 51 00        660  MOVEQ_MSG:      DC.B        'MOVEQ',0
00001541= 41 4E 44 00              661  AND_MSG:        DC.B        'AND',0
00001545= 4F 52 00                 662  OR_MSG:         DC.B        'OR',0
00001548= 4A 53 52 00              663  JSR_MSG:        DC.B        'JSR',0
0000154C                           664  
0000154C= 20 00                    665  WHITESPACE:     DC.B        ' ',0
0000154E= 2C 20 00                 666  WHITESPACE_COM: DC.B        ', ',0
00001551                           667  
00001551= 44 00                    668  DATA_REG:        DC.B        'D',0
00001553= 41 00                    669  ADDR_REG:        DC.B        'A',0
00001555                           670  
00001555= 23 00                    671  IMM_DATA:       DC.B        '#',0
00001557= 24 00                    672  HEX:            DC.B        '$',0
00001559                           673  
00001559= 2E 42 00                 674  DOT_BYTE:       DC.B        '.B',0
0000155C= 2E 57 00                 675  DOT_WORD:       DC.B        '.W',0
0000155F= 2E 4C 00                 676  DOT_LONG:       DC.B        '.L',0
00001562                           677  
00001562= 28 00                    678  START_PAREN     DC.B        '(',0
00001564= 29 00                    679  END_PAREN       DC.B        ')',0
00001566                           680  
00001566= 2B 00                    681  PLUS_SIGN       DC.B        '+',0
00001568= 2D 00                    682  MINUS_SIGN      DC.B        '-',0
0000156A                           683  
0000156A                           684  
0000156A                           685  
0000156A                           686  
0000156A                           687  
0000156A                           688  
0000156A                           689  
0000156A                           690  
0000156A                           691  -------------------- end include --------------------
0000156A                           692      INCLUDE         'Disassembler_EA.x68'
0000156A                           693  
0000156A                           694  REGISTER_11_9:
0000156A                           695          *make a copy
0000156A  3803                     696          MOVE.W      D3,     D4
0000156C                           697          
0000156C                           698          *isolate bits 11-9 on the right
0000156C  343C 0004                699          MOVE.W      #4,     D2
00001570  E56C                     700          LSL.W       D2,     D4
00001572  343C 000D                701          MOVE.W      #13,    D2
00001576  E46C                     702          LSR.W       D2,     D4
00001578                           703          
00001578                           704          *print out the register number
00001578  2204                     705          MOVE.L      D4,     D1
0000157A  103C 0003                706          MOVE.B      #3,     D0
0000157E  4E4F                     707          TRAP        #15
00001580                           708          
00001580  4E75                     709          RTS
00001582                           710  OPMODE_8_6:
00001582                           711          *append size to opcode
00001582  3803                     712          MOVE.W      D3,     D4
00001584                           713          
00001584  343C 0007                714          MOVE.W      #7,     D2
00001588  E56C                     715          LSL.W       D2,     D4
0000158A  343C 000D                716          MOVE.W      #13,    D2
0000158E  E46C                     717          LSR.W       D2,     D4
00001590                           718          
00001590  B83C 0000                719          CMP.B       #$0,    D4
00001594  6700 005A                720          BEQ         BYTE_SIZE
00001598                           721          
00001598  B83C 0004                722          CMP.B       #$4,    D4
0000159C  6700 0052                723          BEQ         BYTE_SIZE
000015A0                           724          
000015A0  B83C 0001                725          CMP.B       #$1,    D4
000015A4  6700 0056                726          BEQ         WORD_SIZE
000015A8                           727          
000015A8  B83C 0005                728          CMP.B       #$5,    D4
000015AC  6700 004E                729          BEQ         WORD_SIZE
000015B0                           730          
000015B0  B83C 0002                731          CMP.B       #$2,    D4
000015B4  6700 0052                732          BEQ         LONG_SIZE
000015B8                           733          
000015B8  B83C 0006                734          CMP.B       #$6,    D4
000015BC  6700 004A                735          BEQ         LONG_SIZE
000015C0                           736             
000015C0                           737          *isolates bits 8-6 to D4 on the left side, so rotation can be done in higher level to corresponding output for opmode
000015C0                           738  PREP_FOR_ROT:
000015C0                           739          *MOVE.W      D3,     D4
000015C0                           740          
000015C0  343C 000D                741          MOVE.W      #13,     D2
000015C4  E56C                     742          LSL.W       D2,     D4
000015C6                           743          *MOVE.W      #13,    D2
000015C6                           744          *LSR.W       D2,     D4
000015C6                           745          
000015C6  4E75                     746          RTS
000015C8                           747          
000015C8                           748  SIZE_7_6:
000015C8  3803                     749          MOVE.W      D3,     D4
000015CA                           750          
000015CA  343C 0008                751          MOVE.W      #8,     D2
000015CE  E56C                     752          LSL.W       D2,     D4
000015D0  343C 000E                753          MOVE.W      #14,    D2
000015D4  E46C                     754          LSR.W       D2,     D4
000015D6                           755          
000015D6  B83C 0000                756          CMP.B       #$0,    D4
000015DA  6700 0014                757          BEQ         BYTE_SIZE
000015DE                           758          
000015DE  B83C 0001                759          CMP.B       #$1,    D4
000015E2  6700 0018                760          BEQ         WORD_SIZE
000015E6                           761          
000015E6  B83C 0002                762          CMP.B       #$2,    D4
000015EA  6700 001C                763          BEQ         LONG_SIZE
000015EE                           764          
000015EE  4E75                     765          RTS
000015F0                           766          
000015F0                           767  BYTE_SIZE:
000015F0  43F8 1559                768          LEA         DOT_BYTE, A1
000015F4  103C 000E                769          MOVE.B      #14, D0
000015F8  4E4F                     770          TRAP        #15
000015FA                           771  
000015FA  60C4                     772          BRA         PREP_FOR_ROT
000015FC                           773  WORD_SIZE:
000015FC  43F8 155C                774          LEA         DOT_WORD, A1
00001600  103C 000E                775          MOVE.B      #14, D0
00001604  4E4F                     776          TRAP        #15
00001606                           777          
00001606  60B8                     778          BRA         PREP_FOR_ROT
00001608                           779  LONG_SIZE:
00001608  43F8 155F                780          LEA         DOT_LONG, A1
0000160C  103C 000E                781          MOVE.B      #14, D0
00001610  4E4F                     782          TRAP        #15
00001612                           783          
00001612  60AC                     784          BRA         PREP_FOR_ROT
00001614                           785  EFFECTIVEADD_5_0:
00001614                           786          *isolate mode bits (5-3)
00001614                           787          *make a copy
00001614  3803                     788          MOVE.W      D3,     D4
00001616                           789          
00001616                           790          *isolate bits 5-3 on the right
00001616  343C 000A                791          MOVE.W      #10,     D2
0000161A  E56C                     792          LSL.W       D2,     D4
0000161C  343C 000D                793          MOVE.W      #13,    D2
00001620  E46C                     794          LSR.W       D2,     D4
00001622                           795          
00001622  B83C 0000                796          CMP.B       #$0,    D4
00001626  6700 002C                797          BEQ         DATAR_EA
0000162A                           798          
0000162A  B83C 0001                799          CMP.B       #$1,    D4
0000162E  6700 0046                800          BEQ         ADDR_EA
00001632                           801          
00001632  B83C 0002                802          CMP.B       #$2,    D4
00001636  6700 0060                803          BEQ         ADDP_EA
0000163A                           804          
0000163A  B83C 0003                805          CMP.B       #$3,    D4
0000163E  6700 008E                806          BEQ         ADDPP_EA
00001642                           807          
00001642  B83C 0004                808          CMP.B       #$4,    D4
00001646  6700 00C6                809          BEQ         ADDPM_EA
0000164A                           810          
0000164A  B83C 0007                811          CMP.B       #$7,    D4
0000164E  6700 00FE                812          BEQ         IDATA_EA
00001652                           813  
00001652  4E75                     814          RTS
00001654                           815  DATAR_EA:
00001654                           816          *print the 'D'
00001654  43F8 1551                817          LEA         DATA_REG, A1
00001658  103C 000E                818          MOVE.B      #14, D0
0000165C  4E4F                     819          TRAP        #15
0000165E                           820          
0000165E  3803                     821          MOVE.W      D3,     D4
00001660                           822          
00001660                           823          *print the reg num
00001660                           824          *isolate bits 2-0 on the right
00001660  343C 000D                825          MOVE.W      #13,     D2
00001664  E56C                     826          LSL.W       D2,     D4
00001666  343C 000D                827          MOVE.W      #13,    D2
0000166A  E46C                     828          LSR.W       D2,     D4
0000166C                           829          
0000166C                           830          *print out the register number
0000166C  2204                     831          MOVE.L      D4,     D1
0000166E  103C 0003                832          MOVE.B      #3,     D0
00001672  4E4F                     833          TRAP        #15
00001674                           834  
00001674  4E75                     835          RTS
00001676                           836  ADDR_EA:
00001676                           837          *print the 'A'
00001676  43F8 1553                838          LEA         ADDR_REG, A1
0000167A  103C 000E                839          MOVE.B      #14, D0
0000167E  4E4F                     840          TRAP        #15
00001680                           841          
00001680  3803                     842          MOVE.W      D3,     D4
00001682                           843          
00001682                           844          *print the reg num
00001682                           845          *isolate bits 2-0 on the right
00001682  343C 000D                846          MOVE.W      #13,     D2
00001686  E56C                     847          LSL.W       D2,     D4
00001688  343C 000D                848          MOVE.W      #13,    D2
0000168C  E46C                     849          LSR.W       D2,     D4
0000168E                           850          
0000168E                           851          *print out the register number
0000168E  2204                     852          MOVE.L      D4,     D1
00001690  103C 0003                853          MOVE.B      #3,     D0
00001694  4E4F                     854          TRAP        #15
00001696                           855  
00001696  4E75                     856          RTS
00001698                           857  ADDP_EA:
00001698                           858          *print the '(A'
00001698  43F8 1562                859          LEA         START_PAREN, A1
0000169C  103C 000E                860          MOVE.B      #14, D0
000016A0  4E4F                     861          TRAP        #15
000016A2                           862          
000016A2  43F8 1553                863          LEA         ADDR_REG, A1
000016A6  103C 000E                864          MOVE.B      #14, D0
000016AA  4E4F                     865          TRAP        #15
000016AC                           866          
000016AC  3803                     867          MOVE.W      D3,     D4
000016AE                           868          
000016AE                           869          *print the reg num
000016AE                           870          *isolate bits 2-0 on the right
000016AE  343C 000D                871          MOVE.W      #13,     D2
000016B2  E56C                     872          LSL.W       D2,     D4
000016B4  343C 000D                873          MOVE.W      #13,    D2
000016B8  E46C                     874          LSR.W       D2,     D4
000016BA                           875          
000016BA                           876          *print out the register number
000016BA  2204                     877          MOVE.L      D4,     D1
000016BC  103C 0003                878          MOVE.B      #3,     D0
000016C0  4E4F                     879          TRAP        #15
000016C2                           880          
000016C2  43F8 1564                881          LEA         END_PAREN, A1
000016C6  103C 000E                882          MOVE.B      #14, D0
000016CA  4E4F                     883          TRAP        #15
000016CC  4E75                     884          RTS
000016CE                           885  ADDPP_EA:
000016CE                           886          *print the '(A'
000016CE  43F8 1562                887          LEA         START_PAREN, A1
000016D2  103C 000E                888          MOVE.B      #14, D0
000016D6  4E4F                     889          TRAP        #15
000016D8                           890          
000016D8  43F8 1553                891          LEA         ADDR_REG, A1
000016DC  103C 000E                892          MOVE.B      #14, D0
000016E0  4E4F                     893          TRAP        #15
000016E2                           894          
000016E2  3803                     895          MOVE.W      D3,     D4
000016E4                           896          
000016E4                           897          *print the reg num
000016E4                           898          *isolate bits 2-0 on the right
000016E4  343C 000D                899          MOVE.W      #13,     D2
000016E8  E56C                     900          LSL.W       D2,     D4
000016EA  343C 000D                901          MOVE.W      #13,    D2
000016EE  E46C                     902          LSR.W       D2,     D4
000016F0                           903          
000016F0                           904          *print out the register number
000016F0  2204                     905          MOVE.L      D4,     D1
000016F2  103C 0003                906          MOVE.B      #3,     D0
000016F6  4E4F                     907          TRAP        #15
000016F8                           908          
000016F8  43F8 1564                909          LEA         END_PAREN, A1
000016FC  103C 000E                910          MOVE.B      #14, D0
00001700  4E4F                     911          TRAP        #15
00001702                           912          
00001702  43F8 1566                913          LEA         PLUS_SIGN, A1
00001706  103C 000E                914          MOVE.B      #14, D0
0000170A  4E4F                     915          TRAP        #15
0000170C                           916          
0000170C  4E75                     917          RTS
0000170E                           918  ADDPM_EA:
0000170E                           919          *print the '-(A'
0000170E  43F8 1568                920          LEA         MINUS_SIGN, A1
00001712  103C 000E                921          MOVE.B      #14, D0
00001716  4E4F                     922          TRAP        #15
00001718                           923          
00001718  43F8 1562                924          LEA         START_PAREN, A1
0000171C  103C 000E                925          MOVE.B      #14, D0
00001720  4E4F                     926          TRAP        #15
00001722                           927          
00001722  43F8 1553                928          LEA         ADDR_REG, A1
00001726  103C 000E                929          MOVE.B      #14, D0
0000172A  4E4F                     930          TRAP        #15
0000172C                           931          
0000172C  3803                     932          MOVE.W      D3,     D4
0000172E                           933          
0000172E                           934          *print the reg num
0000172E                           935          *isolate bits 2-0 on the right
0000172E  343C 000D                936          MOVE.W      #13,     D2
00001732  E56C                     937          LSL.W       D2,     D4
00001734  343C 000D                938          MOVE.W      #13,    D2
00001738  E46C                     939          LSR.W       D2,     D4
0000173A                           940          
0000173A                           941          *print out the register number
0000173A  2204                     942          MOVE.L      D4,     D1
0000173C  103C 0003                943          MOVE.B      #3,     D0
00001740  4E4F                     944          TRAP        #15
00001742                           945          
00001742  43F8 1564                946          LEA         END_PAREN, A1
00001746  103C 000E                947          MOVE.B      #14, D0
0000174A  4E4F                     948          TRAP        #15
0000174C                           949          
0000174C  4E75                     950          RTS
0000174E                           951  IDATA_EA:
0000174E                           952          *(not doing this)check register to see if it's W or L addressinG
0000174E                           953          *use (A3)+.W or .L to get the address data
0000174E                           954          *print it out
0000174E                           955          
0000174E                           956          *->take the next long and spit it out
0000174E                           957          *print out the data in hex form
0000174E                           958          *NOTE that if register = 100 it means raw data, can be in decimal b/c not address
0000174E                           959          
0000174E  3803                     960          MOVE.W      D3,     D4
00001750                           961          
00001750                           962          *get reg num
00001750                           963          *isolate bits 2-0 on the right
00001750  343C 000D                964          MOVE.W      #13,     D2
00001754  E56C                     965          LSL.W       D2,     D4
00001756  343C 000D                966          MOVE.W      #13,    D2
0000175A  E46C                     967          LSR.W       D2,     D4
0000175C                           968          
0000175C                           969          *raw data
0000175C  B87C 0004                970          CMP         #$4,    D4
00001760  6700 001E                971          BEQ         IDATA
00001764                           972          
00001764                           973          *W addressing
00001764  B87C 0000                974          CMP         #$0,    D4
00001768  6700 0034                975          BEQ         WADDR
0000176C                           976          
0000176C  43F8 1557                977          LEA         HEX, A1
00001770  103C 000E                978          MOVE.B      #14, D0
00001774  4E4F                     979          TRAP        #15
00001776                           980          
00001776                           981          *MOVE.B      #16,    D2          *base 16
00001776                           982          *MOVE.B      #15,    D0
00001776  281B                     983          MOVE.L      (A3)+,   D4
00001778  4EB9 000017C8            984          JSR         PRINT_LONG_VALUE
0000177E                           985          *TRAP        #15
0000177E                           986          
0000177E  4E75                     987          RTS
00001780                           988  IDATA:
00001780  43F8 1555                989          LEA         IMM_DATA, A1
00001784  103C 000E                990          MOVE.B      #14, D0
00001788  4E4F                     991          TRAP        #15
0000178A                           992          
0000178A  43F8 1557                993          LEA         HEX, A1
0000178E  103C 000E                994          MOVE.B      #14, D0
00001792  4E4F                     995          TRAP        #15
00001794                           996          
00001794                           997          *MOVE.W      (A3)+,     D1
00001794                           998          *MOVE.B      #3,     D0
00001794                           999          *TRAP        #15
00001794                          1000          
00001794                          1001          *MOVE.B      #16,    D2          *base 16
00001794                          1002          *MOVE.B      #15,    D0
00001794  381B                    1003          MOVE.W      (A3)+,   D4
00001796  4EB9 000017FA           1004          JSR         PRINT_WORD_VALUE
0000179C                          1005          *TRAP        #15
0000179C                          1006  
0000179C  4E75                    1007          RTS
0000179E                          1008          
0000179E                          1009  WADDR:
0000179E  43F8 1557               1010          LEA         HEX, A1
000017A2  103C 000E               1011          MOVE.B      #14, D0
000017A6  4E4F                    1012          TRAP        #15
000017A8                          1013          
000017A8                          1014          *MOVE.B      #16,    D2          *base 16
000017A8                          1015          *MOVE.B      #15,    D0
000017A8  381B                    1016          MOVE.W      (A3)+,   D4
000017AA  4EB9 000017FA           1017          JSR         PRINT_WORD_VALUE
000017B0                          1018          *TRAP        #15
000017B0                          1019          
000017B0  4E75                    1020          RTS
000017B2                          1021  
000017B2                          1022          
000017B2                          1023  DATA_7_0:
000017B2                          1024          *make a copy
000017B2  3803                    1025          MOVE.W      D3,     D4
000017B4                          1026          
000017B4                          1027          *isolate bits 7-0 on the right
000017B4  343C 0008               1028          MOVE.W      #8,     D2
000017B8  E56C                    1029          LSL.W       D2,     D4
000017BA  343C 0008               1030          MOVE.W      #8,     D2
000017BE  E46C                    1031          LSR.W       D2,     D4
000017C0                          1032          
000017C0                          1033          *print out the data in hex form
000017C0                          1034          *MOVE.B      #16,    D2          *base 16
000017C0                          1035          *MOVE.B      #15,    D0
000017C0                          1036          *MOVE.W      D4,     D1
000017C0  4EB9 000017FA           1037          JSR         PRINT_WORD_VALUE
000017C6                          1038          *TRAP        #15
000017C6                          1039  
000017C6                          1040  
000017C6  4E75                    1041          RTS
000017C8                          1042          
000017C8                          1043  PRINT_LONG_VALUE
000017C8  48E7 0600               1044          MOVEM.L    D5-D6, -(A7)
000017CC  7C08                    1045          MOVE.L     #8, D6
000017CE                          1046  PRINT_LONG_VALUE_LOOP
000017CE                          1047          *Gets the most significant bit basically
000017CE                          1048          *Could use GET_BIT subroutine but it is 
000017CE                          1049          *costly in terms of registers used
000017CE  2A04                    1050          MOVE.L     D4, D5
000017D0  E08D                    1051          LSR.L      #8, D5
000017D2  E08D                    1052          LSR.L      #8, D5
000017D4  E08D                    1053          LSR.L      #8, D5
000017D6  E88D                    1054          LSR.L      #4, D5
000017D8  E98C                    1055          LSL.L      #4, D4
000017DA  43F9 0000197B           1056          LEA        ZERO_MSG,      A1
000017E0                          1057          * load the address of Zero_msg
000017E0                          1058          * because all of the msgs are stored next to each other in order
000017E0                          1059          * we can simply take the value isolated from the number, multiply it by 2 (msg's take up 2 bytes)
000017E0                          1060          * and then add it to the address starting at zero_msg
000017E0  CAFC 0002               1061          MULU         #2,            D5
000017E4  D3C5                    1062          ADDA.L       D5,            A1
000017E6  103C 000E               1063          MOVE.B      #14, D0
000017EA  4E4F                    1064          TRAP        #15
000017EC  5386                    1065          SUBI.L      #1, D6
000017EE  BC3C 0000               1066          CMP.B       #0, D6
000017F2  66DA                    1067          BNE         PRINT_LONG_VALUE_LOOP
000017F4  4CDF 0060               1068          MOVEM.L    (A7)+, D5-D6
000017F8  4E75                    1069          RTS
000017FA                          1070          
000017FA                          1071  PRINT_WORD_VALUE
000017FA  48E7 0600               1072          MOVEM.L    D5-D6, -(A7)
000017FE  7C04                    1073          MOVE.L     #4, D6
00001800                          1074  PRINT_WORD_VALUE_LOOP
00001800                          1075          *Gets the most significant bit basically
00001800                          1076          *Could use GET_BIT subroutine but it is 
00001800                          1077          *costly in terms of registers used
00001800  3A04                    1078          MOVE.W     D4, D5
00001802  EC4D                    1079          LSR.W      #6, D5
00001804  EC4D                    1080          LSR.W      #6, D5
00001806  E94C                    1081          LSL.W      #4, D4
00001808  43F9 0000197B           1082          LEA        ZERO_MSG,      A1
0000180E                          1083          * load the address of Zero_msg
0000180E                          1084          * because all of the msgs are stored next to each other in order
0000180E                          1085          * we can simply take the value isolated from the number, multiply it by 2 (msg's take up 2 bytes)
0000180E                          1086          * and then add it to the address starting at zero_msg
0000180E  CAFC 0002               1087          MULU         #2,            D5
00001812  D3C5                    1088          ADDA.L       D5,            A1
00001814  103C 000E               1089          MOVE.B      #14, D0
00001818  4E4F                    1090          TRAP        #15
0000181A  5386                    1091          SUBI.L      #1, D6
0000181C  BC3C 0000               1092          CMP.B       #0, D6
00001820  66DE                    1093          BNE         PRINT_WORD_VALUE_LOOP
00001822  4CDF 0060               1094          MOVEM.L    (A7)+, D5-D6
00001826  4E75                    1095          RTS
00001828                          1096  
00001828                          1097  
00001828                          1098  
00001828                          1099  
00001828                          1100  
00001828                          1101  -------------------- end include --------------------
00001828                          1102      INCLUDE         'Sample_Test.x68'
00001828                          1103  
00001828                          1104                    ; first instruction of program
00001828                          1105  
00001828                          1106  TEST
00001828  4E75                    1107      RTS
0000182A  4E71                    1108      NOP
0000182C                          1109      
0000182C  1401                    1110      MOVE.B      D1,     D2
0000182E  3449                    1111      MOVEA.W     A1,     A2
00001830  48A1 007F               1112      MOVEM.W     A1-A7,  -(A1)
00001834  7000                    1113      MOVEQ       #$0,    D0
00001836  7C32                    1114      MOVEQ       #50,  D6
00001838  45D1                    1115      LEA         (A1),   A2
0000183A                          1116      
0000183A  C401                    1117      AND.B       D1,     D2
0000183C  CA93                    1118      AND.L       (A3),   D5
0000183E  C262                    1119      AND.W       -(A2),  D1
00001840  C07C 007B               1120      AND.W       #123,   D0         
00001844  C4B9 0000A000           1121      AND.L       $A000,  D2          *shows up as A000 in data
0000184A  C479 0000A000           1122      AND.W       $0000A000, D2       *shows up as 0000A000 in data
00001850  C01E                    1123      AND.B       (A6)+,  D0
00001852  C312                    1124      AND.B       D1,     (A2)
00001854  C579 FFFF1234           1125      AND.W       D2, $FFFF1234       *shows up as A000 in data, MOVE.L will take word from next opcode
0000185A                          1126      
0000185A  8401                    1127      OR.B        D1,     D2
0000185C  8C38 1234               1128      OR.B        $00001234,  D6
00001860  8E39 0000ABCD           1129      OR.B        $ABCD,  D7
00001866  8D39 1234ABCD           1130      OR.B        D6,     $1234ABCD
0000186C  8F39 0000ABCD           1131      OR.B        D7,     $ABCD
00001872                          1132      
00001872  70CD                    1133      MOVEQ       #$CD,    D0
00001874  7C32                    1134      MOVEQ       #50,  D6
00001876                          1135      
00001876  4600                    1136      NOT.B       D0
00001878  465A                    1137      NOT.W       (A2)+
0000187A  46B9 0000A000           1138      NOT.L       $A000
00001880                          1139  
00001880                          1140  
00001880  D401                    1141      ADD.B       D1,     D2
00001882  D4C1                    1142      ADDA.W      D1,     A2
00001884  524A                    1143      ADDQ.W      #$1,    A2
00001886  9401                    1144      SUB.B       D1,     D2
00001888                          1145      
00001888  4EB8 1828               1146      JSR         TEST
0000188C  6E9A                    1147      BGT.B       TEST
0000188E  6F00 FF98               1148      BLE.W       TEST
00001892  6700 FF94               1149      BEQ.W       TEST
00001896  6090                    1150      BRA         TEST
00001898  4678 1828               1151      NOT         TEST
0000189C                          1152      
0000189C  E32A                    1153      LSL.B       D1,     D2
0000189E  E22A                    1154      LSR.B       D1,     D2
000018A0  E322                    1155      ASL.B       D1,     D2
000018A2  E222                    1156      ASR.B       D1,     D2
000018A4  E33A                    1157      ROL.B       D1,     D2
000018A6  E23A                    1158      ROR.B       D1,     D2
000018A8                          1159  
000018A8                          1160  
000018A8                          1161  
000018A8                          1162  
000018A8                          1163  
000018A8                          1164  
000018A8                          1165  
000018A8                          1166  
000018A8                          1167  -------------------- end include --------------------
000018A8                          1168      *INCLUDE         'demo_test.x68'
000018A8                          1169  
000018A8                          1170  
000018A8                          1171  * Put variables and constants here
000018A8                          1172  
000018A8= 57 65 6C 63 6F 6D ...   1173  INTRO_MSG:       DC.B       'Welcome to Team Cools Disassembler!',CR,LF,0
000018CE= 50 6C 65 61 73 65 ...   1174  STARTING_MSG:    DC.B       'Please enter the Starting Address',CR,LF,0
000018F2= 50 6C 65 61 73 65 ...   1175  ENDING_MSG:      DC.B       'Please enter the Ending Address',CR,LF,0
00001914= 44 6F 6E 65 20 52 ...   1176  GOODBYE_MSG:     DC.B       'Done Reading data',CR,LF,0
00001928                          1177  * CR and LF for strings above because we want to go to next line after printing message
00001928                          1178  
00001928                          1179  STA_ADDR         DS.B        40
00001950                          1180  END_ADDR         DS.B        40
00001978                          1181  
00001978                          1182  * no CR and LF for strings below because we want to print each number and letter
00001978                          1183  
00001978= 20 20 00                1184  SPACE_MSG:       DC.B        '  ',0
0000197B                          1185  
0000197B= 30 00                   1186  ZERO_MSG:        DC.B        '0',0
0000197D= 31 00                   1187  ONE_MSG:         DC.B        '1',0
0000197F= 32 00                   1188  TWO_MSG:         DC.B        '2',0
00001981= 33 00                   1189  THREE_MSG:       DC.B        '3',0
00001983= 34 00                   1190  FOUR_MSG:        DC.B        '4',0
00001985= 35 00                   1191  FIVE_MSG:        DC.B        '5',0
00001987= 36 00                   1192  SIX_MSG:         DC.B        '6',0
00001989= 37 00                   1193  SEVEN_MSG:       DC.B        '7',0
0000198B= 38 00                   1194  EIGHT_MSG:       DC.B        '8',0
0000198D= 39 00                   1195  NINE_MSG:        DC.B        '9',0
0000198F= 41 00                   1196  A_MSG:           DC.B        'A',0
00001991= 42 00                   1197  B_MSG:           DC.B        'B',0
00001993= 43 00                   1198  C_MSG:           DC.B        'C',0
00001995= 44 00                   1199  D_MSG:           DC.B        'D',0
00001997= 45 00                   1200  E_MSG:           DC.B        'E',0
00001999= 46 00                   1201  F_MSG:           DC.B        'F',0 
0000199B                          1202  
0000199B                          1203  
0000199B                          1204  *-----Carriage Return
0000199B  =0000000D               1205  CR              EQU          $0D
0000199B                          1206  *-----------Line Feed
0000199B  =0000000A               1207  LF              EQU          $0A
0000199B                          1208  
0000199B= 0D 0A 00                1209  NEW_LINE:       DC.B         '',CR,LF,0
0000199E                          1210  
0000199E                          1211      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDA_MSG            1525
ADDPM_EA            170E
ADDPP_EA            16CE
ADDP_EA             1698
ADDQ_MSG            152A
ADDR_EA             1676
ADDR_REG            1553
ADD_MSG             1521
AND_MSG             1541
ASCII_DONE          106E
A_MSG               198F
BRA_MSG             1508
BYTE_SIZE           15F0
B_MSG               1991
CHECK_OPCODES       116A
CONVERT_TO_ASCII    1056
CR                  D
C_MSG               1993
DATAR_EA            1654
DATA_7_0            17B2
DATA_REG            1551
DONE                1158
DOT_BYTE            1559
DOT_LONG            155F
DOT_WORD            155C
D_MSG               1995
EFFECTIVEADD_5_0    1614
EIGHT_MSG           198B
ENDING_MSG          18F2
END_ADDR            1950
END_PAREN           1564
E_MSG               1997
FIVE_MSG            1985
FOUR_MSG            1983
F_MSG               1999
GOODBYE_MSG         1914
HEX                 1557
IDATA               1780
IDATA_EA            174E
IMM_DATA            1555
INTRO_MSG           18A8
ISOLATE_15_11       124A
ISOLATE_15_12       11D2
ISOLATE_15_14       125C
ISOLATE_15_6        121E
ISOLATE_15_8        1230
ISOLATE_16          120C
ISOLATE_8_6         126E
JSR_MSG             1548
LEA_MSG             151D
LETTER_ASCII        1084
LF                  A
LONG_SIZE           1608
MINUS_SIGN          1568
MOVEA_MSG           1517
MOVEM_MSG           1511
MOVEQ_MSG           153B
MOVE_MSG            150C
NEW_LINE            199B
NINE_MSG            198D
NOP_MSG             1537
NOT_MSG             1504
NUMBER_ASCII        1070
ONE_MSG             197D
OPMODE_8_6          1582
OP_CODE_ADD         1312
OP_CODE_ADDA        1324
OP_CODE_ADDQ        1336
OP_CODE_AND         13D8
OP_CODE_AND2        1426
OP_CODE_BRA         12B8
OP_CODE_JSR         14E0
OP_CODE_LEA         12CA
OP_CODE_MOVE        12DC
OP_CODE_MOVEA       12EE
OP_CODE_MOVEM       1300
OP_CODE_MOVEQ       137E
OP_CODE_NOP         136C
OP_CODE_NOT         128E
OP_CODE_OR          145C
OP_CODE_OR2         14AA
OP_CODE_RTS         135A
OP_CODE_SUB         1348
OR_MSG              1545
PLUS_SIGN           1566
PREP_FOR_ROT        15C0
PRINT_DONE          1126
PRINT_LONG_VALUE    17C8
PRINT_LONG_VALUE_LOOP  17CE
PRINT_LOOP          10F8
PRINT_MEMORY_LOOP   1098
PRINT_WORD_VALUE    17FA
PRINT_WORD_VALUE_LOOP  1800
REGISTER_11_9       156A
RETURN              11D0
REVERSE_DONE        1156
REVERSE_LOOP        1138
REVERSE_START       1128
RTS_MSG             1533
SEVEN_MSG           1989
SIX_MSG             1987
SIZE_7_6            15C8
SPACE_MSG           1978
START               1000
STARTING_MSG        18CE
START_PAREN         1562
STA_ADDR            1928
SUB_MSG             152F
TEST                1828
THREE_MSG           1981
TWO_MSG             197F
WADDR               179E
WHITESPACE          154C
WHITESPACE_COM      154E
WORD_SIZE           15FC
ZERO_MSG            197B
