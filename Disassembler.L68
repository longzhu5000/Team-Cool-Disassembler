00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 8/9/2022 7:41:17 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :Disassembler
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  START:                  ; first instruction of program
00001000                             9  
00001000                            10  * Put program code here
00001000                            11  
00001000                            12  *------LEA = Load effective address
00001000                            13  *------Running Trap #15 while the number 14 is in D0 will print out whatever data is in the address stored in A1
00001000                            14  
00001000  43F9 00001C30             15          LEA         INTRO_MSG,      A1
00001006  103C 000E                 16          MOVE.B      #14,            D0    
0000100A  4E4F                      17          TRAP        #15
0000100C                            18          
0000100C  43F9 00001C56             19          LEA         STARTING_MSG,   A1
00001012  103C 000E                 20          MOVE.B      #14,            D0   
00001016  4E4F                      21          TRAP        #15
00001018                            22          
00001018                            23  *----------------- 
00001018                            24  *       Running trap command 15 while the number 2 is in D0 
00001018                            25  *       Will ask the user to enter input
00001018                            26  *       after the user hits enter, the length of the input is stored in D1
00001018                            27  *       and the user data is stored in the space allocated by STA_ADDR repressented by ASSCI code
00001018                            28  *       IE 31 = 1, 32 = 2 etc etc
00001018                            29  *       If I store the number 1200, it will appear in memory as 31 32 30 30
00001018                            30  
00001018  43F9 00001CB0             31          LEA         STA_ADDR,       A1
0000101E  103C 0002                 32          MOVE.B      #2,             D0
00001022  4E4F                      33          TRAP        #15
00001024                            34          
00001024  4EB9 00001056             35          JSR         CONVERT_TO_ASCII
0000102A                            36          
0000102A                            37          * A3 now has our Starting Address
0000102A  2647                      38          MOVEA.L     D7,             A3
0000102C                            39          
0000102C  4282                      40          CLR.L       D2
0000102E  4287                      41          CLR.L       D7
00001030                            42          
00001030  43F9 00001C7A             43          LEA         ENDING_MSG,     A1
00001036  103C 000E                 44          MOVE.B      #14,            D0
0000103A  4E4F                      45          TRAP        #15
0000103C                            46          
0000103C  43F9 00001CD8             47          LEA         END_ADDR,       A1
00001042  103C 0002                 48          MOVE.B      #2,             D0
00001046  4E4F                      49          TRAP        #15
00001048                            50          
00001048  4EB9 00001056             51          JSR         CONVERT_TO_ASCII
0000104E                            52          * A4 now has our Ending Address
0000104E  2847                      53          MOVEA.L     D7,             A4
00001050                            54          
00001050                            55  
00001050  4EB9 00001098             56          JSR         PRINT_MEMORY_LOOP
00001056                            57          
00001056                            58          
00001056                            59          
00001056                            60          *BRA         DONE
00001056                            61          *   ASCII conversion
00001056                            62  *---------------------------------------        
00001056                            63  CONVERT_TO_ASCII:             
00001056  0C01 0000                 64          CMPI.B      #$0,            D1
0000105A  6700 0012                 65          BEQ         ASCII_DONE
0000105E  1419                      66          MOVE.B      (A1)+,          D2
00001060  103C 0039                 67          MOVE.B      #$39,           D0
00001064  B400                      68          CMP.B       D0,             D2
00001066  6F00 0008                 69          BLE         NUMBER_ASCII   
0000106A  6000 0018                 70          BRA         LETTER_ASCII  
0000106E                            71  
0000106E                            72  ASCII_DONE:
0000106E  4E75                      73          RTS
00001070                            74          
00001070                            75  NUMBER_ASCII:
00001070  5301                      76          SUBI.B      #$1,            D1
00001072  103C 0030                 77          MOVE.B      #$30,           D0
00001076  9400                      78          SUB.B       D0,             D2
00001078  DE02                      79          ADD.B       D2,             D7
0000107A  0C01 0000                 80          CMPI.B      #$0,            D1
0000107E  67EE                      81          BEQ         ASCII_DONE
00001080  E987                      82          ASL.L       #4,             D7
00001082  60D2                      83          BRA         CONVERT_TO_ASCII
00001084                            84  LETTER_ASCII:
00001084  5301                      85          SUBI.B      #$1,            D1
00001086  103C 0037                 86          MOVE.B      #$37,           D0
0000108A  9400                      87          SUB.B       D0,             D2
0000108C  DE02                      88          ADD.B       D2,             D7
0000108E  0C01 0000                 89          CMPI.B      #$0,            D1
00001092  67DA                      90          BEQ         ASCII_DONE
00001094  E987                      91          ASL.L       #4,             D7
00001096  60BE                      92          BRA         CONVERT_TO_ASCII
00001098                            93  *---------------------------------------        
00001098                            94          
00001098                            95          
00001098                            96          *   Printing data and addresses
00001098                            97  *---------------------------------------
00001098                            98  
00001098                            99  PRINT_MEMORY_LOOP:
00001098                           100          * add code here to compare current address with end address
00001098                           101          
00001098                           102          * if equal to, or further than ending address jump to DONE
00001098                           103          * SIMHALT
00001098  B9CB                     104          CMP.L       A3,             A4
0000109A  6700 00BC                105          BEQ         DONE
0000109E  6F00 00B8                106          BLE         DONE
000010A2                           107          
000010A2                           108          * We are goiong to keep track of the number of byts we have examined using D1
000010A2                           109          * Before printing the address we have to reverse the order
000010A2  4281                     110          CLR.L       D1
000010A4  4282                     111          CLR.L       D2
000010A6  123C 0008                112          MOVE.B      #$8,            D1
000010AA  260B                     113          MOVE.L      A3,             D3
000010AC  4EB9 00001128            114          JSR         REVERSE_START
000010B2                           115          
000010B2  2607                     116          MOVE.L      D7,             D3
000010B4  4281                     117          CLR.L       D1
000010B6  4282                     118          CLR.L       D2
000010B8  123C 0008                119          MOVE.B      #$8,            D1
000010BC  4EB9 000010F8            120          JSR         PRINT_LOOP
000010C2                           121          
000010C2                           122          
000010C2                           123          * space between address and data
000010C2  43F9 00001D00            124          LEA         SPACE_MSG,      A1
000010C8  103C 000E                125          MOVE.B      #14,            D0    
000010CC  4E4F                     126          TRAP        #15
000010CE                           127          
000010CE  4281                     128          CLR.L       D1
000010D0  4282                     129          CLR.L       D2
000010D2  123C 0008                130          MOVE.B      #$8,            D1
000010D6  361B                     131          MOVE.W      (A3)+,          D3
000010D8                           132          *JSR         REVERSE_START
000010D8                           133          
000010D8                           134          *MOVE.L      D7,             D3
000010D8  4281                     135          CLR.L       D1
000010DA  4282                     136          CLR.L       D2
000010DC                           137          *MOVE.B      #$8,            D1
000010DC                           138          *JSR         PRINT_LOOP
000010DC                           139          
000010DC                           140          * Jump to Function in another file
000010DC  4EB9 0000116A            141          JSR         CHECK_OPCODES
000010E2                           142          
000010E2                           143          
000010E2  4281                     144          CLR.L       D1
000010E4  4282                     145          CLR.L       D2
000010E6  4283                     146          CLR.L       D3
000010E8  4284                     147          CLR.L       D4
000010EA                           148          * new line
000010EA  43F9 00001D99            149          LEA         NEW_LINE,       A1
000010F0  103C 000E                150          MOVE.B      #14,            D0    
000010F4  4E4F                     151          TRAP        #15
000010F6                           152  
000010F6                           153          * branch to the start of this method
000010F6  60A0                     154          BRA         PRINT_MEMORY_LOOP
000010F8                           155  
000010F8                           156  
000010F8                           157  PRINT_LOOP:
000010F8                           158  
000010F8                           159          
000010F8                           160          * When D1 == 0, we are done and exit this loop
000010F8  0C01 0000                161          CMPI.B      #$0,            D1
000010FC  6700 0028                162          BEQ         PRINT_DONE
00001100  5301                     163          SUBI.B      #$1,            D1
00001102                           164          
00001102  1403                     165          MOVE.B      D3,             D2
00001104                           166          * Bit shifting to isolate the right most digit
00001104                           167          * 1234 5678 => 8000 0000 => 0000 0008
00001104  103C 001C                168          MOVE.B      #28,            D0    
00001108  E1AA                     169          LSL.L       D0,             D2     
0000110A  E99A                     170          ROL.L       #4,             D2 
0000110C                           171          
0000110C                           172          * Bit shifting to prep the next digit
0000110C                           173          * 1234 4567 => 0123 4567
0000110C  E88B                     174          LSR.L       #4, D3
0000110E                           175          
0000110E                           176          *Assuming D4 is empty
0000110E                           177          
0000110E  1802                     178          MOVE.B       D2,            D4
00001110  43F9 00001D03            179          LEA          ZERO_MSG,      A1
00001116                           180          * load the address of Zero_msg
00001116                           181          * because all of the msgs are stored next to each other in order
00001116                           182          * we can simply take the value isolated from the number, multiply it by 2 (msg's take up 2 bytes)
00001116                           183          * and then add it to the address starting at zero_msg
00001116  C8FC 0002                184          MULU         #2,            D4
0000111A  D3C4                     185          ADDA.L       D4,            A1
0000111C                           186          
0000111C                           187          * trap command 14 reads whatever address is in A1, and then spits out the data to the console
0000111C  103C 000E                188          MOVE.B       #14,           D0
00001120  4E4F                     189          TRAP         #15
00001122  60D4                     190          BRA          PRINT_LOOP
00001124  4644                     191          NOT          D4
00001126                           192          
00001126                           193  PRINT_DONE:
00001126  4E75                     194          RTS
00001128                           195          
00001128                           196      *   Reversing the address
00001128                           197  *---------------------------------------
00001128                           198  
00001128                           199  REVERSE_START:        
00001128  4281                     200          CLR.L       D1
0000112A  4287                     201          CLR.L       D7
0000112C  123C 0008                202          MOVE.B      #8,             D1
00001130  4EB9 00001138            203          JSR         REVERSE_LOOP
00001136  4E75                     204          RTS
00001138                           205          
00001138                           206  REVERSE_LOOP:
00001138                           207  
00001138                           208          
00001138  0C01 0000                209          CMPI.B      #$0,            D1
0000113C  6700 0018                210          BEQ         REVERSE_DONE
00001140  5301                     211          SUBI.B      #$1,            D1
00001142  E987                     212          ASL.L       #4,             D7
00001144                           213          
00001144  4285                     214          CLR.L       D5
00001146                           215          
00001146  1A03                     216          MOVE.B      D3,             D5
00001148                           217          
00001148  103C 001C                218          MOVE.B      #28,            D0    
0000114C  E1AD                     219          LSL.L       D0,             D5     
0000114E  E99D                     220          ROL.L       #4,             D5
00001150                           221          
00001150  DE05                     222          ADD.B       D5,             D7
00001152                           223          
00001152                           224          
00001152  E883                     225          ASR.L       #4,             D3
00001154                           226          
00001154  60E2                     227          BRA         REVERSE_LOOP
00001156                           228  
00001156                           229  REVERSE_DONE:
00001156  4E75                     230          RTS
00001158                           231  DONE:
00001158                           232  
00001158  43F9 00001C9C            233          LEA         GOODBYE_MSG,    A1
0000115E  103C 000E                234          MOVE.B      #14,            D0
00001162  4E4F                     235          TRAP        #15
00001164  103C 0009                236          MOVE.B      #9,             D0
00001168  4E4F                     237          TRAP        #15        
0000116A                           238          
0000116A                           239  
0000116A                           240      *SIMHALT             ; halt simulator
0000116A                           241  
0000116A                           242      INCLUDE         'Disassembler_OPCodes.x68'
0000116A                           243  
0000116A                           244  
0000116A                           245  CHECK_OPCODES:
0000116A                           246  
0000116A  4EB9 0000117E            247          JSR     ISOLATE_15_6
00001170  4EB9 0000118E            248          JSR     ISOLATE_15_8
00001176  4EB9 000011A6            249          JSR     ISOLATE_15_12
0000117C  4E75                     250          RTS
0000117E                           251          
0000117E                           252  ISOLATE_15_6:
0000117E                           253          
0000117E  2803                     254          MOVE.L      D3,     D4
00001180  7406                     255          MOVE.L      #6,     D2
00001182  E4AC                     256          LSR.L       D2,     D4
00001184                           257          
00001184  B87C 013A                258          CMP.W       #$13A,  D4
00001188  6700 0086                259          BEQ         OP_CODE_JSR
0000118C                           260          
0000118C  4E75                     261          RTS
0000118E                           262  
0000118E                           263  
0000118E                           264  ISOLATE_15_8:
0000118E                           265          *SIMHALT
0000118E  2803                     266          MOVE.L      D3,     D4
00001190  7408                     267          MOVE.L      #8,     D2
00001192  E4AC                     268          LSR.L       D2,     D4
00001194                           269          
00001194  B83C 0046                270          CMP.B       #$46,   D4
00001198  6700 0054                271          BEQ         OP_CODE_NOT
0000119C  B83C 0060                272          CMP.B       #$60,   D4
000011A0  6700 005A                273          BEQ         OP_CODE_BRA
000011A4                           274  
000011A4  4E75                     275          RTS
000011A6                           276          
000011A6                           277  ISOLATE_15_12:
000011A6  2803                     278          MOVE.L      D3,     D4
000011A8  740C                     279          MOVE.L      #12,    D2
000011AA  E4AC                     280          LSR.L       D2,     D4
000011AC                           281          
000011AC  B83C 0007                282          CMP.B       #$7,    D4
000011B0  6700 006C                283          BEQ         OP_CODE_MOVEQ
000011B4  B83C 0008                284          CMP.B       #$8,    D4
000011B8  6700 0288                285          BEQ         OP_CODE_OR      *may get confused with DIVU + any other opcodes that start with 1000 (ones that we are not required to cover)
000011BC  B83C 000C                286          CMP.B       #$C,    D4
000011C0  6700 00EE                287          BEQ         OP_CODE_AND
000011C4                           288          *If the 15-12 are 0110
000011C4  B83C 0006                289          CMP.B       #6,     D4
000011C8  6700 00F4                290          BEQ         OP_CODE_BCC
000011CC                           291          *If the 15-12 are 1110, then it is a shift(LSL, LSR, ROR, ROL, ASR, ASL)
000011CC  B83C 000E                292          CMP.B       #14,   D4
000011D0  6700 029E                293          BEQ         OP_CODE_SHIFT_ROTATE
000011D4  B83C 0004                294          CMP.B       #4,     D4
000011D8  6700 0052                295          BEQ         OP_CODE_LEA
000011DC  B83C 000D                296          CMP.B       #%1101, D4
000011E0  6700 014A                297          BEQ         OP_CODE_ADDA
000011E4  B83C 0005                298          CMP.B       #%0101, D4
000011E8  6700 01E6                299          BEQ         OP_CODE_ADDQ
000011EC  4E75                     300          RTS
000011EE                           301  
000011EE                           302  
000011EE                           303  
000011EE                           304  OP_CODE_NOT:
000011EE  43F9 00001D28            305          LEA         NOT_MSG, A1
000011F4  103C 000E                306          MOVE.B      #14, D0
000011F8  4E4F                     307          TRAP        #15
000011FA                           308          
000011FA  4E75                     309          RTS 
000011FC                           310  OP_CODE_BRA:
000011FC  43F9 00001D2C            311          LEA         BRA_MSG, A1
00001202  103C 000E                312          MOVE.B      #14, D0
00001206  4E4F                     313          TRAP        #15
00001208  4EB9 00001732            314          JSR         BR_EA_SIZE_AND_DISPLACEMENT
0000120E  4E75                     315          RTS 
00001210                           316  OP_CODE_JSR:
00001210  43F9 00001D30            317          LEA         JSR_MSG, A1
00001216  103C 000E                318          MOVE.B      #14, D0
0000121A  4E4F                     319          TRAP        #15
0000121C                           320          
0000121C  4E75                     321          RTS
0000121E                           322  OP_CODE_MOVEQ:
0000121E  43F9 00001D34            323          LEA         MOVEQ_MSG, A1
00001224  103C 000E                324          MOVE.B      #14, D0
00001228  4E4F                     325          TRAP        #15
0000122A                           326          
0000122A  4E75                     327          RTS
0000122C                           328  
0000122C                           329  OP_CODE_LEA:
0000122C  48E7 0600                330          MOVEM.L    D5-D6, -(A7)
00001230  7A06                     331          MOVE.L     #6, D5
00001232  7C08                     332          MOVE.L     #8, D6
00001234  4EB9 000015A2            333          JSR        GET_BIT
0000123A  4CDF 0060                334          MOVEM.L    (A7)+, D5-D6
0000123E  B8BC 00000007            335          CMP.L      #7, D4
00001244  6600 0370                336          BNE        INSTRUCTION_DECODE_FAILURE
00001248  48E7 0600                337          MOVEM.L    D5-D6, -(A7)
0000124C  7A00                     338          MOVE.L     #0, D5
0000124E  7C05                     339          MOVE.L     #5, D6
00001250  4EB9 000015A2            340          JSR        GET_BIT
00001256  4CDF 0060                341          MOVEM.L    (A7)+, D5-D6
0000125A  B8BC 00000039            342          CMP.L      #%111001, D4
00001260  6700 002E                343          BEQ        OP_CODE_LEA_PRINT
00001264  B8BC 00000038            344          CMP.L      #%111000, D4
0000126A  6700 0024                345          BEQ        OP_CODE_LEA_PRINT
0000126E  48E7 0600                346          MOVEM.L    D5-D6, -(A7)
00001272  7A03                     347          MOVE.L     #3, D5
00001274  7C05                     348          MOVE.L     #5, D6
00001276  4EB9 000015A2            349          JSR        GET_BIT
0000127C  4CDF 0060                350          MOVEM.L    (A7)+, D5-D6
00001280  B8BC 00000002            351          CMP.L      #%010, D4
00001286  6700 0008                352          BEQ        OP_CODE_LEA_PRINT
0000128A  6000 032A                353          BRA        INSTRUCTION_DECODE_FAILURE
0000128E                           354          *Unreachable
0000128E  4E75                     355          RTS
00001290                           356  OP_CODE_LEA_PRINT
00001290  43F9 00001D3E            357          LEA         LEA_MSG, A1
00001296  103C 000E                358          MOVE.B      #14, D0
0000129A  4E4F                     359          TRAP        #15
0000129C  43F9 00001D00            360          LEA         SPACE_MSG, A1
000012A2  103C 000E                361          MOVE.B      #14, D0
000012A6  4E4F                     362          TRAP        #15
000012A8  4EB9 00001796            363          JSR         LEA_EA
000012AE  4E75                     364          RTS
000012B0                           365  
000012B0                           366  
000012B0                           367  OP_CODE_AND:
000012B0  43F9 00001D3A            368          LEA         AND_MSG, A1
000012B6  103C 000E                369          MOVE.B      #14, D0
000012BA  4E4F                     370          TRAP        #15
000012BC                           371          
000012BC  4E75                     372          RTS
000012BE                           373  
000012BE                           374  OP_CODE_BCC
000012BE                           375          *Get bits from 8-11 to get the condition
000012BE                           376          *Only checking for (BGT, BLE, BEQ). Rest are considered
000012BE                           377          *invalid
000012BE  48E7 0600                378          MOVEM.L    D5-D6, -(A7)
000012C2  7A08                     379          MOVE.L     #8, D5
000012C4  7C0B                     380          MOVE.L     #11, D6
000012C6  4EB9 000015A2            381          JSR        GET_BIT
000012CC  4CDF 0060                382          MOVEM.L    (A7)+, D5-D6
000012D0  B8BC 0000000F            383          CMP.L      #15, D4
000012D6  6700 0018                384          BEQ        OP_CODE_BLE
000012DA  B8BC 0000000E            385          CMP.L      #14, D4
000012E0  6700 0022                386          BEQ        OP_CODE_BGT
000012E4  B8BC 00000007            387          CMP.L      #7,  D4
000012EA  6700 002C                388          BEQ        OP_CODE_BEQ
000012EE                           389          *Invalid instruction for the scope
000012EE  4E75                     390          RTS
000012F0                           391  
000012F0                           392  
000012F0                           393  OP_CODE_BLE
000012F0  43F9 00001D6C            394          LEA         BLE_MSG, A1
000012F6  103C 000E                395          MOVE.B      #14, D0
000012FA  4E4F                     396          TRAP        #15
000012FC  4EB9 00001732            397          JSR         BR_EA_SIZE_AND_DISPLACEMENT
00001302  4E75                     398          RTS
00001304                           399  
00001304                           400  OP_CODE_BGT
00001304  43F9 00001D70            401          LEA         BGT_MSG, A1
0000130A  103C 000E                402          MOVE.B      #14, D0
0000130E  4E4F                     403          TRAP        #15
00001310  4EB9 00001732            404          JSR         BR_EA_SIZE_AND_DISPLACEMENT
00001316  4E75                     405          RTS
00001318                           406  
00001318                           407  
00001318                           408  OP_CODE_BEQ
00001318  43F9 00001D74            409          LEA         BEQ_MSG, A1
0000131E  103C 000E                410          MOVE.B      #14, D0
00001322  4E4F                     411          TRAP        #15
00001324  4EB9 00001732            412          JSR         BR_EA_SIZE_AND_DISPLACEMENT
0000132A  4E75                     413          RTS
0000132C                           414  
0000132C                           415  
0000132C                           416  OP_CODE_ADDA
0000132C  48E7 0600                417          MOVEM.L    D5-D6, -(A7)
00001330  7A06                     418          MOVE.L     #6, D5
00001332  7C08                     419          MOVE.L     #8, D6
00001334  4EB9 000015A2            420          JSR        GET_BIT
0000133A  4CDF 0060                421          MOVEM.L    (A7)+, D5-D6
0000133E  B8BC 00000002            422          CMP.L      #%010, D4
00001344  6F00 0270                423          BLE        INSTRUCTION_DECODE_FAILURE
00001348  B8BC 00000004            424          CMP.L      #%100, D4
0000134E  6700 0266                425          BEQ        INSTRUCTION_DECODE_FAILURE
00001352  B8BC 00000005            426          CMP.L      #%101, D4
00001358  6700 025C                427          BEQ        INSTRUCTION_DECODE_FAILURE
0000135C  B8BC 00000006            428          CMP.L      #%110, D4
00001362  6700 0252                429          BEQ        INSTRUCTION_DECODE_FAILURE
00001366  48E7 0600                430          MOVEM.L    D5-D6, -(A7)
0000136A  7A00                     431          MOVE.L     #0, D5
0000136C  7C05                     432          MOVE.L     #5, D6
0000136E  4EB9 000015A2            433          JSR        GET_BIT
00001374  4CDF 0060                434          MOVEM.L    (A7)+, D5-D6
00001378  B8BC 0000003A            435          CMP.L      #%111010, D4
0000137E  6700 0236                436          BEQ        INSTRUCTION_DECODE_FAILURE
00001382  B8BC 0000003B            437          CMP.L      #%111011, D4
00001388  6700 022C                438          BEQ        INSTRUCTION_DECODE_FAILURE
0000138C  B8BC 0000003C            439          CMP.L      #%111100, D4
00001392  6E00 0222                440          BGT        INSTRUCTION_DECODE_FAILURE
00001396  48E7 0600                441          MOVEM.L    D5-D6, -(A7)
0000139A  7A03                     442          MOVE.L     #3, D5
0000139C  7C05                     443          MOVE.L     #5, D6
0000139E  4EB9 000015A2            444          JSR        GET_BIT
000013A4  4CDF 0060                445          MOVEM.L    (A7)+, D5-D6
000013A8  B8BC 00000005            446          CMP.L      #%101, D4
000013AE  6700 0206                447          BEQ        INSTRUCTION_DECODE_FAILURE
000013B2  B8BC 00000006            448          CMP.L      #%110, D4
000013B8  6700 01FC                449          BEQ        INSTRUCTION_DECODE_FAILURE
000013BC  43F9 00001D7D            450          LEA        ADDA_MSG, A1
000013C2  103C 000E                451          MOVE.B      #14, D0
000013C6  4E4F                     452          TRAP        #15
000013C8  4EB9 000017FE            453          JSR        ADDA_EA_SIZE_AND_EA  
000013CE  4E75                     454          RTS
000013D0                           455  
000013D0                           456  OP_CODE_ADDQ
000013D0  48E7 0600                457          MOVEM.L    D5-D6, -(A7)
000013D4  7A06                     458          MOVE.L     #6, D5
000013D6  7C07                     459          MOVE.L     #7, D6
000013D8  4EB9 000015A2            460          JSR        GET_BIT
000013DE  4CDF 0060                461          MOVEM.L    (A7)+, D5-D6
000013E2  B8BC 00000003            462          CMP.L      #%11, D4
000013E8  6700 01CC                463          BEQ        INSTRUCTION_DECODE_FAILURE
000013EC  48E7 0600                464          MOVEM.L    D5-D6, -(A7)
000013F0  7A00                     465          MOVE.L     #0, D5
000013F2  7C05                     466          MOVE.L     #5, D6
000013F4  4EB9 000015A2            467          JSR        GET_BIT
000013FA  4CDF 0060                468          MOVEM.L    (A7)+, D5-D6
000013FE  B8BC 00000039            469          CMP.L      #%111001, D4
00001404  6E00 01B0                470          BGT        INSTRUCTION_DECODE_FAILURE
00001408  48E7 0600                471          MOVEM.L    D5-D6, -(A7)
0000140C  7A03                     472          MOVE.L     #3, D5
0000140E  7C05                     473          MOVE.L     #5, D6
00001410  4EB9 000015A2            474          JSR        GET_BIT
00001416  4CDF 0060                475          MOVEM.L    (A7)+, D5-D6
0000141A  B8BC 00000005            476          CMP.L      #%101, D4
00001420  6700 0194                477          BEQ        INSTRUCTION_DECODE_FAILURE
00001424  B8BC 00000006            478          CMP.L      #%110, D4
0000142A  6700 018A                479          BEQ        INSTRUCTION_DECODE_FAILURE
0000142E  43F9 00001D78            480          LEA        ADDQ_MSG, A1
00001434  103C 000E                481          MOVE.B      #14, D0
00001438  4E4F                     482          TRAP        #15
0000143A  4EB9 00001904            483          JSR        ADDQ_EA_SIZE_AND_EA
00001440  4E75                     484          RTS
00001442                           485  
00001442                           486  OP_CODE_OR:
00001442                           487          *check for divu/other opcodes that start with 1000
00001442                           488          *isolate bits 8-6 to check for DIVU
00001442  2803                     489          MOVE.L      D3,     D4
00001444  7407                     490          MOVE.L      #7,     D2
00001446  E56C                     491          LSL.W       D2,     D4
00001448  740D                     492          MOVE.L      #13,    D2
0000144A  E46C                     493          LSR.W       D2,     D4
0000144C                           494          
0000144C  B83C 0003                495          CMP.B       #$3,    D4
00001450  6700 0010                496          BEQ         OP_CODE_DATA
00001454                           497          
00001454  43F9 00001D62            498          LEA         OR_MSG, A1
0000145A  103C 000E                499          MOVE.B      #14, D0
0000145E  4E4F                     500          TRAP        #15
00001460                           501          
00001460  4E75                     502          RTS
00001462                           503  OP_CODE_DATA:
00001462  43F9 00001D65            504          LEA         DATA_MSG, A1
00001468  103C 000E                505          MOVE.B      #14, D0
0000146C  4E4F                     506          TRAP        #15
0000146E                           507          
0000146E  4E75                     508          RTS   
00001470                           509  
00001470                           510  
00001470                           511  OP_CODE_SHIFT_ROTATE
00001470                           512          *Now check whether it is register shift or memory shift
00001470                           513          *If the 6-7 bit is 11, then it is a memory else register shift
00001470  48E7 0600                514          MOVEM.L    D5-D6, -(A7)
00001474  7A06                     515          MOVE.L     #6, D5
00001476  7C07                     516          MOVE.L     #7, D6
00001478  4EB9 000015A2            517          JSR        GET_BIT
0000147E  4CDF 0060                518          MOVEM.L    (A7)+, D5-D6
00001482  B8BC 00000003            519          CMP.L      #3, D4
00001488  6700 0056                520          BEQ        OP_CODE_MEMORY_SHIFT_ROTATE
0000148C  6000 0002                521          BRA        OP_CODE_REGISTER_SHIFT_ROTATE
00001490                           522  
00001490                           523  
00001490                           524  OP_CODE_REGISTER_SHIFT_ROTATE
00001490                           525          *Messages are loaded in the order of -ASR, ASL, LSR, LSL, RORX, RORL, ROR, ROL where
00001490                           526          *each message is of 4 bytes. Essentially using a combination of (9-11) bit + dr(8th bit) we
00001490                           527          *can index the appropriate message. Mathy and unreadable code but prevents lot of rebudency
00001490  43F9 00001D42            528          LEA        ASR_MSG, A1
00001496  48E7 0600                529          MOVEM.L    D5-D6, -(A7)
0000149A  7A08                     530          MOVE.L     #8, D5
0000149C  7C08                     531          MOVE.L     #8, D6
0000149E  4EB9 000015A2            532          JSR        GET_BIT
000014A4  4CDF 0060                533          MOVEM.L    (A7)+, D5-D6
000014A8  C8FC 0004                534          MULU         #4,            D4
000014AC  D3C4                     535          ADDA.L       D4,            A1
000014AE                           536          *Check (3, 11) bit 
000014AE                           537          *000->ASR/ASL, 001->LSR/LSL, 011->ROR/ROL
000014AE  48E7 0600                538          MOVEM.L    D5-D6, -(A7)
000014B2  7A03                     539          MOVE.L     #3, D5
000014B4  7C04                     540          MOVE.L     #4, D6
000014B6  4EB9 000015A2            541          JSR        GET_BIT
000014BC  B8BC 00000002            542          CMP.L      #2, D4
000014C2  4CDF 0060                543          MOVEM.L    (A7)+, D5-D6
000014C6  C8FC 0008                544          MULU        #8,      D4
000014CA  D3C4                     545          ADDA.L       D4,            A1
000014CC  103C 000E                546          MOVE.B      #14, D0
000014D0  4E4F                     547          TRAP        #15
000014D2  4EB9 000015F0            548          JSR         SHIFT_ROTATE_EA_SIZE
000014D8  4EB9 00001620            549          JSR         SHIFT_ROTATE_EA_REGISTER
000014DE  4E75                     550          RTS
000014E0                           551  
000014E0                           552  
000014E0                           553  OP_CODE_MEMORY_SHIFT_ROTATE
000014E0                           554          *If mode bits are less than 010, then invalid instruction so just RTS
000014E0  48E7 0600                555          MOVEM.L    D5-D6, -(A7)
000014E4  7A03                     556          MOVE.L     #3, D5
000014E6  7C05                     557          MOVE.L     #5, D6
000014E8  4EB9 000015A2            558          JSR        GET_BIT
000014EE  4CDF 0060                559          MOVEM.L    (A7)+, D5-D6
000014F2  B8BC 00000002            560          CMP.L      #2, D4
000014F8  6B00 00BC                561          BMI        INSTRUCTION_DECODE_FAILURE
000014FC                           562          *If mode bits are 101 or 110, then it is dispacement address register EA which is invalid
000014FC                           563          *for the current scope
000014FC  B8BC 00000005            564          CMP.L      #5, D4
00001502  6700 00B2                565          BEQ        INSTRUCTION_DECODE_FAILURE
00001506  B8BC 00000006            566          CMP.L      #6, D4
0000150C  6700 00A8                567          BEQ        INSTRUCTION_DECODE_FAILURE
00001510                           568          *If mode bits+register bits are greater than 111001, then invalid instruction
00001510  48E7 0600                569          MOVEM.L    D5-D6, -(A7)
00001514  7A00                     570          MOVE.L     #0, D5
00001516  7C05                     571          MOVE.L     #5, D6
00001518  4EB9 000015A2            572          JSR        GET_BIT
0000151E  4CDF 0060                573          MOVEM.L    (A7)+, D5-D6
00001522  B8BC 00000039            574          CMP.L      #%111001, D4
00001528  6E00 008C                575          BGT        INSTRUCTION_DECODE_FAILURE
0000152C  7A09                     576          MOVE.L     #9, D5
0000152E  7C0B                     577          MOVE.L     #11, D6
00001530  4EB9 000015A2            578          JSR        GET_BIT
00001536  B8BC 00000002            579          CMP.L      #2, D4
0000153C  6700 0078                580          BEQ        INSTRUCTION_DECODE_FAILURE *If the 9-11 are 010(RORX, ROLX), instruction decode error.
00001540                           581          *Messages are loaded in the order of -ASR, ASL, LSR, LSL, RORX, RORL, ROR, ROL where
00001540                           582          *each message is of 4 bytes. Essentially using a combination of (9-11) bit + dr(8th bit) we
00001540                           583          *can index the appropriate message. Mathy and unreadable code but prevents lot of rebudency
00001540  43F9 00001D42            584          LEA        ASR_MSG, A1
00001546  48E7 0600                585          MOVEM.L    D5-D6, -(A7)
0000154A  7A08                     586          MOVE.L     #8, D5
0000154C  7C08                     587          MOVE.L     #8, D6
0000154E  4EB9 000015A2            588          JSR        GET_BIT
00001554  4CDF 0060                589          MOVEM.L    (A7)+, D5-D6
00001558  C8FC 0004                590          MULU         #4,            D4
0000155C  D3C4                     591          ADDA.L       D4,            A1
0000155E                           592          *Check (9, 11) bit 
0000155E                           593          *000->ASR/ASL, 001->LSR/LSL, 011->ROR/ROL
0000155E  48E7 0600                594          MOVEM.L    D5-D6, -(A7)
00001562  7A09                     595          MOVE.L     #9, D5
00001564  7C0B                     596          MOVE.L     #11, D6
00001566  4EB9 000015A2            597          JSR        GET_BIT
0000156C  B8BC 00000002            598          CMP.L      #2, D4
00001572  4CDF 0060                599          MOVEM.L    (A7)+, D5-D6
00001576  C8FC 0008                600          MULU        #8,      D4
0000157A  D3C4                     601          ADDA.L       D4,            A1
0000157C  103C 000E                602          MOVE.B      #14, D0
00001580  4E4F                     603          TRAP        #15
00001582  43F9 00001D85            604          LEA        WORD_MSG, A1
00001588  103C 000E                605          MOVE.B      #14, D0
0000158C  4E4F                     606          TRAP        #15
0000158E  43F9 00001D00            607          LEA         SPACE_MSG,      A1
00001594  103C 000E                608          MOVE.B      #14,            D0    
00001598  4E4F                     609          TRAP        #15
0000159A  4EB9 00001704            610          JSR         SHIFT_ROTATE_EA_MEMORY
000015A0  4E75                     611          RTS
000015A2                           612  
000015A2                           613  
000015A2                           614  
000015A2                           615  GET_BIT
000015A2  4284                     616          CLR.L   D4
000015A4  3803                     617          MOVE.W  D3, D4   
000015A6                           618          *Shift it to left by 15-y to get rid of all the bits to the left of yth bit 
000015A6                           619          *and then shift the bits such that the xth bit is the 0th bit
000015A6  4486                     620          NEG.L   D6
000015A8  0686 0000000F            621          ADDI.L  #15, D6
000015AE  DA86                     622          ADD.L   D6, D5
000015B0  ED6C                     623          LSL.W   D6, D4
000015B2  EA6C                     624          LSR.W   D5, D4
000015B4  4E75                     625          RTS
000015B6                           626  
000015B6                           627  INSTRUCTION_DECODE_FAILURE
000015B6  3803                     628          MOVE.W  D3, D4
000015B8  43F9 00001D65            629          LEA DATA_MSG, A1
000015BE  103C 000E                630          MOVE.B      #14, D0
000015C2  4E4F                     631          TRAP        #15
000015C4  43F9 00001D00            632          LEA SPACE_MSG, A1
000015CA  103C 000E                633          MOVE.B      #14, D0
000015CE  4E4F                     634          TRAP        #15
000015D0  43F9 00001D8D            635          LEA DOLLAR_MSG, A1
000015D6  103C 000E                636          MOVE.B      #14, D0
000015DA  4E4F                     637          TRAP        #15
000015DC  4EB9 00001BD0            638          JSR PRINT_WORD_VALUE
000015E2  43F9 00001D99            639          LEA NEW_LINE, A1
000015E8  103C 000E                640          MOVE.B      #14, D0
000015EC  4E4F                     641          TRAP        #15
000015EE  4E75                     642          RTS
000015F0                           643  
000015F0                           644  
000015F0                           645  
000015F0                           646  
000015F0                           647  -------------------- end include --------------------
000015F0                           648      *INCLUDE         'demo_test.x68'
000015F0                           649      INCLUDE          'Disassembler_EA.x68'
000015F0                           650  
000015F0                           651  
000015F0                           652  
000015F0                           653  
000015F0                           654  SHIFT_ROTATE_EA_SIZE
000015F0  48E7 0600                655      MOVEM.L    D5-D6, -(A7)
000015F4  7A06                     656      MOVE.L     #6, D5
000015F6  7C07                     657      MOVE.L     #7, D6
000015F8  4EB8 15A2                658      JSR        GET_BIT
000015FC  4CDF 0060                659      MOVEM.L    (A7)+, D5-D6
00001600  43F9 00001D82            660      LEA        BYTE_MSG, A1
00001606  C8FC 0003                661      MULU       #3, D4
0000160A  D3C4                     662      ADDA.L       D4,  A1
0000160C  103C 000E                663      MOVE.B      #14, D0
00001610  4E4F                     664      TRAP        #15
00001612  43F9 00001D00            665      LEA         SPACE_MSG,      A1
00001618  103C 000E                666      MOVE.B      #14,            D0    
0000161C  4E4F                     667      TRAP        #15
0000161E  4E75                     668      RTS
00001620                           669  
00001620                           670  
00001620                           671  
00001620                           672  
00001620                           673  SHIFT_ROTATE_EA_REGISTER
00001620  48E7 0600                674      MOVEM.L    D5-D6, -(A7)
00001624  7A05                     675      MOVE.L     #5, D5
00001626  7C05                     676      MOVE.L     #5, D6
00001628  4EB8 15A2                677      JSR        GET_BIT
0000162C  4CDF 0060                678      MOVEM.L    (A7)+, D5-D6
00001630  B8BC 00000001            679      CMP.L      #1,  D4
00001636  6600 0070                680      BNE        SHIFT_ROTATE_IMM_SOURCE
0000163A                           681  
0000163A                           682  SHIFT_ROTATE_REGISTER_SOURCE
0000163A  43F9 00001D1D            683      LEA        D_MSG, A1
00001640  103C 000E                684      MOVE.B      #14,   D0    
00001644  4E4F                     685      TRAP        #15
00001646  48E7 0600                686      MOVEM.L    D5-D6, -(A7)
0000164A  7A09                     687      MOVE.L     #9, D5
0000164C  7C0B                     688      MOVE.L     #11, D6
0000164E  4EB8 15A2                689      JSR        GET_BIT
00001652  4CDF 0060                690      MOVEM.L    (A7)+, D5-D6
00001656  43F9 00001D03            691      LEA       ZERO_MSG, A1
0000165C  C8FC 0002                692      MULU      #2, D4    
00001660  D3C4                     693      ADDA.L    D4, A1
00001662  103C 000E                694      MOVE.B      #14,   D0    
00001666  4E4F                     695      TRAP        #15
00001668  6000 0002                696      BRA       SHIFT_ROTATE_REGISTER_DEST
0000166C                           697  
0000166C                           698  SHIFT_ROTATE_REGISTER_DEST
0000166C  43F9 00001D8B            699      LEA        COMMA_MSG, A1    
00001672  103C 000E                700      MOVE.B      #14,   D0    
00001676  4E4F                     701      TRAP        #15
00001678  43F9 00001D1D            702      LEA        D_MSG, A1
0000167E  103C 000E                703      MOVE.B      #14,   D0    
00001682  4E4F                     704      TRAP        #15
00001684  48E7 0600                705      MOVEM.L    D5-D6, -(A7)
00001688  7A00                     706      MOVE.L     #0, D5
0000168A  7C02                     707      MOVE.L     #2, D6
0000168C  4EB8 15A2                708      JSR        GET_BIT
00001690  4CDF 0060                709      MOVEM.L    (A7)+, D5-D6
00001694  43F9 00001D03            710      LEA       ZERO_MSG, A1
0000169A  C8FC 0002                711      MULU      #2, D4    
0000169E  D3C4                     712      ADDA.L    D4, A1
000016A0  103C 000E                713      MOVE.B      #14,   D0    
000016A4  4E4F                     714      TRAP        #15
000016A6  4E75                     715      RTS
000016A8                           716  
000016A8                           717  SHIFT_ROTATE_IMM_SOURCE
000016A8  43F9 00001D8F            718      LEA        HASH_MSG, A1
000016AE  103C 000E                719      MOVE.B      #14,   D0    
000016B2  4E4F                     720      TRAP        #15
000016B4  43F9 00001D8D            721      LEA        DOLLAR_MSG, A1
000016BA  103C 000E                722      MOVE.B      #14,   D0    
000016BE  4E4F                     723      TRAP        #15
000016C0  48E7 0600                724      MOVEM.L    D5-D6, -(A7)
000016C4  7A09                     725      MOVE.L     #9, D5
000016C6  7C0B                     726      MOVE.L     #11, D6
000016C8  4EB8 15A2                727      JSR        GET_BIT
000016CC  4CDF 0060                728      MOVEM.L    (A7)+, D5-D6
000016D0  B8BC 00000000            729      CMP.L      #0, D4
000016D6  6700 001C                730      BEQ       SHIFT_ROTATE_COUNT_8
000016DA  6000 0002                731      BRA       SHIFT_ROTATE_COUNT_1_7
000016DE                           732   
000016DE                           733  SHIFT_ROTATE_COUNT_1_7
000016DE  43F9 00001D03            734      LEA       ZERO_MSG, A1
000016E4  C8FC 0002                735      MULU      #2, D4    
000016E8  D3C4                     736      ADDA.L    D4, A1
000016EA  103C 000E                737      MOVE.B      #14,   D0    
000016EE  4E4F                     738      TRAP        #15
000016F0  6000 FF7A                739      BRA       SHIFT_ROTATE_REGISTER_DEST
000016F4                           740  
000016F4                           741  SHIFT_ROTATE_COUNT_8
000016F4  43F9 00001D13            742      LEA       EIGHT_MSG, A1
000016FA  103C 000E                743      MOVE.B      #14,   D0    
000016FE  4E4F                     744      TRAP        #15
00001700  6000 FF6A                745      BRA       SHIFT_ROTATE_REGISTER_DEST
00001704                           746  
00001704                           747  
00001704                           748  
00001704                           749  
00001704                           750  
00001704                           751  SHIFT_ROTATE_EA_MEMORY
00001704  48E7 0600                752      MOVEM.L    D5-D6, -(A7)
00001708  7A00                     753      MOVE.L     #0, D5
0000170A  7C05                     754      MOVE.L     #5, D6
0000170C  4EB8 15A2                755      JSR        GET_BIT
00001710  4CDF 0060                756      MOVEM.L    (A7)+, D5-D6
00001714  48E7 1600                757      MOVEM.L    D3/D5-D6, -(A7)
00001718  2604                     758      MOVE.L     D4, D3
0000171A  4EB9 000019F6            759      JSR        GET_EA
00001720  4CDF 0068                760      MOVEM.L    (A7)+, D3/D5-D6
00001724  43F9 00001D99            761      LEA         NEW_LINE,       A1
0000172A  103C 000E                762      MOVE.B      #14,            D0    
0000172E  4E4F                     763      TRAP        #15
00001730  4E75                     764      RTS
00001732                           765  
00001732                           766  
00001732                           767  
00001732                           768  BR_EA_SIZE_AND_DISPLACEMENT
00001732  48E7 0600                769      MOVEM.L    D5-D6, -(A7)
00001736  7A00                     770      MOVE.L     #0, D5
00001738  7C07                     771      MOVE.L     #7, D6
0000173A  4EB8 15A2                772      JSR        GET_BIT
0000173E  4CDF 0060                773      MOVEM.L    (A7)+, D5-D6
00001742  B8BC 00000000            774      CMP.L      #0, D4
00001748  6700 0024                775      BEQ        BR_WORD_DISPLACEMENT
0000174C                           776  BR_BYTE_DISPLACEMENT
0000174C  43F9 00001D82            777      LEA         BYTE_MSG, A1
00001752  103C 000E                778      MOVE.B      #14, D0
00001756  4E4F                     779      TRAP        #15
00001758  43F9 00001D00            780      LEA         SPACE_MSG,   A1
0000175E  103C 000E                781      MOVE.B      #14,   D0    
00001762  4E4F                     782      TRAP        #15
00001764  D88B                     783      ADD.L       A3, D4
00001766  4EB9 00001BD0            784      JSR         PRINT_WORD_VALUE
0000176C  4E75                     785      RTS
0000176E                           786  BR_WORD_DISPLACEMENT
0000176E  43F9 00001D85            787      LEA         WORD_MSG, A1
00001774  103C 000E                788      MOVE.B      #14, D0
00001778  4E4F                     789      TRAP        #15
0000177A  43F9 00001D00            790      LEA         SPACE_MSG,   A1
00001780  103C 000E                791      MOVE.B      #14,   D0    
00001784  4E4F                     792      TRAP        #15
00001786  4284                     793      CLR.L       D4
00001788  381B                     794      MOVE.W      (A3)+, D4
0000178A  D88B                     795      ADD.L       A3, D4
0000178C  5584                     796      SUB.L       #2, D4
0000178E  4EB9 00001BD0            797      JSR         PRINT_WORD_VALUE
00001794  4E75                     798      RTS
00001796                           799  
00001796                           800  
00001796                           801  
00001796                           802  
00001796                           803  
00001796                           804  LEA_EA
00001796                           805      *Prints the source operand
00001796  48E7 0600                806      MOVEM.L    D5-D6, -(A7)
0000179A  7A00                     807      MOVE.L     #0, D5
0000179C  7C05                     808      MOVE.L     #5, D6
0000179E  4EB8 15A2                809      JSR        GET_BIT
000017A2  4CDF 0060                810      MOVEM.L    (A7)+, D5-D6
000017A6  48E7 1600                811      MOVEM.L    D3/D5-D6, -(A7)
000017AA  2604                     812      MOVE.L     D4, D3
000017AC  4EB9 000019F6            813      JSR        GET_EA
000017B2  4CDF 0068                814      MOVEM.L    (A7)+, D3/D5-D6
000017B6                           815  
000017B6  43F9 00001D8B            816      LEA        COMMA_MSG, A1
000017BC  103C 000E                817      MOVE.B      #14,   D0    
000017C0  4E4F                     818      TRAP        #15
000017C2                           819  
000017C2                           820      *Prints the dest operand
000017C2  43F9 00001D17            821      LEA        A_MSG, A1
000017C8  103C 000E                822      MOVE.B      #14,   D0    
000017CC  4E4F                     823      TRAP        #15
000017CE  48E7 0600                824      MOVEM.L    D5-D6, -(A7)
000017D2  7A09                     825      MOVE.L     #9, D5
000017D4  7C0B                     826      MOVE.L     #11, D6
000017D6  4EB8 15A2                827      JSR        GET_BIT
000017DA  4CDF 0060                828      MOVEM.L    (A7)+, D5-D6
000017DE  43F9 00001D03            829      LEA       ZERO_MSG, A1
000017E4  C8FC 0002                830      MULU      #2, D4    
000017E8  D3C4                     831      ADDA.L    D4, A1
000017EA  103C 000E                832      MOVE.B      #14,   D0    
000017EE  4E4F                     833      TRAP        #15
000017F0                           834  
000017F0  43F9 00001D99            835      LEA         NEW_LINE,       A1
000017F6  103C 000E                836      MOVE.B      #14,            D0    
000017FA  4E4F                     837      TRAP        #15
000017FC                           838      
000017FC  4E75                     839      RTS
000017FE                           840  
000017FE                           841  
000017FE                           842  
000017FE                           843  
000017FE                           844  ADDA_EA_SIZE_AND_EA 
000017FE  48E7 0600                845      MOVEM.L    D5-D6, -(A7)
00001802  7A08                     846      MOVE.L     #8, D5
00001804  7C08                     847      MOVE.L     #8, D6
00001806  4EB8 15A2                848      JSR        GET_BIT
0000180A  4CDF 0060                849      MOVEM.L    (A7)+, D5-D6
0000180E  43F9 00001D85            850      LEA        WORD_MSG, A1
00001814  C8FC 0003                851      MULU       #3, D4
00001818  D3C4                     852      ADDA.L     D4, A1
0000181A  103C 000E                853      MOVE.B      #14, D0
0000181E  4E4F                     854      TRAP        #15
00001820                           855  
00001820  43F9 00001D00            856      LEA         SPACE_MSG,   A1
00001826  103C 000E                857      MOVE.B      #14,   D0    
0000182A  4E4F                     858      TRAP        #15
0000182C                           859  
0000182C  48E7 0600                860      MOVEM.L    D5-D6, -(A7)
00001830  7A00                     861      MOVE.L     #0, D5
00001832  7C05                     862      MOVE.L     #5, D6
00001834  4EB8 15A2                863      JSR        GET_BIT
00001838  4CDF 0060                864      MOVEM.L    (A7)+, D5-D6
0000183C  B8BC 0000003C            865      CMP.L      #%111100, D4
00001842  6700 0022                866      BEQ        ADDA_EA_IMM_SOURCE
00001846                           867  ADDA_EA_NON_IMM_SOURCE
00001846  48E7 1600                868      MOVEM.L    D3/D5-D6, -(A7)
0000184A  2604                     869      MOVE.L     D4, D3     
0000184C  4EB9 000019F6            870      JSR        GET_EA
00001852  43F9 00001D8B            871      LEA         COMMA_MSG,   A1
00001858  103C 000E                872      MOVE.B      #14,   D0    
0000185C  4E4F                     873      TRAP        #15
0000185E  4CDF 0068                874      MOVEM.L    (A7)+, D3/D5-D6
00001862  6000 0064                875      BRA        ADDA_EA_DEST
00001866                           876  ADDA_EA_IMM_SOURCE
00001866  43F9 00001D8F            877      LEA        HASH_MSG, A1
0000186C  103C 000E                878      MOVE.B      #14,   D0    
00001870  4E4F                     879      TRAP        #15
00001872  43F9 00001D8D            880      LEA        DOLLAR_MSG, A1
00001878  103C 000E                881      MOVE.B      #14,   D0    
0000187C  4E4F                     882      TRAP        #15
0000187E  48E7 0600                883      MOVEM.L    D5-D6, -(A7)
00001882  7A06                     884      MOVE.L     #6, D5
00001884  7C08                     885      MOVE.L     #8, D6
00001886  4EB8 15A2                886      JSR        GET_BIT
0000188A  4CDF 0060                887      MOVEM.L    (A7)+, D5-D6
0000188E  B8BC 00000003            888      CMP.L      #%011, D4
00001894  6700 001A                889      BEQ        ADDA_EA_IMM_WORD
00001898                           890  ADDA_EA_IMM_LONG
00001898  281B                     891      MOVE.L     (A3)+, D4
0000189A  4EB9 00001BFE            892      JSR        PRINT_LONG_VALUE
000018A0                           893  
000018A0  43F9 00001D8B            894      LEA         COMMA_MSG,   A1
000018A6  103C 000E                895      MOVE.B      #14,   D0    
000018AA  4E4F                     896      TRAP        #15
000018AC  6000 001A                897      BRA         ADDA_EA_DEST
000018B0                           898  ADDA_EA_IMM_WORD
000018B0  381B                     899      MOVE.W     (A3)+, D4
000018B2  4EB9 00001BD0            900      JSR        PRINT_WORD_VALUE
000018B8                           901  
000018B8  43F9 00001D8B            902      LEA         COMMA_MSG,   A1
000018BE  103C 000E                903      MOVE.B      #14,   D0    
000018C2  4E4F                     904      TRAP        #15
000018C4  6000 0002                905      BRA         ADDA_EA_DEST
000018C8                           906  
000018C8                           907  ADDA_EA_DEST   
000018C8  48E7 0600                908      MOVEM.L    D5-D6, -(A7)
000018CC  7A09                     909      MOVE.L     #9, D5
000018CE  7C0B                     910      MOVE.L     #11, D6
000018D0  4EB8 15A2                911      JSR        GET_BIT
000018D4  4CDF 0060                912      MOVEM.L    (A7)+, D5-D6
000018D8  43F9 00001D17            913      LEA   A_MSG, A1
000018DE  103C 000E                914      MOVE.B   #14,  D0    
000018E2  4E4F                     915      TRAP     #15
000018E4  43F9 00001D03            916      LEA    ZERO_MSG, A1
000018EA  C8FC 0002                917      MULU       #2, D4
000018EE  D3C4                     918      ADDA.L     D4, A1
000018F0  103C 000E                919      MOVE.B   #14,  D0    
000018F4  4E4F                     920      TRAP     #15
000018F6  43F9 00001D99            921      LEA         NEW_LINE,       A1
000018FC  103C 000E                922      MOVE.B      #14,            D0    
00001900  4E4F                     923      TRAP        #15
00001902  4E75                     924      RTS
00001904                           925  
00001904                           926  
00001904                           927  
00001904                           928  
00001904                           929  ADDQ_EA_SIZE_AND_EA
00001904  48E7 0600                930      MOVEM.L    D5-D6, -(A7)
00001908  7A06                     931      MOVE.L     #6, D5
0000190A  7C07                     932      MOVE.L     #7, D6
0000190C  4EB8 15A2                933      JSR        GET_BIT
00001910  4CDF 0060                934      MOVEM.L    (A7)+, D5-D6
00001914  43F9 00001D82            935      LEA        BYTE_MSG, A1
0000191A  C8FC 0003                936      MULU       #3, D4
0000191E  D3C4                     937      ADDA.L       D4,  A1
00001920  103C 000E                938      MOVE.B      #14, D0
00001924  4E4F                     939      TRAP        #15
00001926  43F9 00001D00            940      LEA         SPACE_MSG,      A1
0000192C  103C 000E                941      MOVE.B      #14,            D0    
00001930  4E4F                     942      TRAP        #15
00001932                           943  
00001932  48E7 0600                944      MOVEM.L    D5-D6, -(A7)
00001936  7A09                     945      MOVE.L     #9, D5
00001938  7C0B                     946      MOVE.L     #11, D6
0000193A  4EB8 15A2                947      JSR        GET_BIT
0000193E  4CDF 0060                948      MOVEM.L    (A7)+, D5-D6
00001942  43F9 00001D8F            949      LEA        HASH_MSG, A1
00001948  103C 000E                950      MOVE.B      #14,   D0    
0000194C  4E4F                     951      TRAP        #15
0000194E  43F9 00001D8D            952      LEA        DOLLAR_MSG, A1
00001954  103C 000E                953      MOVE.B      #14,   D0    
00001958  4E4F                     954      TRAP        #15
0000195A  B8BC 00000000            955      CMP.L      #0, D4
00001960  6700 004E                956      BEQ       ADDQ_ADD_COUNT_8
00001964                           957  
00001964                           958  ADDQ_ADD_COUNT_1_7
00001964  43F9 00001D03            959      LEA       ZERO_MSG, A1
0000196A  C8FC 0002                960      MULU      #2, D4    
0000196E  D3C4                     961      ADDA.L    D4, A1
00001970  103C 000E                962      MOVE.B      #14,   D0    
00001974  4E4F                     963      TRAP        #15
00001976  43F9 00001D8B            964      LEA         COMMA_MSG,   A1
0000197C  103C 000E                965      MOVE.B      #14,   D0    
00001980  4E4F                     966      TRAP        #15
00001982  48E7 0600                967      MOVEM.L    D5-D6, -(A7)
00001986  7A00                     968      MOVE.L     #0, D5
00001988  7C05                     969      MOVE.L     #5, D6
0000198A  4EB8 15A2                970      JSR        GET_BIT
0000198E  4CDF 0060                971      MOVEM.L    (A7)+, D5-D6
00001992  48E7 1600                972      MOVEM.L    D3/D5-D6, -(A7)
00001996  2604                     973      MOVE.L     D4, D3
00001998  4EB9 000019F6            974      JSR        GET_EA
0000199E  4CDF 0068                975      MOVEM.L    (A7)+, D3/D5-D6
000019A2  43F9 00001D99            976      LEA         NEW_LINE,       A1
000019A8  103C 000E                977      MOVE.B      #14,            D0    
000019AC  4E4F                     978      TRAP        #15
000019AE  4E75                     979      RTS
000019B0                           980  
000019B0                           981  ADDQ_ADD_COUNT_8
000019B0  43F9 00001D13            982      LEA       EIGHT_MSG, A1
000019B6  103C 000E                983      MOVE.B      #14,   D0    
000019BA  4E4F                     984      TRAP        #15
000019BC  43F9 00001D8B            985      LEA         COMMA_MSG,   A1
000019C2  103C 000E                986      MOVE.B      #14,   D0    
000019C6  4E4F                     987      TRAP        #15
000019C8  48E7 0600                988      MOVEM.L    D5-D6, -(A7)
000019CC  7A00                     989      MOVE.L     #0, D5
000019CE  7C05                     990      MOVE.L     #5, D6
000019D0  4EB8 15A2                991      JSR        GET_BIT
000019D4  4CDF 0060                992      MOVEM.L    (A7)+, D5-D6
000019D8  48E7 1600                993      MOVEM.L    D3/D5-D6, -(A7)
000019DC  2604                     994      MOVE.L     D4, D3   
000019DE  4EB9 000019F6            995      JSR        GET_EA
000019E4  4CDF 0068                996      MOVEM.L    (A7)+, D3/D5-D6
000019E8  43F9 00001D99            997      LEA         NEW_LINE,       A1
000019EE  103C 000E                998      MOVE.B      #14,            D0    
000019F2  4E4F                     999      TRAP        #15
000019F4  4E75                    1000      RTS
000019F6                          1001  
000019F6                          1002  
000019F6                          1003  
000019F6                          1004  
000019F6                          1005  GET_EA
000019F6  7A03                    1006      MOVE.L     #3, D5
000019F8  7C05                    1007      MOVE.L     #5, D6
000019FA  4EB8 15A2               1008      JSR        GET_BIT
000019FE  B8BC 00000000           1009      CMP.L      #0, D4
00001A04  6700 0048               1010      BEQ        EA_DATA_REGISTER
00001A08  B8BC 00000001           1011      CMP.L      #1, D4
00001A0E  6700 0066               1012      BEQ        EA_ADDR_REGISTER
00001A12  B8BC 00000002           1013      CMP.L      #2, D4
00001A18  6700 0084               1014      BEQ        EA_INDIRECT
00001A1C  B8BC 00000003           1015      CMP.L      #3, D4
00001A22  6700 00BA               1016      BEQ        EA_INDIRECT_INCREMENT
00001A26  B8BC 00000004           1017      CMP.L      #4, D4
00001A2C  6700 00FC               1018      BEQ        EA_INDIRECT_DECREMENT
00001A30                          1019      *101, and 110 mode bits should be detected in disassembler_OPCodes 
00001A30  7A00                    1020      MOVE.L     #0, D5
00001A32  7C02                    1021      MOVE.L     #2, D6
00001A34  4EB8 15A2               1022      JSR        GET_BIT
00001A38  B8BC 00000000           1023      CMP.L      #0, D4
00001A3E  6700 0136               1024      BEQ        EA_ABS_WORD
00001A42  B8BC 00000001           1025      CMP.L      #1, D4
00001A48  6700 0144               1026      BEQ        EA_ABS_LONG
00001A4C                          1027      *Unreachable
00001A4C  4E75                    1028      RTS
00001A4E                          1029      
00001A4E                          1030  
00001A4E                          1031  EA_DATA_REGISTER
00001A4E  43F9 00001D1D           1032      LEA   D_MSG, A1
00001A54  103C 000E               1033      MOVE.B   #14,  D0    
00001A58  4E4F                    1034      TRAP     #15
00001A5A  43F9 00001D03           1035      LEA    ZERO_MSG, A1
00001A60  7A00                    1036      MOVE.L     #0, D5
00001A62  7C02                    1037      MOVE.L     #2, D6
00001A64  4EB8 15A2               1038      JSR        GET_BIT
00001A68  C8FC 0002               1039      MULU       #2, D4
00001A6C  D3C4                    1040      ADDA.L     D4, A1
00001A6E  103C 000E               1041      MOVE.B   #14,  D0    
00001A72  4E4F                    1042      TRAP     #15
00001A74  4E75                    1043      RTS
00001A76                          1044  
00001A76                          1045  
00001A76                          1046  EA_ADDR_REGISTER
00001A76  43F9 00001D17           1047      LEA   A_MSG, A1
00001A7C  103C 000E               1048      MOVE.B   #14,  D0    
00001A80  4E4F                    1049      TRAP     #15
00001A82  43F9 00001D03           1050      LEA    ZERO_MSG, A1
00001A88  7A00                    1051      MOVE.L     #0, D5
00001A8A  7C02                    1052      MOVE.L     #2, D6
00001A8C  4EB8 15A2               1053      JSR        GET_BIT
00001A90  C8FC 0002               1054      MULU       #2, D4
00001A94  D3C4                    1055      ADDA.L     D4, A1
00001A96  103C 000E               1056      MOVE.B   #14,  D0    
00001A9A  4E4F                    1057      TRAP     #15
00001A9C  4E75                    1058      RTS
00001A9E                          1059  
00001A9E                          1060  
00001A9E                          1061  EA_INDIRECT
00001A9E  43F9 00001D95           1062      LEA   OPEN_PARENTHESIS_MSG, A1
00001AA4  103C 000E               1063      MOVE.B   #14,  D0    
00001AA8  4E4F                    1064      TRAP     #15
00001AAA  43F9 00001D17           1065      LEA   A_MSG, A1
00001AB0  103C 000E               1066      MOVE.B   #14,  D0    
00001AB4  4E4F                    1067      TRAP     #15
00001AB6  43F9 00001D03           1068      LEA    ZERO_MSG, A1
00001ABC  7A00                    1069      MOVE.L     #0, D5
00001ABE  7C02                    1070      MOVE.L     #2, D6
00001AC0  4EB8 15A2               1071      JSR        GET_BIT
00001AC4  C8FC 0002               1072      MULU       #2, D4
00001AC8  D3C4                    1073      ADDA.L     D4, A1
00001ACA  103C 000E               1074      MOVE.B   #14,  D0    
00001ACE  4E4F                    1075      TRAP     #15
00001AD0  43F9 00001D97           1076      LEA   CLOSE_PARENTHESIS_MSG, A1
00001AD6  103C 000E               1077      MOVE.B   #14,  D0    
00001ADA  4E4F                    1078      TRAP     #15
00001ADC  4E75                    1079      RTS
00001ADE                          1080  
00001ADE                          1081  
00001ADE                          1082  
00001ADE                          1083  EA_INDIRECT_INCREMENT
00001ADE  43F9 00001D95           1084      LEA   OPEN_PARENTHESIS_MSG, A1
00001AE4  103C 000E               1085      MOVE.B   #14,  D0    
00001AE8  4E4F                    1086      TRAP     #15
00001AEA  43F9 00001D17           1087      LEA   A_MSG, A1
00001AF0  103C 000E               1088      MOVE.B   #14,  D0    
00001AF4  4E4F                    1089      TRAP     #15
00001AF6  43F9 00001D03           1090      LEA    ZERO_MSG, A1
00001AFC  7A00                    1091      MOVE.L     #0, D5
00001AFE  7C02                    1092      MOVE.L     #2, D6
00001B00  4EB8 15A2               1093      JSR        GET_BIT
00001B04  C8FC 0002               1094      MULU       #2, D4
00001B08  D3C4                    1095      ADDA.L     D4, A1
00001B0A  103C 000E               1096      MOVE.B   #14,  D0    
00001B0E  4E4F                    1097      TRAP     #15
00001B10  43F9 00001D97           1098      LEA   CLOSE_PARENTHESIS_MSG, A1
00001B16  103C 000E               1099      MOVE.B   #14,  D0    
00001B1A  4E4F                    1100      TRAP     #15
00001B1C  43F9 00001D91           1101      LEA   PLUS_MSG, A1
00001B22  103C 000E               1102      MOVE.B   #14,  D0    
00001B26  4E4F                    1103      TRAP     #15
00001B28  4E75                    1104      RTS
00001B2A                          1105  
00001B2A                          1106  
00001B2A                          1107  EA_INDIRECT_DECREMENT
00001B2A  43F9 00001D93           1108      LEA   MINUS_MSG, A1
00001B30  103C 000E               1109      MOVE.B   #14,  D0    
00001B34  4E4F                    1110      TRAP     #15
00001B36  43F9 00001D95           1111      LEA   OPEN_PARENTHESIS_MSG, A1
00001B3C  103C 000E               1112      MOVE.B   #14,  D0    
00001B40  4E4F                    1113      TRAP     #15
00001B42  43F9 00001D17           1114      LEA   A_MSG, A1
00001B48  103C 000E               1115      MOVE.B   #14,  D0    
00001B4C  4E4F                    1116      TRAP     #15
00001B4E  43F9 00001D03           1117      LEA    ZERO_MSG, A1
00001B54  7A00                    1118      MOVE.L     #0, D5
00001B56  7C02                    1119      MOVE.L     #2, D6
00001B58  4EB8 15A2               1120      JSR        GET_BIT
00001B5C  C8FC 0002               1121      MULU       #2, D4
00001B60  D3C4                    1122      ADDA.L     D4, A1
00001B62  103C 000E               1123      MOVE.B   #14,  D0    
00001B66  4E4F                    1124      TRAP     #15
00001B68  43F9 00001D97           1125      LEA   CLOSE_PARENTHESIS_MSG, A1
00001B6E  103C 000E               1126      MOVE.B   #14,  D0    
00001B72  4E4F                    1127      TRAP     #15
00001B74  4E75                    1128      RTS
00001B76                          1129  
00001B76                          1130  
00001B76                          1131  
00001B76                          1132  EA_ABS_WORD
00001B76  4284                    1133      CLR.L      D4
00001B78  381B                    1134      MOVE.W     (A3)+, D4
00001B7A  43F9 00001D8D           1135      LEA        DOLLAR_MSG,       A1
00001B80  103C 000E               1136      MOVE.B      #14,            D0    
00001B84  4E4F                    1137      TRAP        #15
00001B86  4EB9 00001BD0           1138      JSR        PRINT_WORD_VALUE
00001B8C  4E75                    1139      RTS
00001B8E                          1140  
00001B8E                          1141  EA_ABS_LONG
00001B8E  281B                    1142      MOVE.L    (A3)+, D4
00001B90  43F9 00001D8D           1143      LEA        DOLLAR_MSG,       A1
00001B96  103C 000E               1144      MOVE.B      #14,            D0    
00001B9A  4E4F                    1145      TRAP        #15
00001B9C  4EB9 00001BFE           1146      JSR        PRINT_LONG_VALUE
00001BA2  4E75                    1147      RTS
00001BA4                          1148  
00001BA4                          1149  
00001BA4                          1150  
00001BA4                          1151  
00001BA4                          1152  PRINT_BYTE_VALUE
00001BA4  48E7 0600               1153          MOVEM.L    D5-D6, -(A7)
00001BA8  7C02                    1154          MOVE.L     #2, D6
00001BAA                          1155  PRINT_BYTE_VALUE_LOOP
00001BAA                          1156          *Gets the most significant bit basically
00001BAA                          1157          *Could use GET_BIT subroutine but it is 
00001BAA                          1158          *costly in terms of registers used
00001BAA  1A04                    1159          MOVE.B     D4, D5
00001BAC  E80D                    1160          LSR.B      #4, D5
00001BAE  E90C                    1161          LSL.B      #4, D4
00001BB0  43F9 00001D03           1162          LEA        ZERO_MSG,      A1
00001BB6                          1163          * load the address of Zero_msg
00001BB6                          1164          * because all of the msgs are stored next to each other in order
00001BB6                          1165          * we can simply take the value isolated from the number, multiply it by 2 (msg's take up 2 bytes)
00001BB6                          1166          * and then add it to the address starting at zero_msg
00001BB6  CAFC 0002               1167          MULU         #2,            D5
00001BBA  D3C5                    1168          ADDA.L       D5,            A1
00001BBC  103C 000E               1169          MOVE.B      #14, D0
00001BC0  4E4F                    1170          TRAP        #15
00001BC2  5386                    1171          SUBI.L      #1, D6
00001BC4  BC3C 0000               1172          CMP.B       #0, D6
00001BC8  66E0                    1173          BNE         PRINT_BYTE_VALUE_LOOP
00001BCA  4CDF 0060               1174          MOVEM.L    (A7)+, D5-D6
00001BCE  4E75                    1175          RTS
00001BD0                          1176  
00001BD0                          1177  
00001BD0                          1178  
00001BD0                          1179  PRINT_WORD_VALUE
00001BD0  48E7 0600               1180          MOVEM.L    D5-D6, -(A7)
00001BD4  7C04                    1181          MOVE.L     #4, D6
00001BD6                          1182  PRINT_WORD_VALUE_LOOP
00001BD6                          1183          *Gets the most significant bit basically
00001BD6                          1184          *Could use GET_BIT subroutine but it is 
00001BD6                          1185          *costly in terms of registers used
00001BD6  3A04                    1186          MOVE.W     D4, D5
00001BD8  EC4D                    1187          LSR.W      #6, D5
00001BDA  EC4D                    1188          LSR.W      #6, D5
00001BDC  E94C                    1189          LSL.W      #4, D4
00001BDE  43F9 00001D03           1190          LEA        ZERO_MSG,      A1
00001BE4                          1191          * load the address of Zero_msg
00001BE4                          1192          * because all of the msgs are stored next to each other in order
00001BE4                          1193          * we can simply take the value isolated from the number, multiply it by 2 (msg's take up 2 bytes)
00001BE4                          1194          * and then add it to the address starting at zero_msg
00001BE4  CAFC 0002               1195          MULU         #2,            D5
00001BE8  D3C5                    1196          ADDA.L       D5,            A1
00001BEA  103C 000E               1197          MOVE.B      #14, D0
00001BEE  4E4F                    1198          TRAP        #15
00001BF0  5386                    1199          SUBI.L      #1, D6
00001BF2  BC3C 0000               1200          CMP.B       #0, D6
00001BF6  66DE                    1201          BNE         PRINT_WORD_VALUE_LOOP
00001BF8  4CDF 0060               1202          MOVEM.L    (A7)+, D5-D6
00001BFC  4E75                    1203          RTS
00001BFE                          1204  
00001BFE                          1205  
00001BFE                          1206  PRINT_LONG_VALUE
00001BFE  48E7 0600               1207          MOVEM.L    D5-D6, -(A7)
00001C02  7C08                    1208          MOVE.L     #8, D6
00001C04                          1209  PRINT_LONG_VALUE_LOOP
00001C04                          1210          *Gets the most significant bit basically
00001C04                          1211          *Could use GET_BIT subroutine but it is 
00001C04                          1212          *costly in terms of registers used
00001C04  2A04                    1213          MOVE.L     D4, D5
00001C06  E08D                    1214          LSR.L      #8, D5
00001C08  E08D                    1215          LSR.L      #8, D5
00001C0A  E08D                    1216          LSR.L      #8, D5
00001C0C  E88D                    1217          LSR.L      #4, D5
00001C0E  E98C                    1218          LSL.L      #4, D4
00001C10  43F9 00001D03           1219          LEA        ZERO_MSG,      A1
00001C16                          1220          * load the address of Zero_msg
00001C16                          1221          * because all of the msgs are stored next to each other in order
00001C16                          1222          * we can simply take the value isolated from the number, multiply it by 2 (msg's take up 2 bytes)
00001C16                          1223          * and then add it to the address starting at zero_msg
00001C16  CAFC 0002               1224          MULU         #2,            D5
00001C1A  D3C5                    1225          ADDA.L       D5,            A1
00001C1C  103C 000E               1226          MOVE.B      #14, D0
00001C20  4E4F                    1227          TRAP        #15
00001C22  5386                    1228          SUBI.L      #1, D6
00001C24  BC3C 0000               1229          CMP.B       #0, D6
00001C28  66DA                    1230          BNE         PRINT_LONG_VALUE_LOOP
00001C2A  4CDF 0060               1231          MOVEM.L    (A7)+, D5-D6
00001C2E  4E75                    1232          RTS
00001C30                          1233  
00001C30                          1234  
00001C30                          1235   
00001C30                          1236  -------------------- end include --------------------
00001C30                          1237  
00001C30                          1238  
00001C30                          1239  * Put variables and constants here
00001C30                          1240  
00001C30= 57 65 6C 63 6F 6D ...   1241  INTRO_MSG:       DC.B       'Welcome to Team Cools Disassembler!',CR,LF,0
00001C56= 50 6C 65 61 73 65 ...   1242  STARTING_MSG:    DC.B       'Please enter the Starting Address',CR,LF,0
00001C7A= 50 6C 65 61 73 65 ...   1243  ENDING_MSG:      DC.B       'Please enter the Ending Address',CR,LF,0
00001C9C= 44 6F 6E 65 20 52 ...   1244  GOODBYE_MSG:     DC.B       'Done Reading data',CR,LF,0
00001CB0                          1245  * CR and LF for strings above because we want to go to next line after printing message
00001CB0                          1246  
00001CB0                          1247  STA_ADDR         DS.B        40
00001CD8                          1248  END_ADDR         DS.B        40
00001D00                          1249  
00001D00                          1250  * no CR and LF for strings below because we want to print each number and letter
00001D00                          1251  
00001D00= 20 20 00                1252  SPACE_MSG:       DC.B        '  ',0
00001D03                          1253  
00001D03= 30 00                   1254  ZERO_MSG:        DC.B        '0',0
00001D05= 31 00                   1255  ONE_MSG:         DC.B        '1',0
00001D07= 32 00                   1256  TWO_MSG:         DC.B        '2',0
00001D09= 33 00                   1257  THREE_MSG:       DC.B        '3',0
00001D0B= 34 00                   1258  FOUR_MSG:        DC.B        '4',0
00001D0D= 35 00                   1259  FIVE_MSG:        DC.B        '5',0
00001D0F= 36 00                   1260  SIX_MSG:         DC.B        '6',0
00001D11= 37 00                   1261  SEVEN_MSG:       DC.B        '7',0
00001D13= 38 00                   1262  EIGHT_MSG:       DC.B        '8',0
00001D15= 39 00                   1263  NINE_MSG:        DC.B        '9',0
00001D17= 41 00                   1264  A_MSG:           DC.B        'A',0
00001D19= 42 00                   1265  B_MSG:           DC.B        'B',0
00001D1B= 43 00                   1266  C_MSG:           DC.B        'C',0
00001D1D= 44 00                   1267  D_MSG:           DC.B        'D',0
00001D1F= 45 00                   1268  E_MSG:           DC.B        'E',0
00001D21= 46 00                   1269  F_MSG:           DC.B        'F',0 
00001D23                          1270  
00001D23                          1271  * opcodes
00001D23= 4A 53 52 20 00          1272  JSRMSG:             DC.B        'JSR ',0
00001D28= 4E 4F 54 00             1273  NOT_MSG:        DC.B        'NOT',0
00001D2C= 42 52 41 00             1274  BRA_MSG:        DC.B        'BRA',0
00001D30= 4A 53 52 00             1275  JSR_MSG:        DC.B        'JSR',0
00001D34= 4D 4F 56 45 51 00       1276  MOVEQ_MSG:      DC.B        'MOVEQ',0
00001D3A= 41 4E 44 00             1277  AND_MSG:        DC.B        'AND',0
00001D3E= 4C 45 41 00             1278  LEA_MSG         DC.B        'LEA',0
00001D42= 41 53 52 00             1279  ASR_MSG         DC.B        'ASR',0
00001D46= 41 53 4C 00             1280  ASL_MSG         DC.B        'ASL',0
00001D4A= 4C 53 52 00             1281  LSR_MSG         DC.B        'LSR',0
00001D4E= 4C 53 4C 00             1282  LSL_MSG         DC.B        'LSL',0
00001D52= 52 4F 58 00             1283  ROXR_MSG        DC.B        'ROX',0  *Unused messages but present because helps in indexing, DONT USE IT
00001D56= 52 4F 58 00             1284  ROXL_MSG        DC.B        'ROX',0  *Unused messages but present because helps in indexing, DONT USE IT
00001D5A= 52 4F 52 00             1285  ROR_MSG         DC.B        'ROR',0
00001D5E= 52 4F 4C 00             1286  ROL_MSG         DC.B        'ROL',0
00001D62= 4F 52 00                1287  OR_MSG:         DC.B        'OR',0
00001D65= 44 41 54 41 00          1288  DATA_MSG:       DC.B        'DATA',0
00001D6A= 42 00                   1289  BCC_MSG         DC.B        'B', 0
00001D6C= 42 4C 45 00             1290  BLE_MSG         DC.B        'BLE', 0
00001D70= 42 47 54 00             1291  BGT_MSG         DC.B        'BGT',0
00001D74= 42 45 51 00             1292  BEQ_MSG         DC.B        'BEQ',0
00001D78= 41 44 44 51 00          1293  ADDQ_MSG        DC.B        'ADDQ',0
00001D7D= 41 44 44 41 00          1294  ADDA_MSG        DC.B        'ADDA',0
00001D82= 2E 42 00                1295  BYTE_MSG        DC.B        '.B', 0
00001D85= 2E 57 00                1296  WORD_MSG        DC.B        '.W', 0
00001D88= 2E 4C 00                1297  LONG_MSG        DC.B        '.L', 0
00001D8B                          1298  
00001D8B= 2C 00                   1299  COMMA_MSG       DC.B        ',', 0
00001D8D= 24 00                   1300  DOLLAR_MSG      DC.B        '$', 0
00001D8F= 23 00                   1301  HASH_MSG        DC.B        '#', 0
00001D91= 2B 00                   1302  PLUS_MSG        DC.B        '+', 0
00001D93= 2D 00                   1303  MINUS_MSG       DC.B        '-', 0
00001D95= 28 00                   1304  OPEN_PARENTHESIS_MSG  DC.B   '(', 0
00001D97= 29 00                   1305  CLOSE_PARENTHESIS_MSG DC.B  ')', 0
00001D99                          1306  *-----Carriage Return
00001D99  =0000000D               1307  CR              EQU          $0D
00001D99                          1308  *-----------Line Feed
00001D99  =0000000A               1309  LF              EQU          $0A
00001D99                          1310  
00001D99= 0D 0A 00                1311  NEW_LINE:       DC.B         '',CR,LF,0
00001D9C                          1312  
00001D9C                          1313      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDA_EA_DEST        18C8
ADDA_EA_IMM_LONG    1898
ADDA_EA_IMM_SOURCE  1866
ADDA_EA_IMM_WORD    18B0
ADDA_EA_NON_IMM_SOURCE  1846
ADDA_EA_SIZE_AND_EA  17FE
ADDA_MSG            1D7D
ADDQ_ADD_COUNT_1_7  1964
ADDQ_ADD_COUNT_8    19B0
ADDQ_EA_SIZE_AND_EA  1904
ADDQ_MSG            1D78
AND_MSG             1D3A
ASCII_DONE          106E
ASL_MSG             1D46
ASR_MSG             1D42
A_MSG               1D17
BCC_MSG             1D6A
BEQ_MSG             1D74
BGT_MSG             1D70
BLE_MSG             1D6C
BRA_MSG             1D2C
BR_BYTE_DISPLACEMENT  174C
BR_EA_SIZE_AND_DISPLACEMENT  1732
BR_WORD_DISPLACEMENT  176E
BYTE_MSG            1D82
B_MSG               1D19
CHECK_OPCODES       116A
CLOSE_PARENTHESIS_MSG  1D97
COMMA_MSG           1D8B
CONVERT_TO_ASCII    1056
CR                  D
C_MSG               1D1B
DATA_MSG            1D65
DOLLAR_MSG          1D8D
DONE                1158
D_MSG               1D1D
EA_ABS_LONG         1B8E
EA_ABS_WORD         1B76
EA_ADDR_REGISTER    1A76
EA_DATA_REGISTER    1A4E
EA_INDIRECT         1A9E
EA_INDIRECT_DECREMENT  1B2A
EA_INDIRECT_INCREMENT  1ADE
EIGHT_MSG           1D13
ENDING_MSG          1C7A
END_ADDR            1CD8
E_MSG               1D1F
FIVE_MSG            1D0D
FOUR_MSG            1D0B
F_MSG               1D21
GET_BIT             15A2
GET_EA              19F6
GOODBYE_MSG         1C9C
HASH_MSG            1D8F
INSTRUCTION_DECODE_FAILURE  15B6
INTRO_MSG           1C30
ISOLATE_15_12       11A6
ISOLATE_15_6        117E
ISOLATE_15_8        118E
JSRMSG              1D23
JSR_MSG             1D30
LEA_EA              1796
LEA_MSG             1D3E
LETTER_ASCII        1084
LF                  A
LONG_MSG            1D88
LSL_MSG             1D4E
LSR_MSG             1D4A
MINUS_MSG           1D93
MOVEQ_MSG           1D34
NEW_LINE            1D99
NINE_MSG            1D15
NOT_MSG             1D28
NUMBER_ASCII        1070
ONE_MSG             1D05
OPEN_PARENTHESIS_MSG  1D95
OP_CODE_ADDA        132C
OP_CODE_ADDQ        13D0
OP_CODE_AND         12B0
OP_CODE_BCC         12BE
OP_CODE_BEQ         1318
OP_CODE_BGT         1304
OP_CODE_BLE         12F0
OP_CODE_BRA         11FC
OP_CODE_DATA        1462
OP_CODE_JSR         1210
OP_CODE_LEA         122C
OP_CODE_LEA_PRINT   1290
OP_CODE_MEMORY_SHIFT_ROTATE  14E0
OP_CODE_MOVEQ       121E
OP_CODE_NOT         11EE
OP_CODE_OR          1442
OP_CODE_REGISTER_SHIFT_ROTATE  1490
OP_CODE_SHIFT_ROTATE  1470
OR_MSG              1D62
PLUS_MSG            1D91
PRINT_BYTE_VALUE    1BA4
PRINT_BYTE_VALUE_LOOP  1BAA
PRINT_DONE          1126
PRINT_LONG_VALUE    1BFE
PRINT_LONG_VALUE_LOOP  1C04
PRINT_LOOP          10F8
PRINT_MEMORY_LOOP   1098
PRINT_WORD_VALUE    1BD0
PRINT_WORD_VALUE_LOOP  1BD6
REVERSE_DONE        1156
REVERSE_LOOP        1138
REVERSE_START       1128
ROL_MSG             1D5E
ROR_MSG             1D5A
ROXL_MSG            1D56
ROXR_MSG            1D52
SEVEN_MSG           1D11
SHIFT_ROTATE_COUNT_1_7  16DE
SHIFT_ROTATE_COUNT_8  16F4
SHIFT_ROTATE_EA_MEMORY  1704
SHIFT_ROTATE_EA_REGISTER  1620
SHIFT_ROTATE_EA_SIZE  15F0
SHIFT_ROTATE_IMM_SOURCE  16A8
SHIFT_ROTATE_REGISTER_DEST  166C
SHIFT_ROTATE_REGISTER_SOURCE  163A
SIX_MSG             1D0F
SPACE_MSG           1D00
START               1000
STARTING_MSG        1C56
STA_ADDR            1CB0
THREE_MSG           1D09
TWO_MSG             1D07
WORD_MSG            1D85
ZERO_MSG            1D03
