00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 8/4/2022 3:32:38 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :Disassembler
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  START:                  ; first instruction of program
00001000                             9  
00001000                            10  * Put program code here
00001000                            11  
00001000                            12  *------LEA = Load effective address
00001000                            13  *------Running Trap #15 while the number 14 is in D0 will print out whatever data is in the address stored in A1
00001000                            14  
00001000  43F9 000017E0             15          LEA         INTRO_MSG,      A1
00001006  103C 000E                 16          MOVE.B      #14,            D0    
0000100A  4E4F                      17          TRAP        #15
0000100C                            18          
0000100C  43F9 00001806             19          LEA         STARTING_MSG,   A1
00001012  103C 000E                 20          MOVE.B      #14,            D0   
00001016  4E4F                      21          TRAP        #15
00001018                            22          
00001018                            23  *----------------- 
00001018                            24  *       Running trap command 15 while the number 2 is in D0 
00001018                            25  *       Will ask the user to enter input
00001018                            26  *       after the user hits enter, the length of the input is stored in D1
00001018                            27  *       and the user data is stored in the space allocated by STA_ADDR repressented by ASSCI code
00001018                            28  *       IE 31 = 1, 32 = 2 etc etc
00001018                            29  *       If I store the number 1200, it will appear in memory as 31 32 30 30
00001018                            30  
00001018  43F9 00001860             31          LEA         STA_ADDR,       A1
0000101E  103C 0002                 32          MOVE.B      #2,             D0
00001022  4E4F                      33          TRAP        #15
00001024                            34          
00001024  4EB9 00001056             35          JSR         CONVERT_TO_ASCII
0000102A                            36          
0000102A                            37          * A3 now has our Starting Address
0000102A  2647                      38          MOVEA.L     D7,             A3
0000102C                            39          
0000102C  4282                      40          CLR.L       D2
0000102E  4287                      41          CLR.L       D7
00001030                            42          
00001030  43F9 0000182A             43          LEA         ENDING_MSG,     A1
00001036  103C 000E                 44          MOVE.B      #14,            D0
0000103A  4E4F                      45          TRAP        #15
0000103C                            46          
0000103C  43F9 00001888             47          LEA         END_ADDR,       A1
00001042  103C 0002                 48          MOVE.B      #2,             D0
00001046  4E4F                      49          TRAP        #15
00001048                            50          
00001048  4EB9 00001056             51          JSR         CONVERT_TO_ASCII
0000104E                            52          * A4 now has our Ending Address
0000104E  2847                      53          MOVEA.L     D7,             A4
00001050                            54          
00001050                            55  
00001050  4EB9 00001098             56          JSR         PRINT_MEMORY_LOOP
00001056                            57          
00001056                            58          
00001056                            59          
00001056                            60          *BRA         DONE
00001056                            61          *   ASCII conversion
00001056                            62  *---------------------------------------        
00001056                            63  CONVERT_TO_ASCII:             
00001056  0C01 0000                 64          CMPI.B      #$0,            D1
0000105A  6700 0012                 65          BEQ         ASCII_DONE
0000105E  1419                      66          MOVE.B      (A1)+,          D2
00001060  103C 0039                 67          MOVE.B      #$39,           D0
00001064  B400                      68          CMP.B       D0,             D2
00001066  6F00 0008                 69          BLE         NUMBER_ASCII   
0000106A  6000 0018                 70          BRA         LETTER_ASCII  
0000106E                            71  
0000106E                            72  ASCII_DONE:
0000106E  4E75                      73          RTS
00001070                            74          
00001070                            75  NUMBER_ASCII:
00001070  5301                      76          SUBI.B      #$1,            D1
00001072  103C 0030                 77          MOVE.B      #$30,           D0
00001076  9400                      78          SUB.B       D0,             D2
00001078  DE02                      79          ADD.B       D2,             D7
0000107A  0C01 0000                 80          CMPI.B      #$0,            D1
0000107E  67EE                      81          BEQ         ASCII_DONE
00001080  E987                      82          ASL.L       #4,             D7
00001082  60D2                      83          BRA         CONVERT_TO_ASCII
00001084                            84  LETTER_ASCII:
00001084  5301                      85          SUBI.B      #$1,            D1
00001086  103C 0037                 86          MOVE.B      #$37,           D0
0000108A  9400                      87          SUB.B       D0,             D2
0000108C  DE02                      88          ADD.B       D2,             D7
0000108E  0C01 0000                 89          CMPI.B      #$0,            D1
00001092  67DA                      90          BEQ         ASCII_DONE
00001094  E987                      91          ASL.L       #4,             D7
00001096  60BE                      92          BRA         CONVERT_TO_ASCII
00001098                            93  *---------------------------------------        
00001098                            94          
00001098                            95          
00001098                            96          *   Printing data and addresses
00001098                            97  *---------------------------------------
00001098                            98  
00001098                            99  PRINT_MEMORY_LOOP:
00001098                           100          * add code here to compare current address with end address
00001098                           101          
00001098                           102          * if equal to, or further than ending address jump to DONE
00001098                           103          * SIMHALT
00001098  B9CB                     104          CMP.L       A3,             A4
0000109A  6700 00BC                105          BEQ         DONE
0000109E  6F00 00B8                106          BLE         DONE
000010A2                           107          
000010A2                           108          * We are goiong to keep track of the number of byts we have examined using D1
000010A2                           109          * Before printing the address we have to reverse the order
000010A2  4281                     110          CLR.L       D1
000010A4  4282                     111          CLR.L       D2
000010A6  123C 0008                112          MOVE.B      #$8,            D1
000010AA  260B                     113          MOVE.L      A3,             D3
000010AC  4EB9 00001128            114          JSR         REVERSE_START
000010B2                           115          
000010B2  2607                     116          MOVE.L      D7,             D3
000010B4  4281                     117          CLR.L       D1
000010B6  4282                     118          CLR.L       D2
000010B8  123C 0008                119          MOVE.B      #$8,            D1
000010BC  4EB9 000010F8            120          JSR         PRINT_LOOP
000010C2                           121          
000010C2                           122          
000010C2                           123          * space between address and data
000010C2  43F9 000018B0            124          LEA         SPACE_MSG,      A1
000010C8  103C 000E                125          MOVE.B      #14,            D0    
000010CC  4E4F                     126          TRAP        #15
000010CE                           127          
000010CE  4281                     128          CLR.L       D1
000010D0  4282                     129          CLR.L       D2
000010D2  123C 0008                130          MOVE.B      #$8,            D1
000010D6  361B                     131          MOVE.W      (A3)+,          D3
000010D8                           132          *JSR         REVERSE_START
000010D8                           133          
000010D8                           134          *MOVE.L      D7,             D3
000010D8  4281                     135          CLR.L       D1
000010DA  4282                     136          CLR.L       D2
000010DC                           137          *MOVE.B      #$8,            D1
000010DC                           138          *JSR         PRINT_LOOP
000010DC                           139          
000010DC                           140          * Jump to Function in another file
000010DC  4EB9 0000116A            141          JSR         CHECK_OPCODES
000010E2                           142          
000010E2                           143          
000010E2  4281                     144          CLR.L       D1
000010E4  4282                     145          CLR.L       D2
000010E6  4283                     146          CLR.L       D3
000010E8  4284                     147          CLR.L       D4
000010EA                           148          * new line
000010EA  43F9 0000193B            149          LEA         NEW_LINE,       A1
000010F0  103C 000E                150          MOVE.B      #14,            D0    
000010F4  4E4F                     151          TRAP        #15
000010F6                           152  
000010F6                           153          * branch to the start of this method
000010F6  60A0                     154          BRA         PRINT_MEMORY_LOOP
000010F8                           155  
000010F8                           156  
000010F8                           157  PRINT_LOOP:
000010F8                           158  
000010F8                           159          
000010F8                           160          * When D1 == 0, we are done and exit this loop
000010F8  0C01 0000                161          CMPI.B      #$0,            D1
000010FC  6700 0028                162          BEQ         PRINT_DONE
00001100  5301                     163          SUBI.B      #$1,            D1
00001102                           164          
00001102  1403                     165          MOVE.B      D3,             D2
00001104                           166          * Bit shifting to isolate the right most digit
00001104                           167          * 1234 5678 => 8000 0000 => 0000 0008
00001104  103C 001C                168          MOVE.B      #28,            D0    
00001108  E1AA                     169          LSL.L       D0,             D2     
0000110A  E99A                     170          ROL.L       #4,             D2 
0000110C                           171          
0000110C                           172          * Bit shifting to prep the next digit
0000110C                           173          * 1234 4567 => 0123 4567
0000110C  E88B                     174          LSR.L       #4, D3
0000110E                           175          
0000110E                           176          *Assuming D4 is empty
0000110E                           177          
0000110E  1802                     178          MOVE.B       D2,            D4
00001110  43F9 000018B3            179          LEA          ZERO_MSG,      A1
00001116                           180          * load the address of Zero_msg
00001116                           181          * because all of the msgs are stored next to each other in order
00001116                           182          * we can simply take the value isolated from the number, multiply it by 2 (msg's take up 2 bytes)
00001116                           183          * and then add it to the address starting at zero_msg
00001116  C8FC 0002                184          MULU         #2,            D4
0000111A  D3C4                     185          ADDA.L       D4,            A1
0000111C                           186          
0000111C                           187          * trap command 14 reads whatever address is in A1, and then spits out the data to the console
0000111C  103C 000E                188          MOVE.B       #14,           D0
00001120  4E4F                     189          TRAP         #15
00001122  60D4                     190          BRA          PRINT_LOOP
00001124  4644                     191          NOT          D4
00001126                           192          
00001126                           193  PRINT_DONE:
00001126  4E75                     194          RTS
00001128                           195          
00001128                           196      *   Reversing the address
00001128                           197  *---------------------------------------
00001128                           198  
00001128                           199  REVERSE_START:        
00001128  4281                     200          CLR.L       D1
0000112A  4287                     201          CLR.L       D7
0000112C  123C 0008                202          MOVE.B      #8,             D1
00001130  4EB9 00001138            203          JSR         REVERSE_LOOP
00001136  4E75                     204          RTS
00001138                           205          
00001138                           206  REVERSE_LOOP:
00001138                           207  
00001138                           208          
00001138  0C01 0000                209          CMPI.B      #$0,            D1
0000113C  6700 0018                210          BEQ         REVERSE_DONE
00001140  5301                     211          SUBI.B      #$1,            D1
00001142  E987                     212          ASL.L       #4,             D7
00001144                           213          
00001144  4285                     214          CLR.L       D5
00001146                           215          
00001146  1A03                     216          MOVE.B      D3,             D5
00001148                           217          
00001148  103C 001C                218          MOVE.B      #28,            D0    
0000114C  E1AD                     219          LSL.L       D0,             D5     
0000114E  E99D                     220          ROL.L       #4,             D5
00001150                           221          
00001150  DE05                     222          ADD.B       D5,             D7
00001152                           223          
00001152                           224          
00001152  E883                     225          ASR.L       #4,             D3
00001154                           226          
00001154  60E2                     227          BRA         REVERSE_LOOP
00001156                           228  
00001156                           229  REVERSE_DONE:
00001156  4E75                     230          RTS
00001158                           231  DONE:
00001158                           232  
00001158  43F9 0000184C            233          LEA         GOODBYE_MSG,    A1
0000115E  103C 000E                234          MOVE.B      #14,            D0
00001162  4E4F                     235          TRAP        #15
00001164  103C 0009                236          MOVE.B      #9,             D0
00001168  4E4F                     237          TRAP        #15        
0000116A                           238          
0000116A                           239  
0000116A                           240      *SIMHALT             ; halt simulator
0000116A                           241  
0000116A                           242      INCLUDE         'Disassembler_OPCodes.x68'
0000116A                           243  
0000116A                           244  
0000116A                           245  CHECK_OPCODES:
0000116A                           246  
0000116A  4EB9 0000117E            247          JSR     ISOLATE_15_6
00001170  4EB9 0000118E            248          JSR     ISOLATE_15_8
00001176  4EB9 000011A6            249          JSR     ISOLATE_15_12
0000117C  4E75                     250          RTS
0000117E                           251          
0000117E                           252  ISOLATE_15_6:
0000117E                           253          
0000117E  2803                     254          MOVE.L      D3,     D4
00001180  7406                     255          MOVE.L      #6,     D2
00001182  E4AC                     256          LSR.L       D2,     D4
00001184                           257          
00001184  B87C 013A                258          CMP.W       #$13A,  D4
00001188  6700 0068                259          BEQ         OP_CODE_JSR
0000118C                           260          
0000118C  4E75                     261          RTS
0000118E                           262  
0000118E                           263  
0000118E                           264  ISOLATE_15_8:
0000118E                           265          *SIMHALT
0000118E  2803                     266          MOVE.L      D3,     D4
00001190  7408                     267          MOVE.L      #8,     D2
00001192  E4AC                     268          LSR.L       D2,     D4
00001194                           269          
00001194  B83C 0046                270          CMP.B       #$46,   D4
00001198  6700 003C                271          BEQ         OP_CODE_NOT
0000119C  B83C 0060                272          CMP.B       #$60,   D4
000011A0  6700 0042                273          BEQ         OP_CODE_BRA
000011A4                           274  
000011A4  4E75                     275          RTS
000011A6                           276          
000011A6                           277  ISOLATE_15_12:
000011A6  2803                     278          MOVE.L      D3,     D4
000011A8  740C                     279          MOVE.L      #12,    D2
000011AA  E4AC                     280          LSR.L       D2,     D4
000011AC                           281          
000011AC  B83C 0007                282          CMP.B       #$7,    D4
000011B0  6700 004E                283          BEQ         OP_CODE_MOVEQ
000011B4  B83C 0008                284          CMP.B       #$8,    D4
000011B8  6700 00D0                285          BEQ         OP_CODE_OR      *may get confused with DIVU + any other opcodes that start with 1000 (ones that we are not required to cover)
000011BC  B83C 000C                286          CMP.B       #$C,    D4
000011C0  6700 004C                287          BEQ         OP_CODE_AND
000011C4                           288          *If the 15-12 are 0110
000011C4  B83C 0006                289          CMP.B       #6,     D4
000011C8  6700 0052                290          BEQ         OP_CODE_BCC
000011CC                           291          *If the 15-12 are 1110, then it is a shift(LSL, LSR, ROR, ROL, ASR, ASL)
000011CC  B83C 000E                292          CMP.B       #14,   D4
000011D0  6700 00E6                293          BEQ         OP_CODE_SHIFT_ROTATE
000011D4  4E75                     294          RTS
000011D6                           295  
000011D6                           296  
000011D6                           297  
000011D6                           298  OP_CODE_NOT:
000011D6  43F9 000018D8            299          LEA         NOT_MSG, A1
000011DC  103C 000E                300          MOVE.B      #14, D0
000011E0  4E4F                     301          TRAP        #15
000011E2                           302          
000011E2  4E75                     303          RTS 
000011E4                           304  OP_CODE_BRA:
000011E4  43F9 000018DC            305          LEA         BRA_MSG, A1
000011EA  103C 000E                306          MOVE.B      #14, D0
000011EE  4E4F                     307          TRAP        #15
000011F0                           308          
000011F0  4E75                     309          RTS 
000011F2                           310  OP_CODE_JSR:
000011F2  43F9 000018E0            311          LEA         JSR_MSG, A1
000011F8  103C 000E                312          MOVE.B      #14, D0
000011FC  4E4F                     313          TRAP        #15
000011FE                           314          
000011FE  4E75                     315          RTS
00001200                           316  OP_CODE_MOVEQ:
00001200  43F9 000018E4            317          LEA         MOVEQ_MSG, A1
00001206  103C 000E                318          MOVE.B      #14, D0
0000120A  4E4F                     319          TRAP        #15
0000120C                           320          
0000120C  4E75                     321          RTS
0000120E                           322  OP_CODE_AND:
0000120E  43F9 000018EA            323          LEA         AND_MSG, A1
00001214  103C 000E                324          MOVE.B      #14, D0
00001218  4E4F                     325          TRAP        #15
0000121A                           326          
0000121A  4E75                     327          RTS
0000121C                           328  
0000121C                           329  OP_CODE_BCC
0000121C                           330          *Get bits from 8-11 to get the condition
0000121C                           331          *Only checking for (BGT, BLE, BEQ). Rest are considered
0000121C                           332          *invalid
0000121C  48E7 0600                333          MOVEM.L    D5-D6, -(A7)
00001220  7A08                     334          MOVE.L     #8, D5
00001222  7C0B                     335          MOVE.L     #11, D6
00001224  4EB9 000013EA            336          JSR        GET_BIT
0000122A  4CDF 0060                337          MOVEM.L    (A7)+, D5-D6
0000122E  B8BC 0000000F            338          CMP.L      #15, D4
00001234  6700 0018                339          BEQ        OP_CODE_BLE
00001238  B8BC 0000000E            340          CMP.L      #14, D4
0000123E  6700 0022                341          BEQ        OP_CODE_BGT
00001242  B8BC 00000007            342          CMP.L      #7,  D4
00001248  6700 002C                343          BEQ        OP_CODE_BEQ
0000124C                           344          *Invalid instruction for the scope
0000124C  4E75                     345          RTS
0000124E                           346  
0000124E                           347  
0000124E                           348  OP_CODE_BLE
0000124E  43F9 00001918            349          LEA         BLE_MSG, A1
00001254  103C 000E                350          MOVE.B      #14, D0
00001258  4E4F                     351          TRAP        #15
0000125A  4EB9 00001548            352          JSR         BCC_EA_SIZE_AND_DISPLACEMENT
00001260  4E75                     353          RTS
00001262                           354  
00001262                           355  OP_CODE_BGT
00001262  43F9 0000191C            356          LEA         BGT_MSG, A1
00001268  103C 000E                357          MOVE.B      #14, D0
0000126C  4E4F                     358          TRAP        #15
0000126E  4EB9 00001548            359          JSR         BCC_EA_SIZE_AND_DISPLACEMENT
00001274  4E75                     360          RTS
00001276                           361  
00001276                           362  
00001276                           363  OP_CODE_BEQ
00001276  43F9 00001920            364          LEA         BEQ_MSG, A1
0000127C  103C 000E                365          MOVE.B      #14, D0
00001280  4E4F                     366          TRAP        #15
00001282  4EB9 00001548            367          JSR         BCC_EA_SIZE_AND_DISPLACEMENT
00001288  4E75                     368          RTS
0000128A                           369  
0000128A                           370  OP_CODE_OR:
0000128A                           371          *check for divu/other opcodes that start with 1000
0000128A                           372          *isolate bits 8-6 to check for DIVU
0000128A  2803                     373          MOVE.L      D3,     D4
0000128C  7407                     374          MOVE.L      #7,     D2
0000128E  E56C                     375          LSL.W       D2,     D4
00001290  740D                     376          MOVE.L      #13,    D2
00001292  E46C                     377          LSR.W       D2,     D4
00001294                           378          
00001294  B83C 0003                379          CMP.B       #$3,    D4
00001298  6700 0010                380          BEQ         OP_CODE_DATA
0000129C                           381          
0000129C  43F9 0000190E            382          LEA         OR_MSG, A1
000012A2  103C 000E                383          MOVE.B      #14, D0
000012A6  4E4F                     384          TRAP        #15
000012A8                           385          
000012A8  4E75                     386          RTS
000012AA                           387  OP_CODE_DATA:
000012AA  43F9 00001911            388          LEA         DATA_MSG, A1
000012B0  103C 000E                389          MOVE.B      #14, D0
000012B4  4E4F                     390          TRAP        #15
000012B6                           391          
000012B6  4E75                     392          RTS   
000012B8                           393  
000012B8                           394  
000012B8                           395  OP_CODE_SHIFT_ROTATE
000012B8                           396          *Now check whether it is register shift or memory shift
000012B8                           397          *If the 6-7 bit is 11, then it is a memory else register shift
000012B8  48E7 0600                398          MOVEM.L    D5-D6, -(A7)
000012BC  7A06                     399          MOVE.L     #6, D5
000012BE  7C07                     400          MOVE.L     #7, D6
000012C0  4EB9 000013EA            401          JSR        GET_BIT
000012C6  4CDF 0060                402          MOVEM.L    (A7)+, D5-D6
000012CA  B8BC 00000003            403          CMP.L      #3, D4
000012D0  6700 0056                404          BEQ        OP_CODE_MEMORY_SHIFT_ROTATE
000012D4  6000 0002                405          BRA        OP_CODE_REGISTER_SHIFT_ROTATE
000012D8                           406  
000012D8                           407  
000012D8                           408  OP_CODE_REGISTER_SHIFT_ROTATE
000012D8                           409          *Messages are loaded in the order of -ASR, ASL, LSR, LSL, RORX, RORL, ROR, ROL where
000012D8                           410          *each message is of 4 bytes. Essentially using a combination of (9-11) bit + dr(8th bit) we
000012D8                           411          *can index the appropriate message. Mathy and unreadable code but prevents lot of rebudency
000012D8  43F9 000018EE            412          LEA        ASR_MSG, A1
000012DE  48E7 0600                413          MOVEM.L    D5-D6, -(A7)
000012E2  7A08                     414          MOVE.L     #8, D5
000012E4  7C08                     415          MOVE.L     #8, D6
000012E6  4EB9 000013EA            416          JSR        GET_BIT
000012EC  4CDF 0060                417          MOVEM.L    (A7)+, D5-D6
000012F0  C8FC 0004                418          MULU         #4,            D4
000012F4  D3C4                     419          ADDA.L       D4,            A1
000012F6                           420          *Check (3, 11) bit 
000012F6                           421          *000->ASR/ASL, 001->LSR/LSL, 011->ROR/ROL
000012F6  48E7 0600                422          MOVEM.L    D5-D6, -(A7)
000012FA  7A03                     423          MOVE.L     #3, D5
000012FC  7C04                     424          MOVE.L     #4, D6
000012FE  4EB9 000013EA            425          JSR        GET_BIT
00001304  B8BC 00000002            426          CMP.L      #2, D4
0000130A  4CDF 0060                427          MOVEM.L    (A7)+, D5-D6
0000130E  C8FC 0008                428          MULU        #8,      D4
00001312  D3C4                     429          ADDA.L       D4,            A1
00001314  103C 000E                430          MOVE.B      #14, D0
00001318  4E4F                     431          TRAP        #15
0000131A  4EB9 00001400            432          JSR         SHIFT_ROTATE_EA_SIZE
00001320  4EB9 00001430            433          JSR         SHIFT_ROTATE_EA_REGISTER
00001326  4E75                     434          RTS
00001328                           435  
00001328                           436  
00001328                           437  OP_CODE_MEMORY_SHIFT_ROTATE
00001328                           438          *If mode bits are less than 010, then invalid instruction so just RTS
00001328  48E7 0600                439          MOVEM.L    D5-D6, -(A7)
0000132C  7A03                     440          MOVE.L     #3, D5
0000132E  7C05                     441          MOVE.L     #5, D6
00001330  4EB9 000013EA            442          JSR        GET_BIT
00001336  4CDF 0060                443          MOVEM.L    (A7)+, D5-D6
0000133A  B8BC 00000002            444          CMP.L      #2, D4
00001340  6B00 00BC                445          BMI        INSTRUCTION_DECODE_FAILURE
00001344                           446          *If mode bits are 101 or 110, then it is dispacement address register EA which is invalid
00001344                           447          *for the current scope
00001344  B8BC 00000005            448          CMP.L      #5, D4
0000134A  6700 00B2                449          BEQ        INSTRUCTION_DECODE_FAILURE
0000134E  B8BC 00000006            450          CMP.L      #6, D4
00001354  6700 00A8                451          BEQ        INSTRUCTION_DECODE_FAILURE
00001358                           452          *If mode bits+register bits are greater than 111001, then invalid instruction
00001358  48E7 0600                453          MOVEM.L    D5-D6, -(A7)
0000135C  7A00                     454          MOVE.L     #0, D5
0000135E  7C05                     455          MOVE.L     #5, D6
00001360  4EB9 000013EA            456          JSR        GET_BIT
00001366  4CDF 0060                457          MOVEM.L    (A7)+, D5-D6
0000136A  B8BC 0000003A            458          CMP.L      #58, D4
00001370  6A00 008C                459          BPL        INSTRUCTION_DECODE_FAILURE
00001374  7A09                     460          MOVE.L     #9, D5
00001376  7C0B                     461          MOVE.L     #11, D6
00001378  4EB9 000013EA            462          JSR        GET_BIT
0000137E  B8BC 00000002            463          CMP.L      #2, D4
00001384  6700 0078                464          BEQ        INSTRUCTION_DECODE_FAILURE *If the 9-11 are 010(RORX, ROLX), instruction decode error.
00001388                           465          *Messages are loaded in the order of -ASR, ASL, LSR, LSL, RORX, RORL, ROR, ROL where
00001388                           466          *each message is of 4 bytes. Essentially using a combination of (9-11) bit + dr(8th bit) we
00001388                           467          *can index the appropriate message. Mathy and unreadable code but prevents lot of rebudency
00001388  43F9 000018EE            468          LEA        ASR_MSG, A1
0000138E  48E7 0600                469          MOVEM.L    D5-D6, -(A7)
00001392  7A08                     470          MOVE.L     #8, D5
00001394  7C08                     471          MOVE.L     #8, D6
00001396  4EB9 000013EA            472          JSR        GET_BIT
0000139C  4CDF 0060                473          MOVEM.L    (A7)+, D5-D6
000013A0  C8FC 0004                474          MULU         #4,            D4
000013A4  D3C4                     475          ADDA.L       D4,            A1
000013A6                           476          *Check (9, 11) bit 
000013A6                           477          *000->ASR/ASL, 001->LSR/LSL, 011->ROR/ROL
000013A6  48E7 0600                478          MOVEM.L    D5-D6, -(A7)
000013AA  7A09                     479          MOVE.L     #9, D5
000013AC  7C0B                     480          MOVE.L     #11, D6
000013AE  4EB9 000013EA            481          JSR        GET_BIT
000013B4  B8BC 00000002            482          CMP.L      #2, D4
000013BA  4CDF 0060                483          MOVEM.L    (A7)+, D5-D6
000013BE  C8FC 0008                484          MULU        #8,      D4
000013C2  D3C4                     485          ADDA.L       D4,            A1
000013C4  103C 000E                486          MOVE.B      #14, D0
000013C8  4E4F                     487          TRAP        #15
000013CA  43F9 00001927            488          LEA        WORD_MSG, A1
000013D0  103C 000E                489          MOVE.B      #14, D0
000013D4  4E4F                     490          TRAP        #15
000013D6  43F9 000018B0            491          LEA         SPACE_MSG,      A1
000013DC  103C 000E                492          MOVE.B      #14,            D0    
000013E0  4E4F                     493          TRAP        #15
000013E2  4EB9 0000151A            494          JSR         SHIFT_ROTATE_EA_MEMORY
000013E8  4E75                     495          RTS
000013EA                           496  
000013EA                           497  
000013EA                           498  
000013EA                           499  GET_BIT
000013EA  4284                     500          CLR.L   D4
000013EC  3803                     501          MOVE.W  D3, D4   
000013EE                           502          *Shift it to left by 15-y to get rid of all the bits to the left of yth bit 
000013EE                           503          *and then shift the bits such that the xth bit is the 0th bit
000013EE  4486                     504          NEG.L   D6
000013F0  0686 0000000F            505          ADDI.L  #15, D6
000013F6  DA86                     506          ADD.L   D6, D5
000013F8  ED6C                     507          LSL.W   D6, D4
000013FA  EA6C                     508          LSR.W   D5, D4
000013FC  4E75                     509          RTS
000013FE                           510  
000013FE                           511  INSTRUCTION_DECODE_FAILURE
000013FE  4E75                     512          RTS
00001400                           513  
00001400                           514  
00001400                           515  
00001400                           516  
00001400                           517  -------------------- end include --------------------
00001400                           518      *INCLUDE         'demo_test.x68'
00001400                           519      INCLUDE          'Disassembler_EA.x68'
00001400                           520  
00001400                           521  
00001400                           522  
00001400                           523  
00001400                           524  
00001400                           525  SHIFT_ROTATE_EA_SIZE
00001400  48E7 0600                526      MOVEM.L    D5-D6, -(A7)
00001404  7A06                     527      MOVE.L     #6, D5
00001406  7C07                     528      MOVE.L     #7, D6
00001408  4EB8 13EA                529      JSR        GET_BIT
0000140C  4CDF 0060                530      MOVEM.L    (A7)+, D5-D6
00001410  43F9 00001924            531      LEA        BYTE_MSG, A1
00001416  C8FC 0003                532      MULU       #3, D4
0000141A  D3C4                     533      ADDA.L       D4,  A1
0000141C  103C 000E                534      MOVE.B      #14, D0
00001420  4E4F                     535      TRAP        #15
00001422  43F9 000018B0            536      LEA         SPACE_MSG,      A1
00001428  103C 000E                537      MOVE.B      #14,            D0    
0000142C  4E4F                     538      TRAP        #15
0000142E  4E75                     539      RTS
00001430                           540  
00001430                           541  
00001430                           542  
00001430                           543  
00001430                           544  SHIFT_ROTATE_EA_REGISTER
00001430  48E7 0600                545      MOVEM.L    D5-D6, -(A7)
00001434  7A05                     546      MOVE.L     #5, D5
00001436  7C05                     547      MOVE.L     #5, D6
00001438  4EB8 13EA                548      JSR        GET_BIT
0000143C  4CDF 0060                549      MOVEM.L    (A7)+, D5-D6
00001440  B8BC 00000001            550      CMP.L      #1,  D4
00001446  6600 0094                551      BNE        SHIFT_ROTATE_IMM_SOURCE
0000144A                           552  
0000144A                           553  SHIFT_ROTATE_REGISTER_SOURCE
0000144A  43F9 000018CD            554      LEA        D_MSG, A1
00001450  103C 000E                555      MOVE.B      #14,   D0    
00001454  4E4F                     556      TRAP        #15
00001456  48E7 0600                557      MOVEM.L    D5-D6, -(A7)
0000145A  7A09                     558      MOVE.L     #9, D5
0000145C  7C0B                     559      MOVE.L     #11, D6
0000145E  4EB8 13EA                560      JSR        GET_BIT
00001462  4CDF 0060                561      MOVEM.L    (A7)+, D5-D6
00001466  43F9 000018B3            562      LEA       ZERO_MSG, A1
0000146C  C8FC 0002                563      MULU      #2, D4    
00001470  D3C4                     564      ADDA.L    D4, A1
00001472  103C 000E                565      MOVE.B      #14,   D0    
00001476  4E4F                     566      TRAP        #15
00001478  6000 0002                567      BRA       SHIFT_ROTATE_REGISTER_DEST
0000147C                           568  
0000147C                           569  SHIFT_ROTATE_REGISTER_DEST
0000147C  43F9 0000192D            570      LEA        COMMA_MSG, A1
00001482  103C 000E                571      MOVE.B      #14,   D0    
00001486  4E4F                     572      TRAP        #15
00001488  43F9 000018B0            573      LEA        SPACE_MSG, A1
0000148E  103C 000E                574      MOVE.B      #14,   D0    
00001492  4E4F                     575      TRAP        #15
00001494  43F9 000018CD            576      LEA        D_MSG, A1
0000149A  103C 000E                577      MOVE.B      #14,   D0    
0000149E  4E4F                     578      TRAP        #15
000014A0  48E7 0600                579      MOVEM.L    D5-D6, -(A7)
000014A4  7A00                     580      MOVE.L     #0, D5
000014A6  7C02                     581      MOVE.L     #2, D6
000014A8  4EB8 13EA                582      JSR        GET_BIT
000014AC  4CDF 0060                583      MOVEM.L    (A7)+, D5-D6
000014B0  B8BC 00000000            584      CMP.L      #0, D4
000014B6  6700 0016                585      BEQ       SHIFT_ROTATE_COUNT_8
000014BA                           586  
000014BA                           587  SHIFT_ROTATE_COUNT_1_7
000014BA  43F9 000018B3            588      LEA       ZERO_MSG, A1
000014C0  C8FC 0002                589      MULU      #2, D4    
000014C4  D3C4                     590      ADDA.L    D4, A1
000014C6  103C 000E                591      MOVE.B      #14,   D0    
000014CA  4E4F                     592      TRAP        #15
000014CC  4E75                     593      RTS
000014CE                           594  
000014CE                           595  SHIFT_ROTATE_COUNT_8
000014CE  43F9 000018C3            596      LEA       EIGHT_MSG, A1
000014D4  103C 000E                597      MOVE.B      #14,   D0    
000014D8  4E4F                     598      TRAP        #15
000014DA  4E75                     599      RTS
000014DC                           600  
000014DC                           601  
000014DC                           602  
000014DC                           603  SHIFT_ROTATE_IMM_SOURCE
000014DC  43F9 00001931            604      LEA        HASH_MSG, A1
000014E2  103C 000E                605      MOVE.B      #14,   D0    
000014E6  4E4F                     606      TRAP        #15
000014E8  43F9 0000192F            607      LEA        DOLLAR_MSG, A1
000014EE  103C 000E                608      MOVE.B      #14,   D0    
000014F2  4E4F                     609      TRAP        #15
000014F4  48E7 0600                610      MOVEM.L    D5-D6, -(A7)
000014F8  7A09                     611      MOVE.L     #9, D5
000014FA  7C0B                     612      MOVE.L     #11, D6
000014FC  4EB8 13EA                613      JSR        GET_BIT
00001500  4CDF 0060                614      MOVEM.L    (A7)+, D5-D6
00001504  43F9 000018B3            615      LEA       ZERO_MSG, A1
0000150A  C8FC 0002                616      MULU      #2, D4    
0000150E  D3C4                     617      ADDA.L    D4, A1
00001510  103C 000E                618      MOVE.B      #14,   D0    
00001514  4E4F                     619      TRAP        #15
00001516  6000 FF64                620      BRA      SHIFT_ROTATE_REGISTER_DEST
0000151A                           621   
0000151A                           622  
0000151A                           623  
0000151A                           624  SHIFT_ROTATE_EA_MEMORY
0000151A  48E7 0600                625      MOVEM.L    D5-D6, -(A7)
0000151E  7A00                     626      MOVE.L     #0, D5
00001520  7C05                     627      MOVE.L     #5, D6
00001522  4EB8 13EA                628      JSR        GET_BIT
00001526  4CDF 0060                629      MOVEM.L    (A7)+, D5-D6
0000152A  48E7 1600                630      MOVEM.L    D3/D5-D6, -(A7)
0000152E  2604                     631      MOVE.L     D4, D3
00001530  4EB9 000015A6            632      JSR        GET_EA
00001536  4CDF 0068                633      MOVEM.L    (A7)+, D3/D5-D6
0000153A  43F9 0000193B            634      LEA         NEW_LINE,       A1
00001540  103C 000E                635      MOVE.B      #14,            D0    
00001544  4E4F                     636      TRAP        #15
00001546  4E75                     637      RTS
00001548                           638  
00001548                           639  
00001548                           640  
00001548                           641  BCC_EA_SIZE_AND_DISPLACEMENT
00001548  48E7 0600                642      MOVEM.L    D5-D6, -(A7)
0000154C  7A00                     643      MOVE.L     #0, D5
0000154E  7C07                     644      MOVE.L     #7, D6
00001550  4EB8 13EA                645      JSR        GET_BIT
00001554  4CDF 0060                646      MOVEM.L    (A7)+, D5-D6
00001558  B8BC 00000000            647      CMP.L      #0, D4
0000155E  6700 0022                648      BEQ        BCC_WORD_DISPLACEMENT
00001562                           649  BCC_BYTE_DISPLACEMENT
00001562  43F9 00001924            650      LEA         BYTE_MSG, A1
00001568  103C 000E                651      MOVE.B      #14, D0
0000156C  4E4F                     652      TRAP        #15
0000156E  43F9 000018B0            653      LEA         SPACE_MSG,   A1
00001574  103C 000E                654      MOVE.B      #14,   D0    
00001578  4E4F                     655      TRAP        #15
0000157A  4EB9 00001754            656      JSR         PRINT_BYTE_VALUE
00001580  4E75                     657      RTS
00001582                           658  BCC_WORD_DISPLACEMENT
00001582  43F9 00001927            659      LEA         WORD_MSG, A1
00001588  103C 000E                660      MOVE.B      #14, D0
0000158C  4E4F                     661      TRAP        #15
0000158E  43F9 000018B0            662      LEA         SPACE_MSG,   A1
00001594  103C 000E                663      MOVE.B      #14,   D0    
00001598  4E4F                     664      TRAP        #15
0000159A  4284                     665      CLR.L       D4
0000159C  381B                     666      MOVE.W      (A3)+, D4
0000159E  4EB9 00001780            667      JSR         PRINT_WORD_VALUE
000015A4  4E75                     668      RTS
000015A6                           669  
000015A6                           670  
000015A6                           671  GET_EA
000015A6  7A03                     672      MOVE.L     #3, D5
000015A8  7C05                     673      MOVE.L     #5, D6
000015AA  4EB8 13EA                674      JSR        GET_BIT
000015AE  B8BC 00000000            675      CMP.L      #0, D4
000015B4  6700 0048                676      BEQ        EA_DATA_REGISTER
000015B8  B8BC 00000001            677      CMP.L      #1, D4
000015BE  6700 0066                678      BEQ        EA_ADDR_REGISTER
000015C2  B8BC 00000002            679      CMP.L      #2, D4
000015C8  6700 0084                680      BEQ        EA_INDIRECT
000015CC  B8BC 00000003            681      CMP.L      #3, D4
000015D2  6700 00BA                682      BEQ        EA_INDIRECT_INCREMENT
000015D6  B8BC 00000004            683      CMP.L      #4, D4
000015DC  6700 00FC                684      BEQ        EA_INDIRECT_DECREMENT
000015E0                           685      *101, and 110 mode bits should be detected in disassembler_OPCodes 
000015E0  7A00                     686      MOVE.L     #0, D5
000015E2  7C02                     687      MOVE.L     #2, D6
000015E4  4EB8 13EA                688      JSR        GET_BIT
000015E8  B8BC 00000000            689      CMP.L      #0, D4
000015EE  6700 0136                690      BEQ        EA_ABS_WORD
000015F2  B8BC 00000001            691      CMP.L      #1, D4
000015F8  6700 0144                692      BEQ        EA_ABS_LONG
000015FC                           693      *Unreachable
000015FC  4E75                     694      RTS
000015FE                           695      
000015FE                           696  
000015FE                           697  EA_DATA_REGISTER
000015FE  43F9 000018CD            698      LEA   D_MSG, A1
00001604  103C 000E                699      MOVE.B   #14,  D0    
00001608  4E4F                     700      TRAP     #15
0000160A  43F9 000018B3            701      LEA    ZERO_MSG, A1
00001610  7A00                     702      MOVE.L     #0, D5
00001612  7C02                     703      MOVE.L     #2, D6
00001614  4EB8 13EA                704      JSR        GET_BIT
00001618  C8FC 0002                705      MULU       #2, D4
0000161C  D3C4                     706      ADDA.L     D4, A1
0000161E  103C 000E                707      MOVE.B   #14,  D0    
00001622  4E4F                     708      TRAP     #15
00001624  4E75                     709      RTS
00001626                           710  
00001626                           711  
00001626                           712  EA_ADDR_REGISTER
00001626  43F9 000018C7            713      LEA   A_MSG, A1
0000162C  103C 000E                714      MOVE.B   #14,  D0    
00001630  4E4F                     715      TRAP     #15
00001632  43F9 000018B3            716      LEA    ZERO_MSG, A1
00001638  7A00                     717      MOVE.L     #0, D5
0000163A  7C02                     718      MOVE.L     #2, D6
0000163C  4EB8 13EA                719      JSR        GET_BIT
00001640  C8FC 0002                720      MULU       #2, D4
00001644  D3C4                     721      ADDA.L     D4, A1
00001646  103C 000E                722      MOVE.B   #14,  D0    
0000164A  4E4F                     723      TRAP     #15
0000164C  4E75                     724      RTS
0000164E                           725  
0000164E                           726  
0000164E                           727  EA_INDIRECT
0000164E  43F9 00001937            728      LEA   OPEN_PARENTHESIS_MSG, A1
00001654  103C 000E                729      MOVE.B   #14,  D0    
00001658  4E4F                     730      TRAP     #15
0000165A  43F9 000018C7            731      LEA   A_MSG, A1
00001660  103C 000E                732      MOVE.B   #14,  D0    
00001664  4E4F                     733      TRAP     #15
00001666  43F9 000018B3            734      LEA    ZERO_MSG, A1
0000166C  7A00                     735      MOVE.L     #0, D5
0000166E  7C02                     736      MOVE.L     #2, D6
00001670  4EB8 13EA                737      JSR        GET_BIT
00001674  C8FC 0002                738      MULU       #2, D4
00001678  D3C4                     739      ADDA.L     D4, A1
0000167A  103C 000E                740      MOVE.B   #14,  D0    
0000167E  4E4F                     741      TRAP     #15
00001680  43F9 00001939            742      LEA   CLOSE_PARENTHESIS_MSG, A1
00001686  103C 000E                743      MOVE.B   #14,  D0    
0000168A  4E4F                     744      TRAP     #15
0000168C  4E75                     745      RTS
0000168E                           746  
0000168E                           747  
0000168E                           748  
0000168E                           749  EA_INDIRECT_INCREMENT
0000168E  43F9 00001937            750      LEA   OPEN_PARENTHESIS_MSG, A1
00001694  103C 000E                751      MOVE.B   #14,  D0    
00001698  4E4F                     752      TRAP     #15
0000169A  43F9 000018C7            753      LEA   A_MSG, A1
000016A0  103C 000E                754      MOVE.B   #14,  D0    
000016A4  4E4F                     755      TRAP     #15
000016A6  43F9 000018B3            756      LEA    ZERO_MSG, A1
000016AC  7A00                     757      MOVE.L     #0, D5
000016AE  7C02                     758      MOVE.L     #2, D6
000016B0  4EB8 13EA                759      JSR        GET_BIT
000016B4  C8FC 0002                760      MULU       #2, D4
000016B8  D3C4                     761      ADDA.L     D4, A1
000016BA  103C 000E                762      MOVE.B   #14,  D0    
000016BE  4E4F                     763      TRAP     #15
000016C0  43F9 00001939            764      LEA   CLOSE_PARENTHESIS_MSG, A1
000016C6  103C 000E                765      MOVE.B   #14,  D0    
000016CA  4E4F                     766      TRAP     #15
000016CC  43F9 00001933            767      LEA   PLUS_MSG, A1
000016D2  103C 000E                768      MOVE.B   #14,  D0    
000016D6  4E4F                     769      TRAP     #15
000016D8  4E75                     770      RTS
000016DA                           771  
000016DA                           772  
000016DA                           773  EA_INDIRECT_DECREMENT
000016DA  43F9 00001935            774      LEA   MINUS_MSG, A1
000016E0  103C 000E                775      MOVE.B   #14,  D0    
000016E4  4E4F                     776      TRAP     #15
000016E6  43F9 00001937            777      LEA   OPEN_PARENTHESIS_MSG, A1
000016EC  103C 000E                778      MOVE.B   #14,  D0    
000016F0  4E4F                     779      TRAP     #15
000016F2  43F9 000018C7            780      LEA   A_MSG, A1
000016F8  103C 000E                781      MOVE.B   #14,  D0    
000016FC  4E4F                     782      TRAP     #15
000016FE  43F9 000018B3            783      LEA    ZERO_MSG, A1
00001704  7A00                     784      MOVE.L     #0, D5
00001706  7C02                     785      MOVE.L     #2, D6
00001708  4EB8 13EA                786      JSR        GET_BIT
0000170C  C8FC 0002                787      MULU       #2, D4
00001710  D3C4                     788      ADDA.L     D4, A1
00001712  103C 000E                789      MOVE.B   #14,  D0    
00001716  4E4F                     790      TRAP     #15
00001718  43F9 00001939            791      LEA   CLOSE_PARENTHESIS_MSG, A1
0000171E  103C 000E                792      MOVE.B   #14,  D0    
00001722  4E4F                     793      TRAP     #15
00001724  4E75                     794      RTS
00001726                           795  
00001726                           796  
00001726                           797  
00001726                           798  EA_ABS_WORD
00001726  4284                     799      CLR.L      D4
00001728  381B                     800      MOVE.W     (A3)+, D4
0000172A  43F9 0000192F            801      LEA        DOLLAR_MSG,       A1
00001730  103C 000E                802      MOVE.B      #14,            D0    
00001734  4E4F                     803      TRAP        #15
00001736  4EB9 00001780            804      JSR        PRINT_WORD_VALUE
0000173C  4E75                     805      RTS
0000173E                           806  
0000173E                           807  EA_ABS_LONG
0000173E  281B                     808      MOVE.L    (A3)+, D4
00001740  43F9 0000192F            809      LEA        DOLLAR_MSG,       A1
00001746  103C 000E                810      MOVE.B      #14,            D0    
0000174A  4E4F                     811      TRAP        #15
0000174C  4EB9 000017AE            812      JSR        PRINT_LONG_VALUE
00001752  4E75                     813      RTS
00001754                           814  
00001754                           815  
00001754                           816  
00001754                           817  
00001754                           818  PRINT_BYTE_VALUE
00001754  48E7 0600                819          MOVEM.L    D5-D6, -(A7)
00001758  7C02                     820          MOVE.L     #2, D6
0000175A                           821  PRINT_BYTE_VALUE_LOOP
0000175A                           822          *Gets the most significant bit basically
0000175A                           823          *Could use GET_BIT subroutine but it is 
0000175A                           824          *costly in terms of registers used
0000175A  1A04                     825          MOVE.B     D4, D5
0000175C  E80D                     826          LSR.B      #4, D5
0000175E  E90C                     827          LSL.B      #4, D4
00001760  43F9 000018B3            828          LEA        ZERO_MSG,      A1
00001766                           829          * load the address of Zero_msg
00001766                           830          * because all of the msgs are stored next to each other in order
00001766                           831          * we can simply take the value isolated from the number, multiply it by 2 (msg's take up 2 bytes)
00001766                           832          * and then add it to the address starting at zero_msg
00001766  CAFC 0002                833          MULU         #2,            D5
0000176A  D3C5                     834          ADDA.L       D5,            A1
0000176C  103C 000E                835          MOVE.B      #14, D0
00001770  4E4F                     836          TRAP        #15
00001772  5386                     837          SUBI.L      #1, D6
00001774  BC3C 0000                838          CMP.B       #0, D6
00001778  66E0                     839          BNE         PRINT_BYTE_VALUE_LOOP
0000177A  4CDF 0060                840          MOVEM.L    (A7)+, D5-D6
0000177E  4E75                     841          RTS
00001780                           842  
00001780                           843  
00001780                           844  
00001780                           845  PRINT_WORD_VALUE
00001780  48E7 0600                846          MOVEM.L    D5-D6, -(A7)
00001784  7C04                     847          MOVE.L     #4, D6
00001786                           848  PRINT_WORD_VALUE_LOOP
00001786                           849          *Gets the most significant bit basically
00001786                           850          *Could use GET_BIT subroutine but it is 
00001786                           851          *costly in terms of registers used
00001786  3A04                     852          MOVE.W     D4, D5
00001788  EC4D                     853          LSR.W      #6, D5
0000178A  EC4D                     854          LSR.W      #6, D5
0000178C  E94C                     855          LSL.W      #4, D4
0000178E  43F9 000018B3            856          LEA        ZERO_MSG,      A1
00001794                           857          * load the address of Zero_msg
00001794                           858          * because all of the msgs are stored next to each other in order
00001794                           859          * we can simply take the value isolated from the number, multiply it by 2 (msg's take up 2 bytes)
00001794                           860          * and then add it to the address starting at zero_msg
00001794  CAFC 0002                861          MULU         #2,            D5
00001798  D3C5                     862          ADDA.L       D5,            A1
0000179A  103C 000E                863          MOVE.B      #14, D0
0000179E  4E4F                     864          TRAP        #15
000017A0  5386                     865          SUBI.L      #1, D6
000017A2  BC3C 0000                866          CMP.B       #0, D6
000017A6  66DE                     867          BNE         PRINT_WORD_VALUE_LOOP
000017A8  4CDF 0060                868          MOVEM.L    (A7)+, D5-D6
000017AC  4E75                     869          RTS
000017AE                           870  
000017AE                           871  
000017AE                           872  PRINT_LONG_VALUE
000017AE  48E7 0600                873          MOVEM.L    D5-D6, -(A7)
000017B2  7C08                     874          MOVE.L     #8, D6
000017B4                           875  PRINT_LONG_VALUE_LOOP
000017B4                           876          *Gets the most significant bit basically
000017B4                           877          *Could use GET_BIT subroutine but it is 
000017B4                           878          *costly in terms of registers used
000017B4  2A04                     879          MOVE.L     D4, D5
000017B6  E08D                     880          LSR.L      #8, D5
000017B8  E08D                     881          LSR.L      #8, D5
000017BA  E08D                     882          LSR.L      #8, D5
000017BC  E88D                     883          LSR.L      #4, D5
000017BE  E98C                     884          LSL.L      #4, D4
000017C0  43F9 000018B3            885          LEA        ZERO_MSG,      A1
000017C6                           886          * load the address of Zero_msg
000017C6                           887          * because all of the msgs are stored next to each other in order
000017C6                           888          * we can simply take the value isolated from the number, multiply it by 2 (msg's take up 2 bytes)
000017C6                           889          * and then add it to the address starting at zero_msg
000017C6  CAFC 0002                890          MULU         #2,            D5
000017CA  D3C5                     891          ADDA.L       D5,            A1
000017CC  103C 000E                892          MOVE.B      #14, D0
000017D0  4E4F                     893          TRAP        #15
000017D2  5386                     894          SUBI.L      #1, D6
000017D4  BC3C 0000                895          CMP.B       #0, D6
000017D8  66DA                     896          BNE         PRINT_LONG_VALUE_LOOP
000017DA  4CDF 0060                897          MOVEM.L    (A7)+, D5-D6
000017DE  4E75                     898          RTS
000017E0                           899  
000017E0                           900  
000017E0                           901   
000017E0                           902  -------------------- end include --------------------
000017E0                           903  
000017E0                           904  
000017E0                           905  * Put variables and constants here
000017E0                           906  
000017E0= 57 65 6C 63 6F 6D ...    907  INTRO_MSG:       DC.B       'Welcome to Team Cools Disassembler!',CR,LF,0
00001806= 50 6C 65 61 73 65 ...    908  STARTING_MSG:    DC.B       'Please enter the Starting Address',CR,LF,0
0000182A= 50 6C 65 61 73 65 ...    909  ENDING_MSG:      DC.B       'Please enter the Ending Address',CR,LF,0
0000184C= 44 6F 6E 65 20 52 ...    910  GOODBYE_MSG:     DC.B       'Done Reading data',CR,LF,0
00001860                           911  * CR and LF for strings above because we want to go to next line after printing message
00001860                           912  
00001860                           913  STA_ADDR         DS.B        40
00001888                           914  END_ADDR         DS.B        40
000018B0                           915  
000018B0                           916  * no CR and LF for strings below because we want to print each number and letter
000018B0                           917  
000018B0= 20 20 00                 918  SPACE_MSG:       DC.B        '  ',0
000018B3                           919  
000018B3= 30 00                    920  ZERO_MSG:        DC.B        '0',0
000018B5= 31 00                    921  ONE_MSG:         DC.B        '1',0
000018B7= 32 00                    922  TWO_MSG:         DC.B        '2',0
000018B9= 33 00                    923  THREE_MSG:       DC.B        '3',0
000018BB= 34 00                    924  FOUR_MSG:        DC.B        '4',0
000018BD= 35 00                    925  FIVE_MSG:        DC.B        '5',0
000018BF= 36 00                    926  SIX_MSG:         DC.B        '6',0
000018C1= 37 00                    927  SEVEN_MSG:       DC.B        '7',0
000018C3= 38 00                    928  EIGHT_MSG:       DC.B        '8',0
000018C5= 39 00                    929  NINE_MSG:        DC.B        '9',0
000018C7= 41 00                    930  A_MSG:           DC.B        'A',0
000018C9= 42 00                    931  B_MSG:           DC.B        'B',0
000018CB= 43 00                    932  C_MSG:           DC.B        'C',0
000018CD= 44 00                    933  D_MSG:           DC.B        'D',0
000018CF= 45 00                    934  E_MSG:           DC.B        'E',0
000018D1= 46 00                    935  F_MSG:           DC.B        'F',0 
000018D3                           936  
000018D3                           937  * opcodes
000018D3= 4A 53 52 20 00           938  JSRMSG:             DC.B        'JSR ',0
000018D8= 4E 4F 54 00              939  NOT_MSG:        DC.B        'NOT',0
000018DC= 42 52 41 00              940  BRA_MSG:        DC.B        'BRA',0
000018E0= 4A 53 52 00              941  JSR_MSG:        DC.B        'JSR',0
000018E4= 4D 4F 56 45 51 00        942  MOVEQ_MSG:      DC.B        'MOVEQ',0
000018EA= 41 4E 44 00              943  AND_MSG:        DC.B        'AND',0
000018EE= 41 53 52 00              944  ASR_MSG         DC.B        'ASR',0
000018F2= 41 53 4C 00              945  ASL_MSG         DC.B        'ASL',0
000018F6= 4C 53 52 00              946  LSR_MSG         DC.B        'LSR',0
000018FA= 4C 53 4C 00              947  LSL_MSG         DC.B        'LSL',0
000018FE= 52 4F 58 00              948  ROXR_MSG        DC.B        'ROX',0  *Unused messages but present because helps in indexing, DONT USE IT
00001902= 52 4F 58 00              949  ROXL_MSG        DC.B        'ROX',0  *Unused messages but present because helps in indexing, DONT USE IT
00001906= 52 4F 52 00              950  ROR_MSG         DC.B        'ROR',0
0000190A= 52 4F 4C 00              951  ROL_MSG         DC.B        'ROL',0
0000190E= 4F 52 00                 952  OR_MSG:         DC.B        'OR',0
00001911= 44 41 54 41 00           953  DATA_MSG:       DC.B        'DATA',0
00001916= 42 00                    954  BCC_MSG         DC.B        'B', 0
00001918= 42 4C 45 00              955  BLE_MSG         DC.B        'BLE', 0
0000191C= 42 47 54 00              956  BGT_MSG         DC.B        'BGT',0
00001920= 42 45 51 00              957  BEQ_MSG         DC.B        'BEQ',0
00001924= 2E 42 00                 958  BYTE_MSG        DC.B        '.B', 0
00001927= 2E 57 00                 959  WORD_MSG        DC.B        '.W', 0
0000192A= 2E 4C 00                 960  LONG_MSG        DC.B        '.L', 0
0000192D                           961  
0000192D= 2C 00                    962  COMMA_MSG       DC.B        ',', 0
0000192F= 24 00                    963  DOLLAR_MSG      DC.B        '$', 0
00001931= 23 00                    964  HASH_MSG        DC.B        '#', 0
00001933= 2B 00                    965  PLUS_MSG        DC.B        '+', 0
00001935= 2D 00                    966  MINUS_MSG       DC.B        '-', 0
00001937= 28 00                    967  OPEN_PARENTHESIS_MSG  DC.B   '(', 0
00001939= 29 00                    968  CLOSE_PARENTHESIS_MSG DC.B  ')', 0
0000193B                           969  *-----Carriage Return
0000193B  =0000000D                970  CR              EQU          $0D
0000193B                           971  *-----------Line Feed
0000193B  =0000000A                972  LF              EQU          $0A
0000193B                           973  
0000193B= 0D 0A 00                 974  NEW_LINE:       DC.B         '',CR,LF,0
0000193E                           975  
0000193E                           976      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
AND_MSG             18EA
ASCII_DONE          106E
ASL_MSG             18F2
ASR_MSG             18EE
A_MSG               18C7
BCC_BYTE_DISPLACEMENT  1562
BCC_EA_SIZE_AND_DISPLACEMENT  1548
BCC_MSG             1916
BCC_WORD_DISPLACEMENT  1582
BEQ_MSG             1920
BGT_MSG             191C
BLE_MSG             1918
BRA_MSG             18DC
BYTE_MSG            1924
B_MSG               18C9
CHECK_OPCODES       116A
CLOSE_PARENTHESIS_MSG  1939
COMMA_MSG           192D
CONVERT_TO_ASCII    1056
CR                  D
C_MSG               18CB
DATA_MSG            1911
DOLLAR_MSG          192F
DONE                1158
D_MSG               18CD
EA_ABS_LONG         173E
EA_ABS_WORD         1726
EA_ADDR_REGISTER    1626
EA_DATA_REGISTER    15FE
EA_INDIRECT         164E
EA_INDIRECT_DECREMENT  16DA
EA_INDIRECT_INCREMENT  168E
EIGHT_MSG           18C3
ENDING_MSG          182A
END_ADDR            1888
E_MSG               18CF
FIVE_MSG            18BD
FOUR_MSG            18BB
F_MSG               18D1
GET_BIT             13EA
GET_EA              15A6
GOODBYE_MSG         184C
HASH_MSG            1931
INSTRUCTION_DECODE_FAILURE  13FE
INTRO_MSG           17E0
ISOLATE_15_12       11A6
ISOLATE_15_6        117E
ISOLATE_15_8        118E
JSRMSG              18D3
JSR_MSG             18E0
LETTER_ASCII        1084
LF                  A
LONG_MSG            192A
LSL_MSG             18FA
LSR_MSG             18F6
MINUS_MSG           1935
MOVEQ_MSG           18E4
NEW_LINE            193B
NINE_MSG            18C5
NOT_MSG             18D8
NUMBER_ASCII        1070
ONE_MSG             18B5
OPEN_PARENTHESIS_MSG  1937
OP_CODE_AND         120E
OP_CODE_BCC         121C
OP_CODE_BEQ         1276
OP_CODE_BGT         1262
OP_CODE_BLE         124E
OP_CODE_BRA         11E4
OP_CODE_DATA        12AA
OP_CODE_JSR         11F2
OP_CODE_MEMORY_SHIFT_ROTATE  1328
OP_CODE_MOVEQ       1200
OP_CODE_NOT         11D6
OP_CODE_OR          128A
OP_CODE_REGISTER_SHIFT_ROTATE  12D8
OP_CODE_SHIFT_ROTATE  12B8
OR_MSG              190E
PLUS_MSG            1933
PRINT_BYTE_VALUE    1754
PRINT_BYTE_VALUE_LOOP  175A
PRINT_DONE          1126
PRINT_LONG_VALUE    17AE
PRINT_LONG_VALUE_LOOP  17B4
PRINT_LOOP          10F8
PRINT_MEMORY_LOOP   1098
PRINT_WORD_VALUE    1780
PRINT_WORD_VALUE_LOOP  1786
REVERSE_DONE        1156
REVERSE_LOOP        1138
REVERSE_START       1128
ROL_MSG             190A
ROR_MSG             1906
ROXL_MSG            1902
ROXR_MSG            18FE
SEVEN_MSG           18C1
SHIFT_ROTATE_COUNT_1_7  14BA
SHIFT_ROTATE_COUNT_8  14CE
SHIFT_ROTATE_EA_MEMORY  151A
SHIFT_ROTATE_EA_REGISTER  1430
SHIFT_ROTATE_EA_SIZE  1400
SHIFT_ROTATE_IMM_SOURCE  14DC
SHIFT_ROTATE_REGISTER_DEST  147C
SHIFT_ROTATE_REGISTER_SOURCE  144A
SIX_MSG             18BF
SPACE_MSG           18B0
START               1000
STARTING_MSG        1806
STA_ADDR            1860
THREE_MSG           18B9
TWO_MSG             18B7
WORD_MSG            1927
ZERO_MSG            18B3
