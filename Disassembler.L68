00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 7/28/2022 2:21:44 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :Disassembler
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  START:                  ; first instruction of program
00001000                             9  
00001000                            10  * Put program code here
00001000                            11  
00001000                            12  *------LEA = Load effective address
00001000                            13  *------Running Trap #15 while the number 14 is in D0 will print out whatever data is in the address stored in A1
00001000                            14  
00001000  43F9 000013BC             15          LEA         INTRO_MSG,      A1
00001006  103C 000E                 16          MOVE.B      #14,            D0    
0000100A  4E4F                      17          TRAP        #15
0000100C                            18          
0000100C  43F9 000013E2             19          LEA         STARTING_MSG,   A1
00001012  103C 000E                 20          MOVE.B      #14,            D0   
00001016  4E4F                      21          TRAP        #15
00001018                            22          
00001018                            23  *----------------- 
00001018                            24  *       Running trap command 15 while the number 2 is in D0 
00001018                            25  *       Will ask the user to enter input
00001018                            26  *       after the user hits enter, the length of the input is stored in D1
00001018                            27  *       and the user data is stored in the space allocated by STA_ADDR repressented by ASSCI code
00001018                            28  *       IE 31 = 1, 32 = 2 etc etc
00001018                            29  *       If I store the number 1200, it will appear in memory as 31 32 30 30
00001018                            30  
00001018  43F9 0000143C             31          LEA         STA_ADDR,       A1
0000101E  103C 0002                 32          MOVE.B      #2,             D0
00001022  4E4F                      33          TRAP        #15
00001024                            34          
00001024  4EB9 00001056             35          JSR         CONVERT_TO_ASCII
0000102A                            36          
0000102A                            37          * A3 now has our Starting Address
0000102A  2647                      38          MOVEA.L     D7,             A3
0000102C                            39          
0000102C  4282                      40          CLR.L       D2
0000102E  4287                      41          CLR.L       D7
00001030                            42          
00001030  43F9 00001406             43          LEA         ENDING_MSG,     A1
00001036  103C 000E                 44          MOVE.B      #14,            D0
0000103A  4E4F                      45          TRAP        #15
0000103C                            46          
0000103C  43F9 00001464             47          LEA         END_ADDR,       A1
00001042  103C 0002                 48          MOVE.B      #2,             D0
00001046  4E4F                      49          TRAP        #15
00001048                            50          
00001048  4EB9 00001056             51          JSR         CONVERT_TO_ASCII
0000104E                            52          * A4 now has our Ending Address
0000104E  2847                      53          MOVEA.L     D7,             A4
00001050                            54          
00001050                            55  
00001050  4EB9 00001098             56          JSR         PRINT_MEMORY_LOOP
00001056                            57          
00001056                            58          
00001056                            59          
00001056                            60          *BRA         DONE
00001056                            61          *   ASCII conversion
00001056                            62  *---------------------------------------        
00001056                            63  CONVERT_TO_ASCII:             
00001056  0C01 0000                 64          CMPI.B      #$0,            D1
0000105A  6700 0012                 65          BEQ         ASCII_DONE
0000105E  1419                      66          MOVE.B      (A1)+,          D2
00001060  103C 0039                 67          MOVE.B      #$39,           D0
00001064  B400                      68          CMP.B       D0,             D2
00001066  6F00 0008                 69          BLE         NUMBER_ASCII   
0000106A  6000 0018                 70          BRA         LETTER_ASCII  
0000106E                            71  
0000106E                            72  ASCII_DONE:
0000106E  4E75                      73          RTS
00001070                            74          
00001070                            75  NUMBER_ASCII:
00001070  5301                      76          SUBI.B      #$1,            D1
00001072  103C 0030                 77          MOVE.B      #$30,           D0
00001076  9400                      78          SUB.B       D0,             D2
00001078  DE02                      79          ADD.B       D2,             D7
0000107A  0C01 0000                 80          CMPI.B      #$0,            D1
0000107E  67EE                      81          BEQ         ASCII_DONE
00001080  E987                      82          ASL.L       #4,             D7
00001082  60D2                      83          BRA         CONVERT_TO_ASCII
00001084                            84  LETTER_ASCII:
00001084  5301                      85          SUBI.B      #$1,            D1
00001086  103C 0037                 86          MOVE.B      #$37,           D0
0000108A  9400                      87          SUB.B       D0,             D2
0000108C  DE02                      88          ADD.B       D2,             D7
0000108E  0C01 0000                 89          CMPI.B      #$0,            D1
00001092  67DA                      90          BEQ         ASCII_DONE
00001094  E987                      91          ASL.L       #4,             D7
00001096  60BE                      92          BRA         CONVERT_TO_ASCII
00001098                            93  *---------------------------------------        
00001098                            94          
00001098                            95          
00001098                            96          *   Printing data and addresses
00001098                            97  *---------------------------------------
00001098                            98  
00001098                            99  PRINT_MEMORY_LOOP:
00001098                           100          * add code here to compare current address with end address
00001098                           101          
00001098                           102          * if equal to, or further than ending address jump to DONE
00001098                           103          * SIMHALT
00001098  B9CB                     104          CMP.L       A3,             A4
0000109A  6700 00BC                105          BEQ         DONE
0000109E  6F00 00B8                106          BLE         DONE
000010A2                           107          
000010A2                           108          * We are goiong to keep track of the number of byts we have examined using D1
000010A2                           109          * Before printing the address we have to reverse the order
000010A2  4281                     110          CLR.L       D1
000010A4  4282                     111          CLR.L       D2
000010A6  123C 0008                112          MOVE.B      #$8,            D1
000010AA  260B                     113          MOVE.L      A3,             D3
000010AC  4EB9 00001128            114          JSR         REVERSE_START
000010B2                           115          
000010B2  2607                     116          MOVE.L      D7,             D3
000010B4  4281                     117          CLR.L       D1
000010B6  4282                     118          CLR.L       D2
000010B8  123C 0008                119          MOVE.B      #$8,            D1
000010BC  4EB9 000010F8            120          JSR         PRINT_LOOP
000010C2                           121          
000010C2                           122          
000010C2                           123          * space between address and data
000010C2  43F9 0000148C            124          LEA         SPACE_MSG,      A1
000010C8  103C 000E                125          MOVE.B      #14,            D0    
000010CC  4E4F                     126          TRAP        #15
000010CE                           127          
000010CE  4281                     128          CLR.L       D1
000010D0  4282                     129          CLR.L       D2
000010D2  123C 0008                130          MOVE.B      #$8,            D1
000010D6  361B                     131          MOVE.W      (A3)+,          D3
000010D8                           132          *JSR         REVERSE_START
000010D8                           133          
000010D8                           134          *MOVE.L      D7,             D3
000010D8  4281                     135          CLR.L       D1
000010DA  4282                     136          CLR.L       D2
000010DC                           137          *MOVE.B      #$8,            D1
000010DC                           138          *JSR         PRINT_LOOP
000010DC                           139          
000010DC                           140          * Jump to Function in another file
000010DC  4EB9 0000116A            141          JSR         CHECK_OPCODES
000010E2                           142          
000010E2                           143          
000010E2  4281                     144          CLR.L       D1
000010E4  4282                     145          CLR.L       D2
000010E6  4283                     146          CLR.L       D3
000010E8  4284                     147          CLR.L       D4
000010EA                           148          * new line
000010EA  43F9 000014AF            149          LEA         NEW_LINE,       A1
000010F0  103C 000E                150          MOVE.B      #14,            D0    
000010F4  4E4F                     151          TRAP        #15
000010F6                           152  
000010F6                           153          * branch to the start of this method
000010F6  60A0                     154          BRA         PRINT_MEMORY_LOOP
000010F8                           155  
000010F8                           156  
000010F8                           157  PRINT_LOOP:
000010F8                           158  
000010F8                           159          
000010F8                           160          * When D1 == 0, we are done and exit this loop
000010F8  0C01 0000                161          CMPI.B      #$0,            D1
000010FC  6700 0028                162          BEQ         PRINT_DONE
00001100  5301                     163          SUBI.B      #$1,            D1
00001102                           164          
00001102  1403                     165          MOVE.B      D3,             D2
00001104                           166          * Bit shifting to isolate the right most digit
00001104                           167          * 1234 5678 => 8000 0000 => 0000 0008
00001104  103C 001C                168          MOVE.B      #28,            D0    
00001108  E1AA                     169          LSL.L       D0,             D2     
0000110A  E99A                     170          ROL.L       #4,             D2 
0000110C                           171          
0000110C                           172          * Bit shifting to prep the next digit
0000110C                           173          * 1234 4567 => 0123 4567
0000110C  E88B                     174          LSR.L       #4, D3
0000110E                           175          
0000110E                           176          *Assuming D4 is empty
0000110E                           177          
0000110E  1802                     178          MOVE.B       D2,            D4
00001110  43F9 0000148F            179          LEA          ZERO_MSG,      A1
00001116                           180          * load the address of Zero_msg
00001116                           181          * because all of the msgs are stored next to each other in order
00001116                           182          * we can simply take the value isolated from the number, multiply it by 2 (msg's take up 2 bytes)
00001116                           183          * and then add it to the address starting at zero_msg
00001116  C8FC 0002                184          MULU         #2,            D4
0000111A  D3C4                     185          ADDA.L       D4,            A1
0000111C                           186          
0000111C                           187          * trap command 14 reads whatever address is in A1, and then spits out the data to the console
0000111C  103C 000E                188          MOVE.B       #14,           D0
00001120  4E4F                     189          TRAP         #15
00001122  60D4                     190          BRA          PRINT_LOOP
00001124  4644                     191          NOT          D4
00001126                           192          
00001126                           193  PRINT_DONE:
00001126  4E75                     194          RTS
00001128                           195          
00001128                           196      *   Reversing the address
00001128                           197  *---------------------------------------
00001128                           198  
00001128                           199  REVERSE_START:        
00001128  4281                     200          CLR.L       D1
0000112A  4287                     201          CLR.L       D7
0000112C  123C 0008                202          MOVE.B      #8,             D1
00001130  4EB9 00001138            203          JSR         REVERSE_LOOP
00001136  4E75                     204          RTS
00001138                           205          
00001138                           206  REVERSE_LOOP:
00001138                           207  
00001138                           208          
00001138  0C01 0000                209          CMPI.B      #$0,            D1
0000113C  6700 0018                210          BEQ         REVERSE_DONE
00001140  5301                     211          SUBI.B      #$1,            D1
00001142  E987                     212          ASL.L       #4,             D7
00001144                           213          
00001144  4285                     214          CLR.L       D5
00001146                           215          
00001146  1A03                     216          MOVE.B      D3,             D5
00001148                           217          
00001148  103C 001C                218          MOVE.B      #28,            D0    
0000114C  E1AD                     219          LSL.L       D0,             D5     
0000114E  E99D                     220          ROL.L       #4,             D5
00001150                           221          
00001150  DE05                     222          ADD.B       D5,             D7
00001152                           223          
00001152                           224          
00001152  E883                     225          ASR.L       #4,             D3
00001154                           226          
00001154  60E2                     227          BRA         REVERSE_LOOP
00001156                           228  
00001156                           229  REVERSE_DONE:
00001156  4E75                     230          RTS
00001158                           231  DONE:
00001158                           232  
00001158  43F9 00001428            233          LEA         GOODBYE_MSG,    A1
0000115E  103C 000E                234          MOVE.B      #14,            D0
00001162  4E4F                     235          TRAP        #15
00001164  103C 0009                236          MOVE.B      #9,             D0
00001168  4E4F                     237          TRAP        #15        
0000116A                           238          
0000116A                           239  
0000116A                           240      *SIMHALT             ; halt simulator
0000116A                           241  
0000116A                           242      INCLUDE         'Disassembler_OPCodes.x68'
0000116A                           243  
0000116A                           244  
0000116A                           245  CHECK_OPCODES:
0000116A                           246  
0000116A  4EB9 0000117E            247          JSR     ISOLATE_15_6
00001170  4EB9 0000118E            248          JSR     ISOLATE_15_8
00001176  4EB9 000011A6            249          JSR     ISOLATE_15_12
0000117C  4E75                     250          RTS
0000117E                           251          
0000117E                           252  ISOLATE_15_6:
0000117E                           253          
0000117E  2803                     254          MOVE.L      D3,     D4
00001180  7406                     255          MOVE.L      #6,     D2
00001182  E4AC                     256          LSR.L       D2,     D4
00001184                           257          
00001184  B87C 013A                258          CMP.W       #$13A,  D4
00001188  6700 0060                259          BEQ         OP_CODE_JSR
0000118C                           260          
0000118C  4E75                     261          RTS
0000118E                           262  
0000118E                           263  
0000118E                           264  ISOLATE_15_8:
0000118E                           265          *SIMHALT
0000118E  2803                     266          MOVE.L      D3,     D4
00001190  7408                     267          MOVE.L      #8,     D2
00001192  E4AC                     268          LSR.L       D2,     D4
00001194                           269          
00001194  B83C 0046                270          CMP.B       #$46,   D4
00001198  6700 0034                271          BEQ         OP_CODE_NOT
0000119C  B83C 0060                272          CMP.B       #$60,   D4
000011A0  6700 003A                273          BEQ         OP_CODE_BRA
000011A4                           274  
000011A4  4E75                     275          RTS
000011A6                           276          
000011A6                           277  ISOLATE_15_12:
000011A6  2803                     278          MOVE.L      D3,     D4
000011A8  740C                     279          MOVE.L      #12,    D2
000011AA  E4AC                     280          LSR.L       D2,     D4
000011AC                           281          
000011AC  B83C 0007                282          CMP.B       #$7,    D4
000011B0  6700 0046                283          BEQ         OP_CODE_MOVEQ
000011B4  B83C 0008                284          CMP.B       #$8,    D4
000011B8  6700 018E                285          BEQ         OP_CODE_OR      *may get confused with DIVU + any other opcodes that start with 1000 (ones that we are not required to cover)
000011BC  B83C 000C                286          CMP.B       #$C,    D4
000011C0  6700 0044                287          BEQ         OP_CODE_AND
000011C4                           288          *If the 15-12 are 0110
000011C4  B83C 0006                289          CMP.B       #6,     D4
000011C8  6700 004A                290          BEQ         OP_CODE_BCC
000011CC  4E75                     291          RTS
000011CE                           292  
000011CE                           293  
000011CE                           294  
000011CE                           295  OP_CODE_NOT:
000011CE  43F9 0000138A            296          LEA         NOT_MSG, A1
000011D4  103C 000E                297          MOVE.B      #14, D0
000011D8  4E4F                     298          TRAP        #15
000011DA                           299          
000011DA  4E75                     300          RTS 
000011DC                           301  OP_CODE_BRA:
000011DC  43F9 0000138E            302          LEA         BRA_MSG, A1
000011E2  103C 000E                303          MOVE.B      #14, D0
000011E6  4E4F                     304          TRAP        #15
000011E8                           305          
000011E8  4E75                     306          RTS 
000011EA                           307  OP_CODE_JSR:
000011EA  43F9 00001392            308          LEA         JSR_MSG, A1
000011F0  103C 000E                309          MOVE.B      #14, D0
000011F4  4E4F                     310          TRAP        #15
000011F6                           311          
000011F6  4E75                     312          RTS
000011F8                           313  OP_CODE_MOVEQ:
000011F8  43F9 00001396            314          LEA         MOVEQ_MSG, A1
000011FE  103C 000E                315          MOVE.B      #14, D0
00001202  4E4F                     316          TRAP        #15
00001204                           317          
00001204  4E75                     318          RTS
00001206                           319  OP_CODE_AND:
00001206  43F9 0000139C            320          LEA         AND_MSG, A1
0000120C  103C 000E                321          MOVE.B      #14, D0
00001210  4E4F                     322          TRAP        #15
00001212                           323          
00001212  4E75                     324          RTS
00001214                           325  
00001214                           326  OP_CODE_BCC
00001214                           327          *Get bits from 8-11 to get the condition
00001214                           328          *Only checking for (BGT, BLE, BEQ). Rest are considered
00001214                           329          *invalid
00001214  48E7 0600                330          MOVEM.L    D5-D6, -(A7)
00001218  7A08                     331          MOVE.L     #8, D5
0000121A  7C0B                     332          MOVE.L     #11, D6
0000121C  4EB9 00001376            333          JSR        GET_BIT
00001222  4CDF 0060                334          MOVEM.L    (A7)+, D5-D6
00001226  B8BC 0000000F            335          CMP.L      #15, D4
0000122C  6700 0018                336          BEQ        OP_CODE_BLE
00001230  B8BC 0000000E            337          CMP.L      #14, D4
00001236  6700 001E                338          BEQ        OP_CODE_BGT
0000123A  B8BC 00000007            339          CMP.L      #7,  D4
00001240  6700 0024                340          BEQ        OP_CODE_BEQ
00001244                           341          *Invalid instruction for the scope
00001244  4E75                     342          RTS
00001246                           343  
00001246                           344  
00001246                           345  OP_CODE_BLE
00001246  43F9 000013AA            346          LEA         BLE_MSG, A1
0000124C  103C 000E                347          MOVE.B      #14, D0
00001250  4E4F                     348          TRAP        #15
00001252  6000 0022                349          BRA PRINT_BCC_SIZE_ATTR
00001256                           350  
00001256                           351  OP_CODE_BGT
00001256  43F9 000013AE            352          LEA         BGT_MSG, A1
0000125C  103C 000E                353          MOVE.B      #14, D0
00001260  4E4F                     354          TRAP        #15
00001262  6000 0012                355          BRA PRINT_BCC_SIZE_ATTR
00001266                           356  
00001266                           357  
00001266                           358  OP_CODE_BEQ
00001266  43F9 000013B2            359          LEA         BEQ_MSG, A1
0000126C  103C 000E                360          MOVE.B      #14, D0
00001270  4E4F                     361          TRAP        #15
00001272  6000 0002                362          BRA PRINT_BCC_SIZE_ATTR
00001276                           363  
00001276                           364  
00001276                           365  PRINT_BCC_SIZE_ATTR
00001276  48E7 0600                366          MOVEM.L    D5-D6, -(A7)
0000127A  7A00                     367          MOVE.L     #0, D5
0000127C  7C07                     368          MOVE.L     #7, D6
0000127E  4EB9 00001376            369          JSR        GET_BIT
00001284  4CDF 0060                370          MOVEM.L    (A7)+, D5-D6
00001288  B8BC 00000000            371          CMP.L      #0, D4
0000128E  6700 0064                372          BEQ        PRINT_WORD_SIZE_ATTR
00001292                           373  PRINT_BYTE_SIZE_ATTR
00001292  43F9 000013B6            374          LEA         BYTE_MSG, A1
00001298  103C 000E                375          MOVE.B      #14, D0
0000129C  4E4F                     376          TRAP        #15
0000129E  43F9 0000148C            377          LEA         SPACE_MSG,      A1
000012A4  103C 000E                378          MOVE.B      #14,            D0    
000012A8  4E4F                     379          TRAP        #15
000012AA  48E7 0600                380          MOVEM.L    D5-D6, -(A7)
000012AE  7A00                     381          MOVE.L     #0, D5
000012B0  7C07                     382          MOVE.L     #7, D6
000012B2  4EB9 00001376            383          JSR        GET_BIT
000012B8  4CDF 0060                384          MOVEM.L    (A7)+, D5-D6
000012BC                           385  
000012BC                           386  
000012BC  48E7 0600                387          MOVEM.L    D5-D6, -(A7)
000012C0  7C02                     388          MOVE.L     #2, D6
000012C2                           389  BYTE_DISPLACEMENT_PRINT_LOOP
000012C2                           390          *Gets the most significant bit basically
000012C2                           391          *Could use GET_BIT subroutine but it is 
000012C2                           392          *costly in terms of registers used
000012C2  1A04                     393          MOVE.B     D4, D5
000012C4  E80D                     394          LSR.B      #4, D5
000012C6  E90C                     395          LSL.B      #4, D4
000012C8  43F9 0000148F            396          LEA        ZERO_MSG,      A1
000012CE                           397          * load the address of Zero_msg
000012CE                           398          * because all of the msgs are stored next to each other in order
000012CE                           399          * we can simply take the value isolated from the number, multiply it by 2 (msg's take up 2 bytes)
000012CE                           400          * and then add it to the address starting at zero_msg
000012CE  CAFC 0002                401          MULU         #2,            D5
000012D2  D3C5                     402          ADDA.L       D5,            A1
000012D4  103C 000E                403          MOVE.B      #14, D0
000012D8  4E4F                     404          TRAP        #15
000012DA  5386                     405          SUBI.L      #1, D6
000012DC  BC3C 0000                406          CMP.B        #0, D6
000012E0  66E0                     407          BNE         BYTE_DISPLACEMENT_PRINT_LOOP
000012E2                           408          
000012E2  43F9 000014AF            409          LEA         NEW_LINE,       A1
000012E8  103C 000E                410          MOVE.B      #14,            D0    
000012EC  4E4F                     411          TRAP        #15
000012EE  4CDF 0060                412          MOVEM.L    (A7)+, D5-D6
000012F2  4E75                     413          RTS
000012F4                           414          
000012F4                           415  PRINT_WORD_SIZE_ATTR
000012F4  43F9 000013B9            416          LEA         WORD_MSG, A1
000012FA  103C 000E                417          MOVE.B      #14, D0
000012FE  4E4F                     418          TRAP        #15
00001300  43F9 0000148C            419          LEA         SPACE_MSG,      A1
00001306  103C 000E                420          MOVE.B      #14,            D0    
0000130A  4E4F                     421          TRAP        #15
0000130C  361B                     422          MOVE.W      (A3)+,  D3
0000130E  3803                     423          MOVE.W      D3, D4
00001310                           424  
00001310  48E7 0600                425          MOVEM.L    D5-D6, -(A7)
00001314  7C04                     426          MOVE.L     #4, D6
00001316                           427  WORD_DISPLACEMENT_PRINT_LOOP
00001316                           428          *Gets the most significant bit basically
00001316                           429          *Could use GET_BIT subroutine but it is 
00001316                           430          *costly in terms of registers used
00001316  3A04                     431          MOVE.W     D4, D5
00001318  E84D                     432          LSR.W      #4, D5
0000131A  E94C                     433          LSL.W      #4, D4
0000131C  43F9 0000148F            434          LEA        ZERO_MSG,      A1
00001322                           435          * load the address of Zero_msg
00001322                           436          * because all of the msgs are stored next to each other in order
00001322                           437          * we can simply take the value isolated from the number, multiply it by 2 (msg's take up 2 bytes)
00001322                           438          * and then add it to the address starting at zero_msg
00001322  CAFC 0002                439          MULU         #2,            D5
00001326  D3C5                     440          ADDA.L       D5,            A1
00001328  103C 000E                441          MOVE.B      #14, D0
0000132C  4E4F                     442          TRAP        #15
0000132E  5386                     443          SUBI.L      #1, D6
00001330  BC3C 0000                444          CMP.B       #0, D6
00001334  66E0                     445          BNE         WORD_DISPLACEMENT_PRINT_LOOP
00001336                           446          
00001336  43F9 000014AF            447          LEA         NEW_LINE,       A1
0000133C  103C 000E                448          MOVE.B      #14,            D0    
00001340  4E4F                     449          TRAP        #15
00001342  4CDF 0060                450          MOVEM.L    (A7)+, D5-D6
00001346  4E75                     451          RTS
00001348                           452          
00001348                           453  
00001348                           454  OP_CODE_OR:
00001348                           455          *check for divu/other opcodes that start with 1000
00001348                           456          *isolate bits 8-6 to check for DIVU
00001348  2803                     457          MOVE.L      D3,     D4
0000134A  7407                     458          MOVE.L      #7,     D2
0000134C  E56C                     459          LSL.W       D2,     D4
0000134E  740D                     460          MOVE.L      #13,    D2
00001350  E46C                     461          LSR.W       D2,     D4
00001352                           462          
00001352  B83C 0003                463          CMP.B       #$3,    D4
00001356  6700 0010                464          BEQ         OP_CODE_DATA
0000135A                           465          
0000135A  43F9 000013A0            466          LEA         OR_MSG, A1
00001360  103C 000E                467          MOVE.B      #14, D0
00001364  4E4F                     468          TRAP        #15
00001366                           469          
00001366  4E75                     470          RTS
00001368                           471  OP_CODE_DATA:
00001368  43F9 000013A3            472          LEA         DATA_MSG, A1
0000136E  103C 000E                473          MOVE.B      #14, D0
00001372  4E4F                     474          TRAP        #15
00001374                           475          
00001374  4E75                     476          RTS        
00001376                           477  
00001376                           478  
00001376                           479  
00001376                           480  GET_BIT
00001376  4284                     481          CLR.L   D4
00001378  3803                     482          MOVE.W  D3, D4   
0000137A                           483          *Shift it to left by 15-y to get rid of all the bits to the left of yth bit 
0000137A                           484          *and then shift the bits such that the xth bit is the 0th bit
0000137A  4486                     485          NEG.L   D6
0000137C  0686 0000000F            486          ADDI.L  #15, D6
00001382  DA86                     487          ADD.L   D6, D5
00001384  ED6C                     488          LSL.W   D6, D4
00001386  EA6C                     489          LSR.W   D5, D4
00001388  4E75                     490          RTS
0000138A                           491  
0000138A                           492  
0000138A                           493  
0000138A                           494  
0000138A= 4E 4F 54 00              495  NOT_MSG:        DC.B        'NOT',0
0000138E= 42 52 41 00              496  BRA_MSG:        DC.B        'BRA',0
00001392= 4A 53 52 00              497  JSR_MSG:        DC.B        'JSR',0
00001396= 4D 4F 56 45 51 00        498  MOVEQ_MSG:      DC.B        'MOVEQ',0
0000139C= 41 4E 44 00              499  AND_MSG:        DC.B        'AND',0
000013A0= 4F 52 00                 500  OR_MSG:         DC.B        'OR',0
000013A3= 44 41 54 41 00           501  DATA_MSG:       DC.B        'DATA',0
000013A8= 42 00                    502  BCC_MSG         DC.B        'B', 0
000013AA= 42 4C 45 00              503  BLE_MSG         DC.B        'BLE', 0
000013AE= 42 47 54 00              504  BGT_MSG         DC.B        'BGT',0
000013B2= 42 45 51 00              505  BEQ_MSG         DC.B        'BEQ',0
000013B6= 2E 42 00                 506  BYTE_MSG        DC.B        '.B', 0
000013B9= 2E 57 00                 507  WORD_MSG        DC.B        '.W', 0
000013BC                           508  
000013BC                           509  
000013BC                           510  
000013BC                           511  
000013BC                           512  -------------------- end include --------------------
000013BC                           513      *INCLUDE         'demo_test.x68'
000013BC                           514  
000013BC                           515  
000013BC                           516  * Put variables and constants here
000013BC                           517  
000013BC= 57 65 6C 63 6F 6D ...    518  INTRO_MSG:       DC.B       'Welcome to Team Cools Disassembler!',CR,LF,0
000013E2= 50 6C 65 61 73 65 ...    519  STARTING_MSG:    DC.B       'Please enter the Starting Address',CR,LF,0
00001406= 50 6C 65 61 73 65 ...    520  ENDING_MSG:      DC.B       'Please enter the Ending Address',CR,LF,0
00001428= 44 6F 6E 65 20 52 ...    521  GOODBYE_MSG:     DC.B       'Done Reading data',CR,LF,0
0000143C                           522  * CR and LF for strings above because we want to go to next line after printing message
0000143C                           523  
0000143C                           524  STA_ADDR         DS.B        40
00001464                           525  END_ADDR         DS.B        40
0000148C                           526  
0000148C                           527  * no CR and LF for strings below because we want to print each number and letter
0000148C                           528  
0000148C= 20 20 00                 529  SPACE_MSG:       DC.B        '  ',0
0000148F                           530  
0000148F= 30 00                    531  ZERO_MSG:        DC.B        '0',0
00001491= 31 00                    532  ONE_MSG:         DC.B        '1',0
00001493= 32 00                    533  TWO_MSG:         DC.B        '2',0
00001495= 33 00                    534  THREE_MSG:       DC.B        '3',0
00001497= 34 00                    535  FOUR_MSG:        DC.B        '4',0
00001499= 35 00                    536  FIVE_MSG:        DC.B        '5',0
0000149B= 36 00                    537  SIX_MSG:         DC.B        '6',0
0000149D= 37 00                    538  SEVEN_MSG:       DC.B        '7',0
0000149F= 38 00                    539  EIGHT_MSG:       DC.B        '8',0
000014A1= 39 00                    540  NINE_MSG:        DC.B        '9',0
000014A3= 41 00                    541  A_MSG:           DC.B        'A',0
000014A5= 42 00                    542  B_MSG:           DC.B        'B',0
000014A7= 43 00                    543  C_MSG:           DC.B        'C',0
000014A9= 44 00                    544  D_MSG:           DC.B        'D',0
000014AB= 45 00                    545  E_MSG:           DC.B        'E',0
000014AD= 46 00                    546  F_MSG:           DC.B        'F',0 
000014AF                           547  
000014AF                           548  
000014AF                           549  *-----Carriage Return
000014AF  =0000000D                550  CR              EQU          $0D
000014AF                           551  *-----------Line Feed
000014AF  =0000000A                552  LF              EQU          $0A
000014AF                           553  
000014AF= 0D 0A 00                 554  NEW_LINE:       DC.B         '',CR,LF,0
000014B2                           555  
000014B2                           556      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
AND_MSG             139C
ASCII_DONE          106E
A_MSG               14A3
BCC_MSG             13A8
BEQ_MSG             13B2
BGT_MSG             13AE
BLE_MSG             13AA
BRA_MSG             138E
BYTE_DISPLACEMENT_PRINT_LOOP  12C2
BYTE_MSG            13B6
B_MSG               14A5
CHECK_OPCODES       116A
CONVERT_TO_ASCII    1056
CR                  D
C_MSG               14A7
DATA_MSG            13A3
DONE                1158
D_MSG               14A9
EIGHT_MSG           149F
ENDING_MSG          1406
END_ADDR            1464
E_MSG               14AB
FIVE_MSG            1499
FOUR_MSG            1497
F_MSG               14AD
GET_BIT             1376
GOODBYE_MSG         1428
INTRO_MSG           13BC
ISOLATE_15_12       11A6
ISOLATE_15_6        117E
ISOLATE_15_8        118E
JSR_MSG             1392
LETTER_ASCII        1084
LF                  A
MOVEQ_MSG           1396
NEW_LINE            14AF
NINE_MSG            14A1
NOT_MSG             138A
NUMBER_ASCII        1070
ONE_MSG             1491
OP_CODE_AND         1206
OP_CODE_BCC         1214
OP_CODE_BEQ         1266
OP_CODE_BGT         1256
OP_CODE_BLE         1246
OP_CODE_BRA         11DC
OP_CODE_DATA        1368
OP_CODE_JSR         11EA
OP_CODE_MOVEQ       11F8
OP_CODE_NOT         11CE
OP_CODE_OR          1348
OR_MSG              13A0
PRINT_BCC_SIZE_ATTR  1276
PRINT_BYTE_SIZE_ATTR  1292
PRINT_DONE          1126
PRINT_LOOP          10F8
PRINT_MEMORY_LOOP   1098
PRINT_WORD_SIZE_ATTR  12F4
REVERSE_DONE        1156
REVERSE_LOOP        1138
REVERSE_START       1128
SEVEN_MSG           149D
SIX_MSG             149B
SPACE_MSG           148C
START               1000
STARTING_MSG        13E2
STA_ADDR            143C
THREE_MSG           1495
TWO_MSG             1493
WORD_DISPLACEMENT_PRINT_LOOP  1316
WORD_MSG            13B9
ZERO_MSG            148F
